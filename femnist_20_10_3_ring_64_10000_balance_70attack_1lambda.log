Device: cuda
Seed: 987654321
Loading 36 LEAF FEMNIST train files...
LEAF FEMNIST train: 3597 users, 734463 samples
Loading 36 LEAF FEMNIST test files...
LEAF FEMNIST test: 3597 users, 83388 samples
Found 3597 train users, 3597 test users, 3597 common users
User sample counts range: 525 (max) to 17 (min)
Distributed ALL 3597 users across 20 clients
Users per client: 179 (with 17 clients getting +1 user)
Train partition sizes: [36360, 37070, 35957, 38262, 36024, 37732, 36921, 38328, 36867, 37683, 36507, 36915, 36007, 37001, 35681, 35453, 36585, 36801, 35964, 36345]
Test partition sizes: [4128, 4203, 4081, 4333, 4091, 4287, 4193, 4349, 4191, 4277, 4143, 4193, 4093, 4197, 4052, 4029, 4153, 4183, 4084, 4128]
  Client 0: 36360 train samples, 62 unique classes
  Client 1: 37070 train samples, 62 unique classes
  Client 2: 35957 train samples, 62 unique classes
  Client 3: 38262 train samples, 62 unique classes
  Client 4: 36024 train samples, 62 unique classes
  Client 5: 37732 train samples, 62 unique classes
  Client 6: 36921 train samples, 62 unique classes
  Client 7: 38328 train samples, 62 unique classes
  Client 8: 36867 train samples, 62 unique classes
  Client 9: 37683 train samples, 62 unique classes
  Client 10: 36507 train samples, 62 unique classes
  Client 11: 36915 train samples, 62 unique classes
  Client 12: 36007 train samples, 62 unique classes
  Client 13: 37001 train samples, 62 unique classes
  Client 14: 35681 train samples, 62 unique classes
  Client 15: 35453 train samples, 62 unique classes
  Client 16: 36585 train samples, 62 unique classes
  Client 17: 36801 train samples, 62 unique classes
  Client 18: 35964 train samples, 62 unique classes
  Client 19: 36345 train samples, 62 unique classes
Will sample 10000 samples per client per epoch
Graph: ring, nodes: 20, edges: 20
Attack: Compromised 14/20 nodes: [1, 2, 3, 5, 6, 8, 11, 12, 13, 14, 15, 17, 18, 19]
Attack type: directed_deviation, lambda: 1.0
BALANCE algorithm:
  - Model dimension: 6,603,710 parameters
  - Complexity: O(N×d) = O(20×6,603,710)
Initial test acc across nodes: mean=0.0162 ± 0.0138
Round 001: test acc mean=0.2498 ± 0.2115 | min=0.0041 max=0.4815
         : test loss mean=9551.3099 ± 11141.1412
         : individual accs = ['0.005329', '0.447537', '0.023524', '0.435726', '0.047910', '0.441801', '0.451944', '0.051966', '0.402529', '0.457330', '0.444364', '0.481517', '0.004642', '0.020014', '0.004936', '0.455944', '0.004093', '0.475496', '0.004163', '0.334787']
         : correct/total = [(22, 4128), (1881, 4203), (96, 4081), (1888, 4333), (196, 4091), (1894, 4287), (1895, 4193), (226, 4349), (1687, 4191), (1956, 4277), (1841, 4143), (2019, 4193), (19, 4093), (84, 4197), (20, 4052), (1837, 4029), (17, 4153), (1989, 4183), (17, 4084), (1382, 4128)]
         : compromised: 0.2846, honest: 0.1685
Round 002: test acc mean=0.1812 ± 0.2675 | min=0.0249 max=0.7423
         : test loss mean=nan ± nan
         : individual accs = ['0.049419', '0.048775', '0.049743', '0.024925', '0.045710', '0.052018', '0.041498', '0.049897', '0.670007', '0.742343', '0.729182', '0.720487', '0.047398', '0.047653', '0.054788', '0.046662', '0.047436', '0.046378', '0.054358', '0.054990']
         : correct/total = [(204, 4128), (205, 4203), (203, 4081), (108, 4333), (187, 4091), (223, 4287), (174, 4193), (217, 4349), (2808, 4191), (3175, 4277), (3021, 4143), (3021, 4193), (194, 4093), (200, 4197), (222, 4052), (188, 4029), (197, 4153), (194, 4183), (222, 4084), (227, 4128)]
         : compromised: 0.1400, honest: 0.2773
Round 003: test acc mean=0.1967 ± 0.2942 | min=0.0415 max=0.7985
         : test loss mean=nan ± nan
         : individual accs = ['0.049419', '0.048775', '0.049743', '0.046619', '0.045710', '0.052484', '0.041498', '0.049897', '0.771176', '0.798457', '0.781559', '0.789172', '0.047398', '0.047653', '0.054788', '0.054604', '0.047436', '0.049247', '0.054358', '0.054990']
         : correct/total = [(204, 4128), (205, 4203), (203, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (217, 4349), (3232, 4191), (3415, 4277), (3238, 4143), (3309, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (197, 4153), (206, 4183), (222, 4084), (227, 4128)]
         : compromised: 0.1545, honest: 0.2954
Round 004: test acc mean=0.2025 ± 0.3058 | min=0.0415 max=0.8256
         : test loss mean=nan ± nan
         : individual accs = ['0.049419', '0.048775', '0.049743', '0.046619', '0.045710', '0.052484', '0.041498', '0.049897', '0.820091', '0.825579', '0.805696', '0.804913', '0.047398', '0.047653', '0.054788', '0.054604', '0.047436', '0.049247', '0.054358', '0.054990']
         : correct/total = [(204, 4128), (205, 4203), (203, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (217, 4349), (3437, 4191), (3531, 4277), (3338, 4143), (3375, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (197, 4153), (206, 4183), (222, 4084), (227, 4128)]
         : compromised: 0.1591, honest: 0.3040
Round 005: test acc mean=0.2052 ± 0.3110 | min=0.0415 max=0.8342
         : test loss mean=nan ± nan
         : individual accs = ['0.049419', '0.048775', '0.049743', '0.046619', '0.045710', '0.052484', '0.041498', '0.049897', '0.834168', '0.832827', '0.820661', '0.821130', '0.047398', '0.047653', '0.054788', '0.054604', '0.047436', '0.049247', '0.054358', '0.054990']
         : correct/total = [(204, 4128), (205, 4203), (203, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (217, 4349), (3496, 4191), (3562, 4277), (3400, 4143), (3443, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (197, 4153), (206, 4183), (222, 4084), (227, 4128)]
         : compromised: 0.1612, honest: 0.3077
Round 006: test acc mean=0.2070 ± 0.3147 | min=0.0415 max=0.8447
         : test loss mean=nan ± nan
         : individual accs = ['0.049419', '0.048775', '0.049743', '0.046619', '0.045710', '0.052484', '0.041498', '0.049897', '0.844667', '0.842881', '0.822351', '0.835202', '0.047398', '0.047653', '0.054788', '0.054604', '0.047436', '0.049247', '0.054358', '0.054990']
         : correct/total = [(204, 4128), (205, 4203), (203, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (217, 4349), (3540, 4191), (3605, 4277), (3407, 4143), (3502, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (197, 4153), (206, 4183), (222, 4084), (227, 4128)]
         : compromised: 0.1630, honest: 0.3096
Round 007: test acc mean=0.2084 ± 0.3175 | min=0.0415 max=0.8485
         : test loss mean=nan ± nan
         : individual accs = ['0.049419', '0.048775', '0.049743', '0.046619', '0.045710', '0.052484', '0.041498', '0.049897', '0.848485', '0.845686', '0.838523', '0.841164', '0.047398', '0.047653', '0.054788', '0.054604', '0.047436', '0.049247', '0.054358', '0.054990']
         : correct/total = [(204, 4128), (205, 4203), (203, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (217, 4349), (3556, 4191), (3617, 4277), (3474, 4143), (3527, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (197, 4153), (206, 4183), (222, 4084), (227, 4128)]
         : compromised: 0.1637, honest: 0.3128
Round 008: test acc mean=0.2087 ± 0.3182 | min=0.0415 max=0.8522
         : test loss mean=nan ± nan
         : individual accs = ['0.049419', '0.048775', '0.049743', '0.046619', '0.045710', '0.052484', '0.041498', '0.049897', '0.847530', '0.852233', '0.836109', '0.844026', '0.047398', '0.047653', '0.054788', '0.054604', '0.047436', '0.049247', '0.054358', '0.054990']
         : correct/total = [(204, 4128), (205, 4203), (203, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (217, 4349), (3552, 4191), (3645, 4277), (3464, 4143), (3539, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (197, 4153), (206, 4183), (222, 4084), (227, 4128)]
         : compromised: 0.1638, honest: 0.3135
Round 009: test acc mean=0.2094 ± 0.3195 | min=0.0415 max=0.8602
         : test loss mean=nan ± nan
         : individual accs = ['0.049419', '0.048775', '0.049743', '0.046619', '0.045710', '0.052484', '0.041498', '0.049897', '0.860177', '0.852934', '0.838040', '0.841879', '0.047398', '0.047653', '0.054788', '0.054604', '0.047436', '0.049247', '0.054358', '0.054990']
         : correct/total = [(204, 4128), (205, 4203), (203, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (217, 4349), (3605, 4191), (3648, 4277), (3472, 4143), (3530, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (197, 4153), (206, 4183), (222, 4084), (227, 4128)]
         : compromised: 0.1646, honest: 0.3139
Round 010: test acc mean=0.2094 ± 0.3194 | min=0.0415 max=0.8560
         : test loss mean=nan ± nan
         : individual accs = ['0.049419', '0.048775', '0.049743', '0.046619', '0.045710', '0.052484', '0.041498', '0.049897', '0.850871', '0.855974', '0.841419', '0.844503', '0.047398', '0.047653', '0.054788', '0.054604', '0.047436', '0.049247', '0.054358', '0.054990']
         : correct/total = [(204, 4128), (205, 4203), (203, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (217, 4349), (3566, 4191), (3661, 4277), (3486, 4143), (3541, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (197, 4153), (206, 4183), (222, 4084), (227, 4128)]
         : compromised: 0.1641, honest: 0.3150

=== FINAL RESULTS ===
Dataset: femnist, Nodes: 20, Graph: ring, Aggregation: balance
Attack: directed_deviation, 70.0% compromised
Final accuracy - Compromised: 0.1641, Honest: 0.3150
Overall test accuracy: mean=0.2094 ± 0.3194

=== BALANCE SUMMARY ===
Node 0: acceptance=0.000
Node 1: acceptance=0.050
Node 2: acceptance=0.000
Node 3: acceptance=0.050
Node 4: acceptance=0.000
Node 5: acceptance=0.050
Node 6: acceptance=0.050
Node 7: acceptance=0.000
Node 8: acceptance=0.550
Node 9: acceptance=0.500
Node 10: acceptance=0.500
Node 11: acceptance=0.500
Node 12: acceptance=0.000
Node 13: acceptance=0.000
Node 14: acceptance=0.000
Node 15: acceptance=0.050
Node 16: acceptance=0.000
Node 17: acceptance=0.050
Node 18: acceptance=0.000
Node 19: acceptance=0.050

Performance Summary:
  - Distance computation time: 0.179s (31.6%)
  - Filtering time: 0.271s (47.8%)
  - Aggregation time: 0.117s (20.6%)
  - Total time: 0.568s
  - Mean acceptance rate: 0.120

BALANCE Algorithm Properties:
  - Model dimension: 6,603,710
  - No compression: Full parameter comparison
  - Theoretical complexity: O(deg(i)×d)
  - Approach: Full parameter filtering + averaging
