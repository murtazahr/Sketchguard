Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: ring, nodes: 20, edges: 20
Attack: Compromised 16/20 nodes: [1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.529361', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (613, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5161, honest: 0.5176
         : coarse stats = ['Node 0: acc_rate=0.000', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.000']...
Round 002: test acc mean=0.5129 ± 0.0211 | min=0.4738 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.485088', '0.508636', '0.499556', '0.528497', '0.522046', '0.514410', '0.521397', '0.505768', '0.562500', '0.512411', '0.473776', '0.488889', '0.522569', '0.493103', '0.490214', '0.517031', '0.548527', '0.508400', '0.537597', '0.517967']
         : correct/total = [(553, 1140), (589, 1158), (563, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (570, 1127), (639, 1136), (578, 1128), (542, 1144), (550, 1125), (602, 1152), (572, 1160), (551, 1124), (592, 1145), (633, 1154), (575, 1131), (622, 1157), (591, 1141)]
         : compromised: 0.5123, honest: 0.5154
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.250', 'Node 2: acc_rate=0.500']...
Round 003: test acc mean=0.5040 ± 0.0286 | min=0.4603 max=0.5679
         : test loss mean=1692.9839 ± 2414.6009
         : individual accs = ['0.482456', '0.510363', '0.567879', '0.485320', '0.460317', '0.514410', '0.522271', '0.499556', '0.534331', '0.493794', '0.484266', '0.552000', '0.479167', '0.497414', '0.481317', '0.508297', '0.556326', '0.491600', '0.476232', '0.482033']
         : correct/total = [(550, 1140), (591, 1158), (640, 1127), (562, 1158), (522, 1134), (589, 1145), (598, 1145), (563, 1127), (607, 1136), (557, 1128), (554, 1144), (621, 1125), (552, 1152), (577, 1160), (541, 1124), (582, 1145), (642, 1154), (556, 1131), (551, 1157), (550, 1141)]
         : compromised: 0.5050, honest: 0.4997
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.667']...
Round 004: test acc mean=0.4988 ± 0.0223 | min=0.4437 max=0.5387
         : test loss mean=19280.5435 ± 43636.2107
         : individual accs = ['0.471053', '0.508636', '0.475599', '0.528497', '0.485891', '0.493450', '0.473362', '0.521739', '0.443662', '0.508865', '0.475524', '0.538667', '0.504340', '0.512931', '0.520463', '0.510917', '0.505199', '0.508400', '0.490061', '0.497809']
         : correct/total = [(537, 1140), (589, 1158), (536, 1127), (612, 1158), (551, 1134), (565, 1145), (542, 1145), (588, 1127), (504, 1136), (574, 1128), (544, 1144), (606, 1125), (581, 1152), (595, 1160), (585, 1124), (585, 1145), (583, 1154), (575, 1131), (567, 1157), (568, 1141)]
         : compromised: 0.4994, honest: 0.4960
         : coarse stats = ['Node 0: acc_rate=0.750', 'Node 1: acc_rate=0.625', 'Node 2: acc_rate=0.750']...
Round 005: test acc mean=0.4988 ± 0.0253 | min=0.4401 max=0.5346
         : test loss mean=40755.8901 ± 79201.8196
         : individual accs = ['0.485088', '0.477547', '0.527950', '0.528497', '0.507937', '0.520524', '0.521397', '0.503993', '0.440141', '0.534574', '0.474650', '0.504000', '0.524306', '0.485345', '0.448399', '0.502183', '0.515598', '0.492485', '0.499568', '0.482033']
         : correct/total = [(553, 1140), (553, 1158), (595, 1127), (612, 1158), (576, 1134), (596, 1145), (597, 1145), (568, 1127), (500, 1136), (603, 1128), (543, 1144), (567, 1125), (604, 1152), (563, 1160), (504, 1124), (575, 1145), (595, 1154), (557, 1131), (578, 1157), (550, 1141)]
         : compromised: 0.4977, honest: 0.5032
         : coarse stats = ['Node 0: acc_rate=0.800', 'Node 1: acc_rate=0.700', 'Node 2: acc_rate=0.800']...
Round 006: test acc mean=0.4999 ± 0.0250 | min=0.4375 max=0.5397
         : test loss mean=12663.8721 ± 28629.8961
         : individual accs = ['0.496491', '0.539724', '0.522626', '0.522453', '0.474427', '0.485590', '0.521397', '0.503106', '0.437500', '0.482270', '0.484266', '0.492444', '0.521701', '0.522414', '0.517794', '0.461135', '0.515598', '0.491600', '0.523768', '0.482033']
         : correct/total = [(566, 1140), (625, 1158), (589, 1127), (605, 1158), (538, 1134), (556, 1145), (597, 1145), (567, 1127), (497, 1136), (544, 1128), (554, 1144), (554, 1125), (601, 1152), (606, 1160), (582, 1124), (528, 1145), (595, 1154), (556, 1131), (606, 1157), (550, 1141)]
         : compromised: 0.5005, honest: 0.4974
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=0.667', 'Node 2: acc_rate=0.833']...
Round 007: test acc mean=0.4926 ± 0.0250 | min=0.4366 max=0.5347
         : test loss mean=62790.2103 ± 74010.6711
         : individual accs = ['0.508772', '0.491364', '0.446318', '0.528497', '0.514109', '0.504803', '0.493450', '0.457853', '0.436620', '0.492021', '0.483392', '0.494222', '0.514757', '0.469828', '0.511566', '0.482969', '0.534662', '0.491600', '0.512532', '0.482033']
         : correct/total = [(580, 1140), (569, 1158), (503, 1127), (612, 1158), (583, 1134), (578, 1145), (565, 1145), (516, 1127), (496, 1136), (555, 1128), (553, 1144), (556, 1125), (593, 1152), (545, 1160), (575, 1124), (553, 1145), (617, 1154), (556, 1131), (593, 1157), (550, 1141)]
         : compromised: 0.4897, honest: 0.5038
         : coarse stats = ['Node 0: acc_rate=0.714', 'Node 1: acc_rate=0.643', 'Node 2: acc_rate=0.714']...
Round 008: test acc mean=0.4995 ± 0.0239 | min=0.4579 max=0.5625
         : test loss mean=175233.3513 ± 383698.9446
         : individual accs = ['0.457895', '0.508636', '0.504880', '0.528497', '0.521164', '0.514410', '0.478603', '0.503993', '0.562500', '0.499113', '0.478147', '0.478222', '0.535590', '0.503448', '0.490214', '0.489956', '0.480936', '0.493369', '0.476232', '0.483786']
         : correct/total = [(522, 1140), (589, 1158), (569, 1127), (612, 1158), (591, 1134), (589, 1145), (548, 1145), (568, 1127), (639, 1136), (563, 1128), (547, 1144), (538, 1125), (617, 1152), (584, 1160), (551, 1124), (561, 1145), (555, 1154), (558, 1131), (551, 1157), (552, 1141)]
         : compromised: 0.5016, honest: 0.4910
         : coarse stats = ['Node 0: acc_rate=0.625', 'Node 1: acc_rate=0.562', 'Node 2: acc_rate=0.625']...
Round 009: test acc mean=0.5059 ± 0.0238 | min=0.4663 max=0.5476
         : test loss mean=58152.9397 ± 126192.3678
         : individual accs = ['0.471930', '0.508636', '0.506655', '0.466321', '0.522046', '0.507424', '0.521397', '0.471162', '0.547535', '0.507092', '0.495629', '0.547556', '0.522569', '0.490517', '0.516904', '0.482969', '0.515598', '0.491600', '0.541919', '0.482033']
         : correct/total = [(538, 1140), (589, 1158), (571, 1127), (540, 1158), (592, 1134), (581, 1145), (597, 1145), (531, 1127), (622, 1136), (572, 1128), (567, 1144), (616, 1125), (602, 1152), (569, 1160), (581, 1124), (553, 1145), (595, 1154), (556, 1131), (627, 1157), (550, 1141)]
         : compromised: 0.5085, honest: 0.4952
         : coarse stats = ['Node 0: acc_rate=0.556', 'Node 1: acc_rate=0.556', 'Node 2: acc_rate=0.556']...
Round 010: test acc mean=0.5050 ± 0.0227 | min=0.4685 max=0.5625
         : test loss mean=14880.9564 ± 32707.7547
         : individual accs = ['0.524561', '0.487047', '0.496007', '0.471503', '0.522046', '0.485590', '0.521397', '0.468500', '0.562500', '0.516844', '0.524476', '0.515556', '0.488715', '0.525000', '0.495552', '0.517031', '0.508666', '0.508400', '0.477960', '0.482033']
         : correct/total = [(598, 1140), (564, 1158), (559, 1127), (546, 1158), (592, 1134), (556, 1145), (597, 1145), (528, 1127), (639, 1136), (583, 1128), (600, 1144), (580, 1125), (563, 1152), (609, 1160), (557, 1124), (592, 1145), (587, 1154), (575, 1131), (553, 1157), (550, 1141)]
         : compromised: 0.5047, honest: 0.5059
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.500']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: ring, Aggregation: coarse
Attack: gaussian, 80.0% compromised
Final accuracy - Compromised: 0.5047, Honest: 0.5059
Overall test accuracy: mean=0.5050 ± 0.0227

=== COARSE SUMMARY ===
Node 0: acceptance=0.500
Node 1: acceptance=0.500
Node 2: acceptance=0.500
Node 3: acceptance=0.400
Node 4: acceptance=0.500
Node 5: acceptance=0.450
Node 6: acceptance=0.400
Node 7: acceptance=0.500
Node 8: acceptance=0.400
Node 9: acceptance=0.500
Node 10: acceptance=0.500
Node 11: acceptance=0.500
Node 12: acceptance=0.500
Node 13: acceptance=0.500
Node 14: acceptance=0.500
Node 15: acceptance=0.450
Node 16: acceptance=0.500
Node 17: acceptance=0.450
Node 18: acceptance=0.500
Node 19: acceptance=0.450

Performance Summary:
  - Sketching time: 0.050s (20.8%)
  - Filtering time: 0.003s (1.3%)
  - Aggregation time: 0.185s (77.8%)
  - Total time: 0.238s
  - Mean acceptance rate: 0.475

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
