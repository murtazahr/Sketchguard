Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: ring, nodes: 20, edges: 20
Attack: Compromised 4/20 nodes: [5, 12, 13, 17]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5165 ± 0.0151 | min=0.4911 max=0.5625
         : test loss mean=0.8745 ± 0.1182
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.529361', '0.523810', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (613, 1158), (594, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5131, honest: 0.5173
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.7665 ± 0.1593 | min=0.4911 max=0.9138
         : test loss mean=0.4409 ± 0.2213
         : individual accs = ['0.530702', '0.683938', '0.691216', '0.822107', '0.894180', '0.514410', '0.906550', '0.894410', '0.563380', '0.491135', '0.694930', '0.883556', '0.899306', '0.913793', '0.909253', '0.905677', '0.913345', '0.508400', '0.887640', '0.821209']
         : correct/total = [(605, 1140), (792, 1158), (779, 1127), (952, 1158), (1014, 1134), (589, 1145), (1038, 1145), (1008, 1127), (640, 1136), (554, 1128), (795, 1144), (994, 1125), (1036, 1152), (1060, 1160), (1022, 1124), (1037, 1145), (1054, 1154), (575, 1131), (1027, 1157), (937, 1141)]
         : compromised: 0.7090, honest: 0.7808
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.6712 ± 0.1631 | min=0.4987 max=0.9144
         : test loss mean=nan ± nan
         : individual accs = ['0.858772', '0.829879', '0.668146', '0.886874', '0.522046', '0.709170', '0.521397', '0.882875', '0.611796', '0.648936', '0.863636', '0.498667', '0.522569', '0.506897', '0.517794', '0.914410', '0.515598', '0.508400', '0.522040', '0.913234']
         : correct/total = [(979, 1140), (961, 1158), (753, 1127), (1027, 1158), (592, 1134), (812, 1145), (597, 1145), (995, 1127), (695, 1136), (732, 1128), (988, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (1047, 1145), (595, 1154), (575, 1131), (604, 1157), (1042, 1141)]
         : compromised: 0.5618, honest: 0.6985
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.6416 ± 0.1564 | min=0.4812 max=0.8826
         : test loss mean=2043.4080 ± 4087.2654
         : individual accs = ['0.763158', '0.822107', '0.856256', '0.882556', '0.485891', '0.517031', '0.481223', '0.841171', '0.740317', '0.741135', '0.854895', '0.498667', '0.482639', '0.506897', '0.485765', '0.576419', '0.508666', '0.491600', '0.515990', '0.780018']
         : correct/total = [(870, 1140), (952, 1158), (965, 1127), (1022, 1158), (551, 1134), (592, 1145), (551, 1145), (948, 1127), (841, 1136), (836, 1128), (978, 1144), (561, 1125), (556, 1152), (588, 1160), (546, 1124), (660, 1145), (587, 1154), (556, 1131), (597, 1157), (890, 1141)]
         : compromised: 0.4995, honest: 0.6771
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.6644 ± 0.1879 | min=0.4613 max=0.9033
         : test loss mean=619.0374 ± 960.9573
         : individual accs = ['0.861404', '0.899827', '0.884650', '0.901554', '0.477072', '0.517904', '0.516157', '0.903283', '0.838908', '0.812943', '0.881993', '0.461333', '0.478299', '0.516379', '0.479537', '0.482969', '0.514731', '0.491600', '0.520311', '0.847502']
         : correct/total = [(982, 1140), (1042, 1158), (997, 1127), (1044, 1158), (541, 1134), (593, 1145), (591, 1145), (1018, 1127), (953, 1136), (917, 1128), (1009, 1144), (519, 1125), (551, 1152), (599, 1160), (539, 1124), (553, 1145), (594, 1154), (556, 1131), (602, 1157), (967, 1141)]
         : compromised: 0.5010, honest: 0.7053
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.6853 ± 0.1952 | min=0.4830 max=0.9105
         : test loss mean=729.7771 ± 1169.2680
         : individual accs = ['0.910526', '0.892055', '0.900621', '0.896373', '0.492945', '0.514410', '0.507424', '0.904170', '0.903169', '0.899823', '0.891608', '0.487111', '0.566840', '0.506034', '0.518683', '0.482969', '0.512998', '0.491600', '0.522040', '0.904470']
         : correct/total = [(1038, 1140), (1033, 1158), (1015, 1127), (1038, 1158), (559, 1134), (589, 1145), (581, 1145), (1019, 1127), (1026, 1136), (1015, 1128), (1020, 1144), (548, 1125), (653, 1152), (587, 1160), (583, 1124), (553, 1145), (592, 1154), (556, 1131), (604, 1157), (1032, 1141)]
         : compromised: 0.5197, honest: 0.7267
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.6875 ± 0.1989 | min=0.4780 max=0.9237
         : test loss mean=0.7318 ± 0.5008
         : individual accs = ['0.923684', '0.907599', '0.900621', '0.913644', '0.522046', '0.514410', '0.521397', '0.903283', '0.911092', '0.901596', '0.902098', '0.516444', '0.522569', '0.501724', '0.517794', '0.517031', '0.484402', '0.491600', '0.477960', '0.899211']
         : correct/total = [(1053, 1140), (1051, 1158), (1015, 1127), (1058, 1158), (592, 1134), (589, 1145), (597, 1145), (1018, 1127), (1035, 1136), (1017, 1128), (1032, 1144), (581, 1125), (602, 1152), (582, 1160), (582, 1124), (592, 1145), (559, 1154), (556, 1131), (553, 1157), (1026, 1141)]
         : compromised: 0.5076, honest: 0.7325
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.6897 ± 0.1961 | min=0.4774 max=0.9158
         : test loss mean=0.5546 ± 0.3206
         : individual accs = ['0.915789', '0.905872', '0.897959', '0.908463', '0.493827', '0.572926', '0.521397', '0.906832', '0.898768', '0.904255', '0.907343', '0.502222', '0.477431', '0.493103', '0.547153', '0.514410', '0.541594', '0.491600', '0.491789', '0.901840']
         : correct/total = [(1044, 1140), (1049, 1158), (1012, 1127), (1052, 1158), (560, 1134), (656, 1145), (597, 1145), (1022, 1127), (1021, 1136), (1020, 1128), (1038, 1144), (565, 1125), (550, 1152), (572, 1160), (615, 1124), (589, 1145), (625, 1154), (556, 1131), (569, 1157), (1029, 1141)]
         : compromised: 0.5088, honest: 0.7350
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.6193 ± 0.1658 | min=0.4829 max=0.9167
         : test loss mean=0.5957 ± 0.2043
         : individual accs = ['0.916667', '0.904145', '0.906832', '0.528497', '0.516755', '0.514410', '0.520524', '0.503993', '0.890845', '0.902482', '0.525350', '0.570667', '0.487847', '0.506034', '0.537367', '0.544978', '0.555459', '0.546419', '0.523768', '0.482910']
         : correct/total = [(1045, 1140), (1047, 1158), (1022, 1127), (612, 1158), (586, 1134), (589, 1145), (596, 1145), (568, 1127), (1012, 1136), (1018, 1128), (601, 1144), (642, 1125), (562, 1152), (587, 1160), (604, 1124), (624, 1145), (641, 1154), (618, 1131), (606, 1157), (551, 1141)]
         : compromised: 0.5137, honest: 0.6457
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.6012 ± 0.1009 | min=0.4897 max=0.8964
         : test loss mean=0.6493 ± 0.1280
         : individual accs = ['0.528947', '0.896373', '0.493345', '0.664076', '0.734568', '0.514410', '0.717031', '0.650399', '0.571303', '0.491135', '0.545455', '0.584000', '0.573785', '0.489655', '0.551601', '0.558952', '0.563258', '0.547303', '0.727744', '0.620508']
         : correct/total = [(603, 1140), (1038, 1158), (556, 1127), (769, 1158), (833, 1134), (589, 1145), (821, 1145), (733, 1127), (649, 1136), (554, 1128), (624, 1144), (657, 1125), (661, 1152), (568, 1160), (620, 1124), (640, 1145), (650, 1154), (619, 1131), (842, 1157), (708, 1141)]
         : compromised: 0.5313, honest: 0.6187
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: ring, Aggregation: coarse
Attack: gaussian, 20.0% compromised
Final accuracy - Compromised: 0.5313, Honest: 0.6187
Overall test accuracy: mean=0.6012 ± 0.1009

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=0.750
Node 4: acceptance=0.600
Node 5: acceptance=0.400
Node 6: acceptance=0.600
Node 7: acceptance=0.750
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=0.750
Node 11: acceptance=0.600
Node 12: acceptance=0.600
Node 13: acceptance=0.700
Node 14: acceptance=0.700
Node 15: acceptance=0.600
Node 16: acceptance=0.700
Node 17: acceptance=0.500
Node 18: acceptance=0.600
Node 19: acceptance=0.750

Performance Summary:
  - Sketching time: 0.040s (16.7%)
  - Filtering time: 0.003s (1.3%)
  - Aggregation time: 0.195s (82.0%)
  - Total time: 0.237s
  - Mean acceptance rate: 0.730

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
