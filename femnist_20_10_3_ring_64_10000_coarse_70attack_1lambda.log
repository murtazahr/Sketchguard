Device: cuda
Seed: 987654321
Loading 36 LEAF FEMNIST train files...
LEAF FEMNIST train: 3597 users, 734463 samples
Loading 36 LEAF FEMNIST test files...
LEAF FEMNIST test: 3597 users, 83388 samples
Found 3597 train users, 3597 test users, 3597 common users
User sample counts range: 525 (max) to 17 (min)
Distributed ALL 3597 users across 20 clients
Users per client: 179 (with 17 clients getting +1 user)
Train partition sizes: [36360, 37070, 35957, 38262, 36024, 37732, 36921, 38328, 36867, 37683, 36507, 36915, 36007, 37001, 35681, 35453, 36585, 36801, 35964, 36345]
Test partition sizes: [4128, 4203, 4081, 4333, 4091, 4287, 4193, 4349, 4191, 4277, 4143, 4193, 4093, 4197, 4052, 4029, 4153, 4183, 4084, 4128]
  Client 0: 36360 train samples, 62 unique classes
  Client 1: 37070 train samples, 62 unique classes
  Client 2: 35957 train samples, 62 unique classes
  Client 3: 38262 train samples, 62 unique classes
  Client 4: 36024 train samples, 62 unique classes
  Client 5: 37732 train samples, 62 unique classes
  Client 6: 36921 train samples, 62 unique classes
  Client 7: 38328 train samples, 62 unique classes
  Client 8: 36867 train samples, 62 unique classes
  Client 9: 37683 train samples, 62 unique classes
  Client 10: 36507 train samples, 62 unique classes
  Client 11: 36915 train samples, 62 unique classes
  Client 12: 36007 train samples, 62 unique classes
  Client 13: 37001 train samples, 62 unique classes
  Client 14: 35681 train samples, 62 unique classes
  Client 15: 35453 train samples, 62 unique classes
  Client 16: 36585 train samples, 62 unique classes
  Client 17: 36801 train samples, 62 unique classes
  Client 18: 35964 train samples, 62 unique classes
  Client 19: 36345 train samples, 62 unique classes
Will sample 10000 samples per client per epoch
Graph: ring, nodes: 20, edges: 20
Attack: Compromised 14/20 nodes: [1, 2, 3, 5, 6, 8, 11, 12, 13, 14, 15, 17, 18, 19]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 6,603,710 parameters
  - Sketch size: 1000
  - Compression ratio: 6603.7x
  - Complexity: O(d + N×k) = O(6,603,710 + 20×1000)
  - Theoretical speedup vs BALANCE: 19.9x
Initial test acc across nodes: mean=0.0162 ± 0.0138
Round 001: test acc mean=0.2508 ± 0.2102 | min=0.0073 max=0.4815
         : test loss mean=10502.6444 ± 12818.0822
         : individual accs = ['0.007267', '0.447537', '0.010292', '0.435726', '0.044243', '0.441801', '0.451944', '0.046447', '0.402529', '0.457330', '0.444364', '0.481517', '0.012460', '0.024780', '0.016535', '0.455944', '0.017818', '0.475496', '0.007346', '0.334787']
         : correct/total = [(30, 4128), (1881, 4203), (42, 4081), (1888, 4333), (181, 4091), (1894, 4287), (1895, 4193), (202, 4349), (1687, 4191), (1956, 4277), (1841, 4143), (2019, 4193), (51, 4093), (104, 4197), (67, 4052), (1837, 4029), (74, 4153), (1989, 4183), (30, 4084), (1382, 4128)]
         : compromised: 0.2856, honest: 0.1696
         : coarse stats = ['Node 0: acc_rate=0.000', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.000']...
Round 002: test acc mean=0.1833 ± 0.2664 | min=0.0415 max=0.7423
         : test loss mean=nan ± nan
         : individual accs = ['0.059109', '0.048775', '0.049253', '0.046619', '0.045710', '0.052484', '0.041498', '0.046907', '0.670007', '0.742343', '0.729182', '0.720487', '0.048131', '0.047653', '0.052320', '0.061554', '0.045750', '0.057853', '0.045544', '0.054990']
         : correct/total = [(244, 4128), (205, 4203), (201, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (204, 4349), (2808, 4191), (3175, 4277), (3021, 4143), (3021, 4193), (197, 4093), (200, 4197), (212, 4052), (248, 4029), (190, 4153), (242, 4183), (186, 4084), (227, 4128)]
         : compromised: 0.1427, honest: 0.2782
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.250', 'Node 2: acc_rate=0.000']...
Round 003: test acc mean=0.1922 ± 0.2968 | min=0.0046 max=0.7985
         : test loss mean=nan ± nan
         : individual accs = ['0.059109', '0.006186', '0.045577', '0.046619', '0.045710', '0.052484', '0.041498', '0.046447', '0.771176', '0.798457', '0.781559', '0.789172', '0.047398', '0.047653', '0.052320', '0.051874', '0.045750', '0.051159', '0.060235', '0.004603']
         : correct/total = [(244, 4128), (26, 4203), (186, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (202, 4349), (3232, 4191), (3415, 4277), (3238, 4143), (3309, 4193), (194, 4093), (200, 4197), (212, 4052), (209, 4029), (190, 4153), (214, 4183), (246, 4084), (19, 4128)]
         : compromised: 0.1477, honest: 0.2962
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.167', 'Node 2: acc_rate=0.167']...
Round 004: test acc mean=0.2001 ± 0.3072 | min=0.0027 max=0.8256
         : test loss mean=nan ± nan
         : individual accs = ['0.002665', '0.048299', '0.049253', '0.046619', '0.045710', '0.052484', '0.041498', '0.046447', '0.820091', '0.825579', '0.805696', '0.804913', '0.047398', '0.047653', '0.052320', '0.054604', '0.048158', '0.057853', '0.055583', '0.049176']
         : correct/total = [(11, 4128), (203, 4203), (201, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (202, 4349), (3437, 4191), (3531, 4277), (3338, 4143), (3375, 4193), (194, 4093), (200, 4197), (212, 4052), (220, 4029), (200, 4153), (242, 4183), (227, 4084), (203, 4128)]
         : compromised: 0.1591, honest: 0.2957
         : coarse stats = ['Node 0: acc_rate=0.750', 'Node 1: acc_rate=0.250', 'Node 2: acc_rate=0.250']...
Round 005: test acc mean=0.2056 ± 0.3109 | min=0.0415 max=0.8342
         : test loss mean=nan ± nan
         : individual accs = ['0.059109', '0.051392', '0.049253', '0.046619', '0.045710', '0.052484', '0.041498', '0.046907', '0.834168', '0.832827', '0.820661', '0.821130', '0.047398', '0.047653', '0.047384', '0.054604', '0.049362', '0.057853', '0.055583', '0.049903']
         : correct/total = [(244, 4128), (216, 4203), (201, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (204, 4349), (3496, 4191), (3562, 4277), (3400, 4143), (3443, 4193), (194, 4093), (200, 4197), (192, 4052), (220, 4029), (205, 4153), (242, 4183), (227, 4084), (206, 4128)]
         : compromised: 0.1612, honest: 0.3091
         : coarse stats = ['Node 0: acc_rate=0.800', 'Node 1: acc_rate=0.300', 'Node 2: acc_rate=0.300']...
Round 006: test acc mean=0.2078 ± 0.3143 | min=0.0415 max=0.8447
         : test loss mean=nan ± nan
         : individual accs = ['0.049661', '0.048775', '0.061505', '0.046619', '0.045710', '0.052484', '0.041498', '0.045298', '0.844667', '0.842881', '0.822351', '0.835202', '0.047398', '0.047653', '0.052320', '0.054604', '0.048158', '0.057853', '0.055583', '0.054990']
         : correct/total = [(205, 4128), (205, 4203), (251, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (197, 4349), (3540, 4191), (3605, 4277), (3407, 4143), (3502, 4193), (194, 4093), (200, 4197), (212, 4052), (220, 4029), (200, 4153), (242, 4183), (227, 4084), (227, 4128)]
         : compromised: 0.1644, honest: 0.3090
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=0.333', 'Node 2: acc_rate=0.333']...
Round 007: test acc mean=0.2091 ± 0.3172 | min=0.0415 max=0.8485
         : test loss mean=nan ± nan
         : individual accs = ['0.049661', '0.048775', '0.061505', '0.046619', '0.045710', '0.052484', '0.041498', '0.052656', '0.848485', '0.845686', '0.838523', '0.841164', '0.047398', '0.047653', '0.047384', '0.054604', '0.048158', '0.057853', '0.050196', '0.054990']
         : correct/total = [(205, 4128), (205, 4203), (251, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (229, 4349), (3556, 4191), (3617, 4277), (3474, 4143), (3527, 4193), (194, 4093), (200, 4197), (192, 4052), (220, 4029), (200, 4153), (242, 4183), (205, 4084), (227, 4128)]
         : compromised: 0.1643, honest: 0.3134
         : coarse stats = ['Node 0: acc_rate=0.857', 'Node 1: acc_rate=0.357', 'Node 2: acc_rate=0.357']...
Round 008: test acc mean=0.2103 ± 0.3174 | min=0.0415 max=0.8522
         : test loss mean=nan ± nan
         : individual accs = ['0.049661', '0.048775', '0.061505', '0.046619', '0.045710', '0.052484', '0.041498', '0.052656', '0.847530', '0.852233', '0.836109', '0.844026', '0.048131', '0.047653', '0.055281', '0.054604', '0.048158', '0.057853', '0.060235', '0.054990']
         : correct/total = [(205, 4128), (205, 4203), (251, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (229, 4349), (3552, 4191), (3645, 4277), (3464, 4143), (3539, 4193), (197, 4093), (200, 4197), (224, 4052), (220, 4029), (200, 4153), (242, 4183), (246, 4084), (227, 4128)]
         : compromised: 0.1658, honest: 0.3141
         : coarse stats = ['Node 0: acc_rate=0.875', 'Node 1: acc_rate=0.375', 'Node 2: acc_rate=0.375']...
Round 009: test acc mean=0.2101 ± 0.3191 | min=0.0415 max=0.8602
         : test loss mean=nan ± nan
         : individual accs = ['0.049661', '0.048299', '0.061505', '0.046619', '0.045710', '0.052484', '0.041498', '0.052656', '0.860177', '0.852934', '0.838040', '0.841879', '0.047398', '0.047653', '0.055281', '0.054604', '0.050807', '0.057853', '0.048482', '0.049176']
         : correct/total = [(205, 4128), (203, 4203), (251, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (229, 4349), (3605, 4191), (3648, 4277), (3472, 4143), (3530, 4193), (194, 4093), (200, 4197), (224, 4052), (220, 4029), (211, 4153), (242, 4183), (198, 4084), (203, 4128)]
         : compromised: 0.1652, honest: 0.3150
         : coarse stats = ['Node 0: acc_rate=0.889', 'Node 1: acc_rate=0.389', 'Node 2: acc_rate=0.389']...
Round 010: test acc mean=0.2086 ± 0.3199 | min=0.0116 max=0.8560
         : test loss mean=nan ± nan
         : individual accs = ['0.059109', '0.048775', '0.049253', '0.046619', '0.045710', '0.052484', '0.041498', '0.046907', '0.850871', '0.855974', '0.841419', '0.844503', '0.047398', '0.047653', '0.055281', '0.054604', '0.011558', '0.057853', '0.060235', '0.054990']
         : correct/total = [(244, 4128), (205, 4203), (201, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (204, 4349), (3566, 4191), (3661, 4277), (3486, 4143), (3541, 4193), (194, 4093), (200, 4197), (224, 4052), (220, 4029), (48, 4153), (242, 4183), (246, 4084), (227, 4128)]
         : compromised: 0.1651, honest: 0.3101
         : coarse stats = ['Node 0: acc_rate=0.900', 'Node 1: acc_rate=0.400', 'Node 2: acc_rate=0.400']...

=== FINAL RESULTS ===
Dataset: femnist, Nodes: 20, Graph: ring, Aggregation: coarse
Attack: directed_deviation, 70.0% compromised
Final accuracy - Compromised: 0.1651, Honest: 0.3101
Overall test accuracy: mean=0.2086 ± 0.3199

=== COARSE SUMMARY ===
Node 0: acceptance=0.900
Node 1: acceptance=0.400
Node 2: acceptance=0.400
Node 3: acceptance=0.050
Node 4: acceptance=0.000
Node 5: acceptance=0.050
Node 6: acceptance=0.050
Node 7: acceptance=0.900
Node 8: acceptance=0.550
Node 9: acceptance=0.500
Node 10: acceptance=0.500
Node 11: acceptance=0.500
Node 12: acceptance=0.300
Node 13: acceptance=0.000
Node 14: acceptance=0.450
Node 15: acceptance=0.100
Node 16: acceptance=0.900
Node 17: acceptance=0.400
Node 18: acceptance=0.350
Node 19: acceptance=0.400

Performance Summary:
  - Sketching time: 17.996s (98.7%)
  - Filtering time: 0.013s (0.1%)
  - Aggregation time: 0.225s (1.2%)
  - Total time: 18.233s
  - Mean acceptance rate: 0.385

COARSE Algorithm Properties:
  - Original dimension: 6,603,710
  - Sketch size: 1000
  - Compression ratio: 19.9x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
