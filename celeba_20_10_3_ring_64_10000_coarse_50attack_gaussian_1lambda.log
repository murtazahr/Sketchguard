Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: ring, nodes: 20, edges: 20
Attack: Compromised 10/20 nodes: [1, 2, 5, 11, 12, 13, 14, 15, 17, 18]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5165 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.494232', '0.529361', '0.523810', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (557, 1127), (613, 1158), (594, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5111, honest: 0.5220
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.500']...
Round 002: test acc mean=0.7207 ± 0.1850 | min=0.4778 max=0.9140
         : test loss mean=nan ± nan
         : individual accs = ['0.914035', '0.881693', '0.892635', '0.897237', '0.908289', '0.514410', '0.906550', '0.894410', '0.563380', '0.618794', '0.869755', '0.768000', '0.512153', '0.493103', '0.477758', '0.517031', '0.484402', '0.508400', '0.879862', '0.912358']
         : correct/total = [(1042, 1140), (1021, 1158), (1006, 1127), (1039, 1158), (1030, 1134), (589, 1145), (1038, 1145), (1008, 1127), (640, 1136), (698, 1128), (995, 1144), (864, 1125), (590, 1152), (572, 1160), (537, 1124), (592, 1145), (559, 1154), (575, 1131), (1018, 1157), (1041, 1141)]
         : compromised: 0.6445, honest: 0.7969
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.500']...
Round 003: test acc mean=0.5543 ± 0.1076 | min=0.4822 max=0.8829
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.626201', '0.521397', '0.882875', '0.611796', '0.831560', '0.525350', '0.498667', '0.522569', '0.495690', '0.482206', '0.482969', '0.484402', '0.498674', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (717, 1145), (597, 1145), (995, 1127), (695, 1136), (938, 1128), (601, 1144), (561, 1125), (602, 1152), (575, 1160), (542, 1124), (553, 1145), (559, 1154), (564, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5131, honest: 0.5955
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.667', 'Node 2: acc_rate=0.667']...
Round 004: test acc mean=0.5510 ± 0.1071 | min=0.4715 max=0.8598
         : test loss mean=3104.1038 ± 7440.9097
         : individual accs = ['0.521930', '0.492228', '0.491571', '0.471503', '0.473545', '0.514410', '0.543231', '0.859805', '0.773768', '0.759752', '0.525350', '0.504000', '0.522569', '0.500000', '0.527580', '0.509170', '0.484402', '0.536693', '0.475367', '0.533742']
         : correct/total = [(595, 1140), (570, 1158), (554, 1127), (546, 1158), (537, 1134), (589, 1145), (622, 1145), (969, 1127), (879, 1136), (857, 1128), (601, 1144), (567, 1125), (602, 1152), (580, 1160), (593, 1124), (583, 1145), (559, 1154), (607, 1131), (550, 1157), (609, 1141)]
         : compromised: 0.5074, honest: 0.5947
         : coarse stats = ['Node 0: acc_rate=0.750', 'Node 1: acc_rate=0.750', 'Node 2: acc_rate=0.750']...
Round 005: test acc mean=0.5564 ± 0.1349 | min=0.4780 max=0.8917
         : test loss mean=24949.0962 ± 103271.2494
         : individual accs = ['0.499123', '0.508636', '0.541260', '0.533679', '0.477954', '0.514410', '0.503057', '0.891748', '0.865317', '0.867908', '0.495629', '0.482667', '0.480903', '0.481034', '0.485765', '0.482969', '0.514731', '0.491600', '0.496975', '0.513585']
         : correct/total = [(569, 1140), (589, 1158), (610, 1127), (618, 1158), (542, 1134), (589, 1145), (576, 1145), (1005, 1127), (983, 1136), (979, 1128), (567, 1144), (543, 1125), (554, 1152), (558, 1160), (546, 1124), (553, 1145), (594, 1154), (556, 1131), (575, 1157), (586, 1141)]
         : compromised: 0.4966, honest: 0.6163
         : coarse stats = ['Node 0: acc_rate=0.800', 'Node 1: acc_rate=0.800', 'Node 2: acc_rate=0.800']...
Round 006: test acc mean=0.5553 ± 0.1471 | min=0.4638 max=0.9095
         : test loss mean=25167.1232 ± 86006.5192
         : individual accs = ['0.486842', '0.491364', '0.511979', '0.477547', '0.482363', '0.485590', '0.463755', '0.909494', '0.904049', '0.892730', '0.473776', '0.471111', '0.486979', '0.505172', '0.467972', '0.515284', '0.545061', '0.525199', '0.519447', '0.490798']
         : correct/total = [(555, 1140), (569, 1158), (577, 1127), (553, 1158), (547, 1134), (556, 1145), (531, 1145), (1025, 1127), (1027, 1136), (1007, 1128), (542, 1144), (530, 1125), (561, 1152), (586, 1160), (526, 1124), (590, 1145), (629, 1154), (594, 1131), (601, 1157), (560, 1141)]
         : compromised: 0.4980, honest: 0.6126
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=0.833', 'Node 2: acc_rate=0.833']...
Round 007: test acc mean=0.5529 ± 0.1478 | min=0.4635 max=0.9113
         : test loss mean=56841.0989 ± 155007.7137
         : individual accs = ['0.471053', '0.491364', '0.506655', '0.471503', '0.477954', '0.514410', '0.478603', '0.911269', '0.901408', '0.895390', '0.525350', '0.498667', '0.463542', '0.506034', '0.498221', '0.482969', '0.513865', '0.491600', '0.477096', '0.482033']
         : correct/total = [(537, 1140), (569, 1158), (571, 1127), (546, 1158), (542, 1134), (589, 1145), (548, 1145), (1027, 1127), (1024, 1136), (1010, 1128), (601, 1144), (561, 1125), (534, 1152), (587, 1160), (560, 1124), (553, 1145), (593, 1154), (556, 1131), (552, 1157), (550, 1141)]
         : compromised: 0.4931, honest: 0.6128
         : coarse stats = ['Node 0: acc_rate=0.714', 'Node 1: acc_rate=0.786', 'Node 2: acc_rate=0.786']...
Round 008: test acc mean=0.5651 ± 0.1456 | min=0.4711 max=0.9130
         : test loss mean=172189.3033 ± 490375.0270
         : individual accs = ['0.471053', '0.494819', '0.506655', '0.493955', '0.480600', '0.593886', '0.522271', '0.913043', '0.899648', '0.906028', '0.525350', '0.498667', '0.481771', '0.484483', '0.482206', '0.522271', '0.484402', '0.507515', '0.522040', '0.511832']
         : correct/total = [(537, 1140), (573, 1158), (571, 1127), (572, 1158), (545, 1134), (680, 1145), (598, 1145), (1029, 1127), (1022, 1136), (1022, 1128), (601, 1144), (561, 1125), (555, 1152), (562, 1160), (542, 1124), (598, 1145), (559, 1154), (574, 1131), (604, 1157), (584, 1141)]
         : compromised: 0.5094, honest: 0.6208
         : coarse stats = ['Node 0: acc_rate=0.688', 'Node 1: acc_rate=0.688', 'Node 2: acc_rate=0.750']...
Round 009: test acc mean=0.5160 ± 0.0903 | min=0.4470 max=0.8979
         : test loss mean=67742.4236 ± 208359.3029
         : individual accs = ['0.457895', '0.491364', '0.467613', '0.524180', '0.500000', '0.527511', '0.521397', '0.503993', '0.897887', '0.491135', '0.525350', '0.498667', '0.447049', '0.491379', '0.505338', '0.517031', '0.484402', '0.507515', '0.477960', '0.482033']
         : correct/total = [(522, 1140), (569, 1158), (527, 1127), (607, 1158), (567, 1134), (604, 1145), (597, 1145), (568, 1127), (1020, 1136), (554, 1128), (601, 1144), (561, 1125), (515, 1152), (570, 1160), (568, 1124), (592, 1145), (559, 1154), (574, 1131), (553, 1157), (550, 1141)]
         : compromised: 0.4931, honest: 0.5388
         : coarse stats = ['Node 0: acc_rate=0.611', 'Node 1: acc_rate=0.611', 'Node 2: acc_rate=0.667']...
Round 010: test acc mean=0.5437 ± 0.0740 | min=0.4711 max=0.7651
         : test loss mean=40577.3243 ± 124259.2864
         : individual accs = ['0.471053', '0.528497', '0.550133', '0.497409', '0.486772', '0.629694', '0.765066', '0.583851', '0.562500', '0.586879', '0.687937', '0.498667', '0.481771', '0.512931', '0.481317', '0.480349', '0.522530', '0.508400', '0.521175', '0.517967']
         : correct/total = [(537, 1140), (612, 1158), (620, 1127), (576, 1158), (552, 1134), (721, 1145), (876, 1145), (658, 1127), (639, 1136), (662, 1128), (787, 1144), (561, 1125), (555, 1152), (595, 1160), (541, 1124), (550, 1145), (603, 1154), (575, 1131), (603, 1157), (591, 1141)]
         : compromised: 0.5193, honest: 0.5682
         : coarse stats = ['Node 0: acc_rate=0.550', 'Node 1: acc_rate=0.550', 'Node 2: acc_rate=0.650']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: ring, Aggregation: coarse
Attack: gaussian, 50.0% compromised
Final accuracy - Compromised: 0.5193, Honest: 0.5682
Overall test accuracy: mean=0.5437 ± 0.0740

=== COARSE SUMMARY ===
Node 0: acceptance=0.550
Node 1: acceptance=0.550
Node 2: acceptance=0.650
Node 3: acceptance=0.700
Node 4: acceptance=0.700
Node 5: acceptance=0.350
Node 6: acceptance=0.600
Node 7: acceptance=0.750
Node 8: acceptance=1.000
Node 9: acceptance=0.750
Node 10: acceptance=0.600
Node 11: acceptance=0.600
Node 12: acceptance=0.500
Node 13: acceptance=0.500
Node 14: acceptance=0.500
Node 15: acceptance=0.400
Node 16: acceptance=0.500
Node 17: acceptance=0.500
Node 18: acceptance=0.550
Node 19: acceptance=0.500

Performance Summary:
  - Sketching time: 0.045s (19.1%)
  - Filtering time: 0.003s (1.4%)
  - Aggregation time: 0.188s (79.5%)
  - Total time: 0.237s
  - Mean acceptance rate: 0.588

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
