Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: fully, nodes: 20, edges: 190
Attack: Compromised 8/20 nodes: [1, 5, 11, 12, 13, 14, 17, 18]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8334 ± 0.0739
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5124, honest: 0.5190
         : coarse stats = ['Node 0: acc_rate=0.579', 'Node 1: acc_rate=0.632', 'Node 2: acc_rate=0.579']...
Round 002: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.7806 ± 0.0572
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5124, honest: 0.5190
         : coarse stats = ['Node 0: acc_rate=0.579', 'Node 1: acc_rate=0.632', 'Node 2: acc_rate=0.579']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5124, honest: 0.5190
         : coarse stats = ['Node 0: acc_rate=0.719', 'Node 1: acc_rate=0.754', 'Node 2: acc_rate=0.719']...
Round 004: test acc mean=0.4814 ± 0.0144 | min=0.4384 max=0.5084
         : test loss mean=160.8240 ± 63.7743
         : individual accs = ['0.475439', '0.473230', '0.508429', '0.470639', '0.481481', '0.487336', '0.471616', '0.499556', '0.438380', '0.496454', '0.474650', '0.486222', '0.476562', '0.498276', '0.484875', '0.482969', '0.485269', '0.489832', '0.467589', '0.479404']
         : correct/total = [(542, 1140), (548, 1158), (573, 1127), (545, 1158), (546, 1134), (558, 1145), (540, 1145), (563, 1127), (498, 1136), (560, 1128), (543, 1144), (547, 1125), (549, 1152), (578, 1160), (545, 1124), (553, 1145), (560, 1154), (554, 1131), (541, 1157), (547, 1141)]
         : compromised: 0.4830, honest: 0.4804
         : coarse stats = ['Node 0: acc_rate=0.789', 'Node 1: acc_rate=0.816', 'Node 2: acc_rate=0.789']...
Round 005: test acc mean=0.4855 ± 0.0184 | min=0.4375 max=0.5119
         : test loss mean=122.7620 ± 47.1164
         : individual accs = ['0.471053', '0.506908', '0.508429', '0.471503', '0.478836', '0.485590', '0.479476', '0.498669', '0.437500', '0.508865', '0.475524', '0.510222', '0.477431', '0.493103', '0.485765', '0.483843', '0.485269', '0.511936', '0.458081', '0.481157']
         : correct/total = [(537, 1140), (587, 1158), (573, 1127), (546, 1158), (543, 1134), (556, 1145), (549, 1145), (562, 1127), (497, 1136), (574, 1128), (544, 1144), (574, 1125), (550, 1152), (572, 1160), (546, 1124), (554, 1145), (560, 1154), (579, 1131), (530, 1157), (549, 1141)]
         : compromised: 0.4911, honest: 0.4817
         : coarse stats = ['Node 0: acc_rate=0.832', 'Node 1: acc_rate=0.853', 'Node 2: acc_rate=0.832']...
Round 006: test acc mean=0.5098 ± 0.0179 | min=0.4770 max=0.5467
         : test loss mean=32.6868 ± 9.8321
         : individual accs = ['0.521053', '0.489637', '0.498669', '0.532815', '0.515873', '0.525764', '0.509170', '0.496007', '0.546655', '0.476950', '0.512238', '0.488889', '0.532118', '0.508621', '0.479537', '0.515284', '0.499133', '0.518126', '0.523768', '0.505697']
         : correct/total = [(594, 1140), (567, 1158), (562, 1127), (617, 1158), (585, 1134), (602, 1145), (583, 1145), (559, 1127), (621, 1136), (538, 1128), (586, 1144), (550, 1125), (613, 1152), (590, 1160), (539, 1124), (590, 1145), (576, 1154), (586, 1131), (606, 1157), (577, 1141)]
         : compromised: 0.5083, honest: 0.5108
         : coarse stats = ['Node 0: acc_rate=0.860', 'Node 1: acc_rate=0.877', 'Node 2: acc_rate=0.860']...
Round 007: test acc mean=0.5981 ± 0.0521 | min=0.4831 max=0.6623
         : test loss mean=0.7087 ± 0.1697
         : individual accs = ['0.635965', '0.574266', '0.633540', '0.627807', '0.662257', '0.610480', '0.628821', '0.588287', '0.642606', '0.608156', '0.615385', '0.551111', '0.523438', '0.493103', '0.483096', '0.645415', '0.652513', '0.624226', '0.536733', '0.624890']
         : correct/total = [(725, 1140), (665, 1158), (714, 1127), (727, 1158), (751, 1134), (699, 1145), (720, 1145), (663, 1127), (730, 1136), (686, 1128), (704, 1144), (620, 1125), (603, 1152), (572, 1160), (543, 1124), (739, 1145), (753, 1154), (706, 1131), (621, 1157), (713, 1141)]
         : compromised: 0.5496, honest: 0.6305
         : coarse stats = ['Node 0: acc_rate=0.820', 'Node 1: acc_rate=0.842', 'Node 2: acc_rate=0.820']...
Round 008: test acc mean=0.6915 ± 0.0348 | min=0.5791 max=0.7376
         : test loss mean=0.5847 ± 0.0301
         : individual accs = ['0.700000', '0.688256', '0.716948', '0.697755', '0.696649', '0.715284', '0.724017', '0.665484', '0.706866', '0.737589', '0.722028', '0.675556', '0.676215', '0.662069', '0.643238', '0.692576', '0.712305', '0.694076', '0.579084', '0.724803']
         : correct/total = [(798, 1140), (797, 1158), (808, 1127), (808, 1158), (790, 1134), (819, 1145), (829, 1145), (750, 1127), (803, 1136), (832, 1128), (826, 1144), (760, 1125), (779, 1152), (768, 1160), (723, 1124), (793, 1145), (822, 1154), (785, 1131), (670, 1157), (827, 1141)]
         : compromised: 0.6667, honest: 0.7081
         : coarse stats = ['Node 0: acc_rate=0.789', 'Node 1: acc_rate=0.816', 'Node 2: acc_rate=0.789']...
Round 009: test acc mean=0.7551 ± 0.0170 | min=0.7260 max=0.7807
         : test loss mean=0.5036 ± 0.0222
         : individual accs = ['0.769298', '0.765976', '0.773736', '0.780656', '0.734568', '0.770306', '0.774672', '0.739130', '0.754401', '0.773936', '0.767483', '0.761778', '0.739583', '0.752586', '0.733096', '0.728384', '0.766031', '0.745358', '0.726016', '0.744961']
         : correct/total = [(877, 1140), (887, 1158), (872, 1127), (904, 1158), (833, 1134), (882, 1145), (887, 1145), (833, 1127), (857, 1136), (873, 1128), (878, 1144), (857, 1125), (852, 1152), (873, 1160), (824, 1124), (834, 1145), (884, 1154), (843, 1131), (840, 1157), (850, 1141)]
         : compromised: 0.7493, honest: 0.7589
         : coarse stats = ['Node 0: acc_rate=0.766', 'Node 1: acc_rate=0.795', 'Node 2: acc_rate=0.766']...
Round 010: test acc mean=0.7971 ± 0.0145 | min=0.7633 max=0.8187
         : test loss mean=0.4393 ± 0.0200
         : individual accs = ['0.807018', '0.816062', '0.800355', '0.810881', '0.782187', '0.806114', '0.809607', '0.795918', '0.818662', '0.799645', '0.812937', '0.799111', '0.777778', '0.795690', '0.775801', '0.763319', '0.804159', '0.781609', '0.787381', '0.798422']
         : correct/total = [(920, 1140), (945, 1158), (902, 1127), (939, 1158), (887, 1134), (923, 1145), (927, 1145), (897, 1127), (930, 1136), (902, 1128), (930, 1144), (899, 1125), (896, 1152), (923, 1160), (872, 1124), (874, 1145), (928, 1154), (884, 1131), (911, 1157), (911, 1141)]
         : compromised: 0.7924, honest: 0.8003
         : coarse stats = ['Node 0: acc_rate=0.747', 'Node 1: acc_rate=0.779', 'Node 2: acc_rate=0.747']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: fully, Aggregation: coarse
Attack: gaussian, 40.0% compromised
Final accuracy - Compromised: 0.7924, Honest: 0.8003
Overall test accuracy: mean=0.7971 ± 0.0145

=== COARSE SUMMARY ===
Node 0: acceptance=0.747
Node 1: acceptance=0.779
Node 2: acceptance=0.747
Node 3: acceptance=0.747
Node 4: acceptance=0.747
Node 5: acceptance=0.779
Node 6: acceptance=0.747
Node 7: acceptance=0.747
Node 8: acceptance=0.747
Node 9: acceptance=0.747
Node 10: acceptance=0.747
Node 11: acceptance=0.779
Node 12: acceptance=0.779
Node 13: acceptance=0.779
Node 14: acceptance=0.779
Node 15: acceptance=0.747
Node 16: acceptance=0.747
Node 17: acceptance=0.779
Node 18: acceptance=0.779
Node 19: acceptance=0.747

Performance Summary:
  - Sketching time: 0.049s (4.2%)
  - Filtering time: 0.012s (1.0%)
  - Aggregation time: 1.113s (94.8%)
  - Total time: 1.174s
  - Mean acceptance rate: 0.760

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
