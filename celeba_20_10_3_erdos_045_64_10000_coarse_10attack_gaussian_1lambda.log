Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 99
Attack: Compromised 2/20 nodes: [5, 13]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8420 ± 0.0795
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5107, honest: 0.5170
         : coarse stats = ['Node 0: acc_rate=0.917', 'Node 1: acc_rate=0.900', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5186 ± 0.0160 | min=0.4911 max=0.5625
         : test loss mean=0.7515 ± 0.0731
         : individual accs = ['0.528947', '0.508636', '0.494232', '0.528497', '0.522046', '0.514410', '0.522271', '0.546584', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (557, 1127), (612, 1158), (592, 1134), (589, 1145), (598, 1145), (616, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5107, honest: 0.5195
         : coarse stats = ['Node 0: acc_rate=0.917', 'Node 1: acc_rate=0.900', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5174 ± 0.0153 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.494232', '0.528497', '0.522046', '0.531878', '0.521397', '0.503993', '0.562500', '0.491135', '0.526224', '0.498667', '0.522569', '0.507759', '0.517794', '0.517031', '0.516464', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (557, 1127), (612, 1158), (592, 1134), (609, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (602, 1144), (561, 1125), (602, 1152), (589, 1160), (582, 1124), (592, 1145), (596, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5198, honest: 0.5171
         : coarse stats = ['Node 0: acc_rate=0.944', 'Node 1: acc_rate=0.933', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5029 ± 0.0154 | min=0.4736 max=0.5262
         : test loss mean=43.0195 ± 54.7575
         : individual accs = ['0.508772', '0.523316', '0.493345', '0.481002', '0.491182', '0.506550', '0.491703', '0.503993', '0.473592', '0.491135', '0.525350', '0.526222', '0.522569', '0.506897', '0.499110', '0.519651', '0.515598', '0.503095', '0.481417', '0.493427']
         : correct/total = [(580, 1140), (606, 1158), (556, 1127), (557, 1158), (557, 1134), (580, 1145), (563, 1145), (568, 1127), (538, 1136), (554, 1128), (601, 1144), (592, 1125), (602, 1152), (588, 1160), (561, 1124), (595, 1145), (595, 1154), (569, 1131), (557, 1157), (563, 1141)]
         : compromised: 0.5067, honest: 0.5025
         : coarse stats = ['Node 0: acc_rate=0.937', 'Node 1: acc_rate=0.950', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.4982 ± 0.0328 | min=0.4366 max=0.5768
         : test loss mean=28.4418 ± 46.2065
         : individual accs = ['0.478947', '0.493092', '0.576752', '0.527634', '0.503527', '0.488210', '0.477729', '0.514641', '0.436620', '0.570035', '0.528846', '0.496889', '0.452257', '0.507759', '0.478648', '0.494323', '0.484402', '0.488064', '0.486603', '0.478528']
         : correct/total = [(546, 1140), (571, 1158), (650, 1127), (611, 1158), (571, 1134), (559, 1145), (547, 1145), (580, 1127), (496, 1136), (643, 1128), (605, 1144), (559, 1125), (521, 1152), (589, 1160), (538, 1124), (566, 1145), (559, 1154), (552, 1131), (563, 1157), (546, 1141)]
         : compromised: 0.4980, honest: 0.4982
         : coarse stats = ['Node 0: acc_rate=0.933', 'Node 1: acc_rate=0.960', 'Node 2: acc_rate=0.975']...
Round 006: test acc mean=0.5095 ± 0.0389 | min=0.4711 max=0.6344
         : test loss mean=26.7650 ± 48.6497
         : individual accs = ['0.471053', '0.531952', '0.634428', '0.526770', '0.493827', '0.485590', '0.489956', '0.496007', '0.526408', '0.578901', '0.474650', '0.488000', '0.477431', '0.507759', '0.497331', '0.501310', '0.484402', '0.547303', '0.484010', '0.493427']
         : correct/total = [(537, 1140), (616, 1158), (715, 1127), (610, 1158), (560, 1134), (556, 1145), (561, 1145), (559, 1127), (598, 1136), (653, 1128), (543, 1144), (549, 1125), (550, 1152), (589, 1160), (559, 1124), (574, 1145), (559, 1154), (619, 1131), (560, 1157), (563, 1141)]
         : compromised: 0.4967, honest: 0.5110
         : coarse stats = ['Node 0: acc_rate=0.917', 'Node 1: acc_rate=0.967', 'Node 2: acc_rate=0.958']...
Round 007: test acc mean=0.4983 ± 0.0376 | min=0.4375 max=0.6268
         : test loss mean=0.7622 ± 0.1240
         : individual accs = ['0.471053', '0.491364', '0.528838', '0.471503', '0.478836', '0.485590', '0.478603', '0.496007', '0.437500', '0.626773', '0.474650', '0.501333', '0.477431', '0.531034', '0.482206', '0.492576', '0.541594', '0.508400', '0.508211', '0.482033']
         : correct/total = [(537, 1140), (569, 1158), (596, 1127), (546, 1158), (543, 1134), (556, 1145), (548, 1145), (559, 1127), (497, 1136), (707, 1128), (543, 1144), (564, 1125), (550, 1152), (616, 1160), (542, 1124), (564, 1145), (625, 1154), (575, 1131), (588, 1157), (550, 1141)]
         : compromised: 0.5083, honest: 0.4972
         : coarse stats = ['Node 0: acc_rate=0.905', 'Node 1: acc_rate=0.957', 'Node 2: acc_rate=0.946']...
Round 008: test acc mean=0.5368 ± 0.0672 | min=0.4384 max=0.6716
         : test loss mean=0.6860 ± 0.0406
         : individual accs = ['0.571930', '0.490501', '0.624667', '0.471503', '0.658730', '0.486463', '0.499563', '0.544809', '0.438380', '0.599291', '0.492133', '0.501333', '0.480903', '0.518103', '0.482206', '0.671616', '0.629116', '0.509284', '0.584270', '0.482033']
         : correct/total = [(652, 1140), (568, 1158), (704, 1127), (546, 1158), (747, 1134), (557, 1145), (572, 1145), (614, 1127), (498, 1136), (676, 1128), (563, 1144), (564, 1125), (554, 1152), (601, 1160), (542, 1124), (769, 1145), (726, 1154), (576, 1131), (676, 1157), (550, 1141)]
         : compromised: 0.5023, honest: 0.5407
         : coarse stats = ['Node 0: acc_rate=0.896', 'Node 1: acc_rate=0.950', 'Node 2: acc_rate=0.953']...
Round 009: test acc mean=0.6153 ± 0.1002 | min=0.4375 max=0.7619
         : test loss mean=0.6360 ± 0.0644
         : individual accs = ['0.694737', '0.500864', '0.740018', '0.559585', '0.761905', '0.527511', '0.603493', '0.622005', '0.437500', '0.718085', '0.607517', '0.510222', '0.529514', '0.684483', '0.637900', '0.728384', '0.748700', '0.503979', '0.703544', '0.486415']
         : correct/total = [(792, 1140), (580, 1158), (834, 1127), (648, 1158), (864, 1134), (604, 1145), (691, 1145), (701, 1127), (497, 1136), (810, 1128), (695, 1144), (574, 1125), (610, 1152), (794, 1160), (717, 1124), (834, 1145), (864, 1154), (570, 1131), (814, 1157), (555, 1141)]
         : compromised: 0.6060, honest: 0.6164
         : coarse stats = ['Node 0: acc_rate=0.898', 'Node 1: acc_rate=0.944', 'Node 2: acc_rate=0.958']...
Round 010: test acc mean=0.7127 ± 0.1078 | min=0.5031 max=0.8232
         : test loss mean=0.5360 ± 0.1047
         : individual accs = ['0.781579', '0.805699', '0.810115', '0.572539', '0.814815', '0.595633', '0.666376', '0.731145', '0.535211', '0.796099', '0.654720', '0.770667', '0.750000', '0.768103', '0.774911', '0.800873', '0.823224', '0.503095', '0.786517', '0.511832']
         : correct/total = [(891, 1140), (933, 1158), (913, 1127), (663, 1158), (924, 1134), (682, 1145), (763, 1145), (824, 1127), (608, 1136), (898, 1128), (749, 1144), (867, 1125), (864, 1152), (891, 1160), (871, 1124), (917, 1145), (950, 1154), (569, 1131), (910, 1157), (584, 1141)]
         : compromised: 0.6819, honest: 0.7161
         : coarse stats = ['Node 0: acc_rate=0.900', 'Node 1: acc_rate=0.940', 'Node 2: acc_rate=0.963']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: gaussian, 10.0% compromised
Final accuracy - Compromised: 0.6819, Honest: 0.7161
Overall test accuracy: mean=0.7127 ± 0.1078

=== COARSE SUMMARY ===
Node 0: acceptance=0.900
Node 1: acceptance=0.940
Node 2: acceptance=0.963
Node 3: acceptance=0.914
Node 4: acceptance=0.922
Node 5: acceptance=0.910
Node 6: acceptance=0.900
Node 7: acceptance=0.918
Node 8: acceptance=0.829
Node 9: acceptance=0.945
Node 10: acceptance=0.912
Node 11: acceptance=0.900
Node 12: acceptance=0.875
Node 13: acceptance=0.878
Node 14: acceptance=0.879
Node 15: acceptance=0.922
Node 16: acceptance=0.986
Node 17: acceptance=0.925
Node 18: acceptance=0.892
Node 19: acceptance=0.840

Performance Summary:
  - Sketching time: 0.038s (5.0%)
  - Filtering time: 0.008s (1.0%)
  - Aggregation time: 0.718s (94.0%)
  - Total time: 0.764s
  - Mean acceptance rate: 0.907

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
