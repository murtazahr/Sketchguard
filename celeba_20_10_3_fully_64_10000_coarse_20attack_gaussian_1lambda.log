Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: fully, nodes: 20, edges: 190
Attack: Compromised 4/20 nodes: [5, 12, 13, 17]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8427 ± 0.0767
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5131, honest: 0.5172
         : coarse stats = ['Node 0: acc_rate=0.789', 'Node 1: acc_rate=0.789', 'Node 2: acc_rate=0.789']...
Round 002: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.7775 ± 0.0625
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5131, honest: 0.5172
         : coarse stats = ['Node 0: acc_rate=0.789', 'Node 1: acc_rate=0.789', 'Node 2: acc_rate=0.789']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5131, honest: 0.5172
         : coarse stats = ['Node 0: acc_rate=0.860', 'Node 1: acc_rate=0.860', 'Node 2: acc_rate=0.860']...
Round 004: test acc mean=0.4872 ± 0.0174 | min=0.4384 max=0.5217
         : test loss mean=90.6725 ± 44.4749
         : individual accs = ['0.475439', '0.488774', '0.497782', '0.470639', '0.475309', '0.507424', '0.482969', '0.500444', '0.438380', '0.510638', '0.472028', '0.496000', '0.495660', '0.497414', '0.481317', '0.484716', '0.487002', '0.521662', '0.478825', '0.481157']
         : correct/total = [(542, 1140), (566, 1158), (561, 1127), (545, 1158), (539, 1134), (581, 1145), (553, 1145), (564, 1127), (498, 1136), (576, 1128), (540, 1144), (558, 1125), (571, 1152), (577, 1160), (541, 1124), (555, 1145), (562, 1154), (590, 1131), (554, 1157), (549, 1141)]
         : compromised: 0.5055, honest: 0.4826
         : coarse stats = ['Node 0: acc_rate=0.895', 'Node 1: acc_rate=0.895', 'Node 2: acc_rate=0.895']...
Round 005: test acc mean=0.5023 ± 0.0168 | min=0.4722 max=0.5414
         : test loss mean=28.2191 ± 7.1121
         : individual accs = ['0.520175', '0.504318', '0.487134', '0.509499', '0.510582', '0.475109', '0.508297', '0.490683', '0.541373', '0.484043', '0.495629', '0.491556', '0.472222', '0.490517', '0.520463', '0.500437', '0.498267', '0.504863', '0.523768', '0.516214']
         : correct/total = [(593, 1140), (584, 1158), (549, 1127), (590, 1158), (579, 1134), (544, 1145), (582, 1145), (553, 1127), (615, 1136), (546, 1128), (567, 1144), (553, 1125), (544, 1152), (569, 1160), (585, 1124), (573, 1145), (575, 1154), (571, 1131), (606, 1157), (589, 1141)]
         : compromised: 0.4857, honest: 0.5064
         : coarse stats = ['Node 0: acc_rate=0.916', 'Node 1: acc_rate=0.916', 'Node 2: acc_rate=0.916']...
Round 006: test acc mean=0.4929 ± 0.0395 | min=0.4475 max=0.6033
         : test loss mean=4.8280 ± 2.1248
         : individual accs = ['0.472807', '0.502591', '0.488909', '0.449050', '0.496473', '0.571179', '0.455022', '0.506655', '0.490317', '0.479610', '0.474650', '0.453333', '0.603299', '0.528448', '0.447509', '0.500437', '0.448007', '0.517241', '0.467589', '0.503944']
         : correct/total = [(539, 1140), (582, 1158), (551, 1127), (520, 1158), (563, 1134), (654, 1145), (521, 1145), (571, 1127), (557, 1136), (541, 1128), (543, 1144), (510, 1125), (695, 1152), (613, 1160), (503, 1124), (573, 1145), (517, 1154), (585, 1131), (541, 1157), (575, 1141)]
         : compromised: 0.5550, honest: 0.4773
         : coarse stats = ['Node 0: acc_rate=0.904', 'Node 1: acc_rate=0.904', 'Node 2: acc_rate=0.904']...
Round 007: test acc mean=0.6501 ± 0.0217 | min=0.5905 max=0.6863
         : test loss mean=0.6242 ± 0.0174
         : individual accs = ['0.668421', '0.658031', '0.656610', '0.675302', '0.667549', '0.640175', '0.642795', '0.645963', '0.649648', '0.663121', '0.655594', '0.670222', '0.619792', '0.590517', '0.647687', '0.631441', '0.686308', '0.621574', '0.644771', '0.666082']
         : correct/total = [(762, 1140), (762, 1158), (740, 1127), (782, 1158), (757, 1134), (733, 1145), (736, 1145), (728, 1127), (738, 1136), (748, 1128), (750, 1144), (754, 1125), (714, 1152), (685, 1160), (728, 1124), (723, 1145), (792, 1154), (703, 1131), (746, 1157), (760, 1141)]
         : compromised: 0.6180, honest: 0.6581
         : coarse stats = ['Node 0: acc_rate=0.887', 'Node 1: acc_rate=0.887', 'Node 2: acc_rate=0.887']...
Round 008: test acc mean=0.7363 ± 0.0185 | min=0.7064 max=0.7677
         : test loss mean=0.5273 ± 0.0151
         : individual accs = ['0.735088', '0.757340', '0.720497', '0.756477', '0.765432', '0.719651', '0.767686', '0.725821', '0.734155', '0.717199', '0.722902', '0.758222', '0.713542', '0.722414', '0.706406', '0.750218', '0.756499', '0.728559', '0.724287', '0.743208']
         : correct/total = [(838, 1140), (877, 1158), (812, 1127), (876, 1158), (868, 1134), (824, 1145), (879, 1145), (818, 1127), (834, 1136), (809, 1128), (827, 1144), (853, 1125), (822, 1152), (838, 1160), (794, 1124), (859, 1145), (873, 1154), (824, 1131), (838, 1157), (848, 1141)]
         : compromised: 0.7210, honest: 0.7401
         : coarse stats = ['Node 0: acc_rate=0.875', 'Node 1: acc_rate=0.875', 'Node 2: acc_rate=0.875']...
Round 009: test acc mean=0.7869 ± 0.0135 | min=0.7580 max=0.8109
         : test loss mean=0.4550 ± 0.0142
         : individual accs = ['0.792105', '0.810881', '0.787933', '0.791019', '0.796296', '0.791266', '0.804367', '0.779059', '0.788732', '0.757979', '0.794580', '0.802667', '0.788194', '0.775000', '0.759786', '0.790393', '0.797227', '0.784262', '0.771824', '0.774759']
         : correct/total = [(903, 1140), (939, 1158), (888, 1127), (916, 1158), (903, 1134), (906, 1145), (921, 1145), (878, 1127), (896, 1136), (855, 1128), (909, 1144), (903, 1125), (908, 1152), (899, 1160), (854, 1124), (905, 1145), (920, 1154), (887, 1131), (893, 1157), (884, 1141)]
         : compromised: 0.7847, honest: 0.7875
         : coarse stats = ['Node 0: acc_rate=0.865', 'Node 1: acc_rate=0.865', 'Node 2: acc_rate=0.865']...
Round 010: test acc mean=0.8119 ± 0.0109 | min=0.7900 max=0.8316
         : test loss mean=0.4102 ± 0.0143
         : individual accs = ['0.814912', '0.831606', '0.810115', '0.819516', '0.819224', '0.814847', '0.820961', '0.810115', '0.819542', '0.795213', '0.822552', '0.824000', '0.801215', '0.806034', '0.790036', '0.814847', '0.823224', '0.801061', '0.802074', '0.797546']
         : correct/total = [(929, 1140), (963, 1158), (913, 1127), (949, 1158), (929, 1134), (933, 1145), (940, 1145), (913, 1127), (931, 1136), (897, 1128), (941, 1144), (927, 1125), (923, 1152), (935, 1160), (888, 1124), (933, 1145), (950, 1154), (906, 1131), (928, 1157), (910, 1141)]
         : compromised: 0.8058, honest: 0.8135
         : coarse stats = ['Node 0: acc_rate=0.858', 'Node 1: acc_rate=0.858', 'Node 2: acc_rate=0.858']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: fully, Aggregation: coarse
Attack: gaussian, 20.0% compromised
Final accuracy - Compromised: 0.8058, Honest: 0.8135
Overall test accuracy: mean=0.8119 ± 0.0109

=== COARSE SUMMARY ===
Node 0: acceptance=0.858
Node 1: acceptance=0.858
Node 2: acceptance=0.858
Node 3: acceptance=0.858
Node 4: acceptance=0.858
Node 5: acceptance=0.889
Node 6: acceptance=0.858
Node 7: acceptance=0.858
Node 8: acceptance=0.858
Node 9: acceptance=0.858
Node 10: acceptance=0.858
Node 11: acceptance=0.858
Node 12: acceptance=0.889
Node 13: acceptance=0.884
Node 14: acceptance=0.858
Node 15: acceptance=0.858
Node 16: acceptance=0.858
Node 17: acceptance=0.889
Node 18: acceptance=0.858
Node 19: acceptance=0.858

Performance Summary:
  - Sketching time: 0.040s (3.1%)
  - Filtering time: 0.013s (1.0%)
  - Aggregation time: 1.241s (95.9%)
  - Total time: 1.293s
  - Mean acceptance rate: 0.864

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
