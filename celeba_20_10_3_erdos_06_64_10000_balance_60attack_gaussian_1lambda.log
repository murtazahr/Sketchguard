Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 126
Attack: Compromised 12/20 nodes: [1, 2, 3, 5, 8, 11, 12, 13, 14, 15, 17, 18]
Attack type: gaussian, lambda: 1.0
BALANCE algorithm:
  - Model dimension: 30,758 parameters
  - Complexity: O(N×d) = O(20×30,758)
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8460 ± 0.0794
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5167, honest: 0.5158
Round 002: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.7890 ± 0.0634
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5167, honest: 0.5158
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5167, honest: 0.5158
Round 004: test acc mean=0.5018 ± 0.0229 | min=0.4629 max=0.5440
         : test loss mean=410.8230 ± 438.5469
         : individual accs = ['0.503509', '0.471503', '0.488909', '0.526770', '0.522046', '0.462882', '0.462882', '0.502218', '0.544014', '0.476064', '0.522727', '0.493333', '0.477431', '0.524138', '0.524021', '0.499563', '0.505199', '0.488948', '0.522040', '0.517090']
         : correct/total = [(574, 1140), (546, 1158), (551, 1127), (610, 1158), (592, 1134), (530, 1145), (530, 1145), (566, 1127), (618, 1136), (537, 1128), (598, 1144), (555, 1125), (550, 1152), (608, 1160), (589, 1124), (572, 1145), (583, 1154), (553, 1131), (604, 1157), (590, 1141)]
         : compromised: 0.5020, honest: 0.5015
Round 005: test acc mean=0.5007 ± 0.0198 | min=0.4542 max=0.5288
         : test loss mean=201.7735 ± 166.5552
         : individual accs = ['0.507018', '0.523316', '0.506655', '0.506908', '0.522928', '0.514410', '0.512664', '0.528838', '0.454225', '0.465426', '0.525350', '0.498667', '0.512153', '0.502586', '0.482206', '0.495197', '0.483536', '0.489832', '0.476232', '0.505697']
         : correct/total = [(578, 1140), (606, 1158), (571, 1127), (587, 1158), (593, 1134), (589, 1145), (587, 1145), (596, 1127), (516, 1136), (525, 1128), (601, 1144), (561, 1125), (590, 1152), (583, 1160), (542, 1124), (567, 1145), (558, 1154), (554, 1131), (551, 1157), (577, 1141)]
         : compromised: 0.4969, honest: 0.5064
Round 006: test acc mean=0.5025 ± 0.0225 | min=0.4774 max=0.5616
         : test loss mean=247.5704 ± 362.8156
         : individual accs = ['0.508772', '0.487910', '0.511979', '0.489637', '0.480600', '0.481223', '0.539738', '0.497782', '0.561620', '0.486702', '0.488636', '0.537778', '0.477431', '0.493103', '0.517794', '0.519651', '0.485269', '0.508400', '0.479689', '0.496056']
         : correct/total = [(580, 1140), (565, 1158), (577, 1127), (567, 1158), (545, 1134), (551, 1145), (618, 1145), (561, 1127), (638, 1136), (549, 1128), (559, 1144), (605, 1125), (550, 1152), (572, 1160), (582, 1124), (595, 1145), (560, 1154), (575, 1131), (555, 1157), (566, 1141)]
         : compromised: 0.5055, honest: 0.4979
Round 007: test acc mean=0.4976 ± 0.0212 | min=0.4375 max=0.5253
         : test loss mean=6713544.4055 ± 29263657.9528
         : individual accs = ['0.490351', '0.508636', '0.493345', '0.471503', '0.477954', '0.514410', '0.521397', '0.503993', '0.437500', '0.508865', '0.525350', '0.498667', '0.522569', '0.506897', '0.482206', '0.517031', '0.484402', '0.491600', '0.477960', '0.517967']
         : correct/total = [(559, 1140), (589, 1158), (556, 1127), (546, 1158), (542, 1134), (589, 1145), (597, 1145), (568, 1127), (497, 1136), (574, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (542, 1124), (592, 1145), (559, 1154), (556, 1131), (553, 1157), (591, 1141)]
         : compromised: 0.4935, honest: 0.5038
Round 008: test acc mean=0.5019 ± 0.0258 | min=0.4375 max=0.5615
         : test loss mean=0.7588 ± 0.1851
         : individual accs = ['0.471053', '0.508636', '0.493345', '0.471503', '0.477954', '0.514410', '0.521397', '0.496007', '0.437500', '0.508865', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.561525', '0.491600', '0.477960', '0.517967']
         : correct/total = [(537, 1140), (589, 1158), (556, 1127), (546, 1158), (542, 1134), (589, 1145), (597, 1145), (559, 1127), (497, 1136), (574, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (648, 1154), (556, 1131), (553, 1157), (591, 1141)]
         : compromised: 0.4965, honest: 0.5100
Round 009: test acc mean=0.5099 ± 0.0195 | min=0.4780 max=0.5625
         : test loss mean=0.7059 ± 0.0537
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.477954', '0.514410', '0.521397', '0.496894', '0.562500', '0.491135', '0.525350', '0.501333', '0.522569', '0.506897', '0.517794', '0.517031', '0.496534', '0.491600', '0.477960', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (542, 1134), (589, 1145), (597, 1145), (560, 1127), (639, 1136), (554, 1128), (601, 1144), (564, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (573, 1154), (556, 1131), (553, 1157), (591, 1141)]
         : compromised: 0.5119, honest: 0.5070
Round 010: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.6928 ± 0.0009
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.509284', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (576, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5168, honest: 0.5158

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: balance
Attack: gaussian, 60.0% compromised
Final accuracy - Compromised: 0.5168, Honest: 0.5158
Overall test accuracy: mean=0.5164 ± 0.0150

=== BALANCE SUMMARY ===
Node 0: acceptance=0.463
Node 1: acceptance=0.664
Node 2: acceptance=0.625
Node 3: acceptance=0.700
Node 4: acceptance=0.645
Node 5: acceptance=0.573
Node 6: acceptance=0.586
Node 7: acceptance=0.579
Node 8: acceptance=0.550
Node 9: acceptance=0.638
Node 10: acceptance=0.633
Node 11: acceptance=0.614
Node 12: acceptance=0.650
Node 13: acceptance=0.608
Node 14: acceptance=0.600
Node 15: acceptance=0.618
Node 16: acceptance=0.562
Node 17: acceptance=0.756
Node 18: acceptance=0.588
Node 19: acceptance=0.581

Performance Summary:
  - Distance computation time: 1.966s (44.1%)
  - Filtering time: 2.104s (47.2%)
  - Aggregation time: 0.391s (8.8%)
  - Total time: 4.460s
  - Mean acceptance rate: 0.612

BALANCE Algorithm Properties:
  - Model dimension: 30,758
  - No compression: Full parameter comparison
  - Theoretical complexity: O(deg(i)×d)
  - Approach: Full parameter filtering + averaging
