Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: ring, nodes: 20, edges: 20
Attack: Compromised 14/20 nodes: [1, 2, 3, 5, 6, 8, 11, 12, 13, 14, 15, 17, 18, 19]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.529361', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (613, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5172, honest: 0.5145
         : coarse stats = ['Node 0: acc_rate=0.000', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.000']...
Round 002: test acc mean=0.5604 ± 0.1329 | min=0.4711 max=0.9152
         : test loss mean=nan ± nan
         : individual accs = ['0.471053', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.529725', '0.562500', '0.914894', '0.915210', '0.768000', '0.475694', '0.492241', '0.484875', '0.517031', '0.484402', '0.508400', '0.477960', '0.517967']
         : correct/total = [(537, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (597, 1127), (639, 1136), (1032, 1128), (1047, 1144), (864, 1125), (548, 1152), (571, 1160), (545, 1124), (592, 1145), (559, 1154), (575, 1131), (553, 1157), (591, 1141)]
         : compromised: 0.5265, honest: 0.6396
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.250', 'Node 2: acc_rate=0.500']...
Round 003: test acc mean=0.5246 ± 0.0861 | min=0.4829 max=0.8944
         : test loss mean=nan ± nan
         : individual accs = ['0.490351', '0.508636', '0.509317', '0.530225', '0.492063', '0.514410', '0.515284', '0.494232', '0.894366', '0.491135', '0.525350', '0.498667', '0.524306', '0.488793', '0.521352', '0.518777', '0.515598', '0.489832', '0.486603', '0.482910']
         : correct/total = [(559, 1140), (589, 1158), (574, 1127), (614, 1158), (558, 1134), (589, 1145), (590, 1145), (557, 1127), (1016, 1136), (554, 1128), (601, 1144), (561, 1125), (604, 1152), (567, 1160), (586, 1124), (594, 1145), (595, 1154), (554, 1131), (563, 1157), (551, 1141)]
         : compromised: 0.5345, honest: 0.5015
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.667']...
Round 004: test acc mean=0.5034 ± 0.0251 | min=0.4375 max=0.5563
         : test loss mean=4261.6889 ± 7147.5755
         : individual accs = ['0.466667', '0.491364', '0.556344', '0.471503', '0.491182', '0.525764', '0.521397', '0.496007', '0.437500', '0.508865', '0.520979', '0.502222', '0.519097', '0.505172', '0.518683', '0.515284', '0.515598', '0.507515', '0.478825', '0.517967']
         : correct/total = [(532, 1140), (569, 1158), (627, 1127), (546, 1158), (557, 1134), (602, 1145), (597, 1145), (559, 1127), (497, 1136), (574, 1128), (596, 1144), (565, 1125), (598, 1152), (586, 1160), (583, 1124), (590, 1145), (595, 1154), (574, 1131), (554, 1157), (591, 1141)]
         : compromised: 0.5049, honest: 0.4999
         : coarse stats = ['Node 0: acc_rate=0.750', 'Node 1: acc_rate=0.625', 'Node 2: acc_rate=0.750']...
Round 005: test acc mean=0.5049 ± 0.0221 | min=0.4732 max=0.5625
         : test loss mean=61921.2496 ± 102451.8860
         : individual accs = ['0.485965', '0.495682', '0.511979', '0.473230', '0.484127', '0.514410', '0.517031', '0.511091', '0.562500', '0.507092', '0.474650', '0.499556', '0.530382', '0.510345', '0.504448', '0.479476', '0.514731', '0.537577', '0.477096', '0.507450']
         : correct/total = [(554, 1140), (574, 1158), (577, 1127), (548, 1158), (549, 1134), (589, 1145), (592, 1145), (576, 1127), (639, 1136), (572, 1128), (543, 1144), (562, 1125), (611, 1152), (592, 1160), (567, 1124), (549, 1145), (594, 1154), (608, 1131), (552, 1157), (579, 1141)]
         : compromised: 0.5087, honest: 0.4963
         : coarse stats = ['Node 0: acc_rate=0.800', 'Node 1: acc_rate=0.600', 'Node 2: acc_rate=0.800']...
Round 006: test acc mean=0.4970 ± 0.0266 | min=0.4375 max=0.5371
         : test loss mean=2329.7050 ± 3229.2987
         : individual accs = ['0.472807', '0.482729', '0.503106', '0.528497', '0.535273', '0.514410', '0.521397', '0.503993', '0.437500', '0.500887', '0.466783', '0.504889', '0.477431', '0.537069', '0.517794', '0.517031', '0.503466', '0.480106', '0.452031', '0.482033']
         : correct/total = [(539, 1140), (559, 1158), (567, 1127), (612, 1158), (607, 1134), (589, 1145), (597, 1145), (568, 1127), (497, 1136), (565, 1128), (534, 1144), (568, 1125), (550, 1152), (623, 1160), (582, 1124), (592, 1145), (581, 1154), (543, 1131), (523, 1157), (550, 1141)]
         : compromised: 0.4969, honest: 0.4972
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=0.667', 'Node 2: acc_rate=0.833']...
Round 007: test acc mean=0.5080 ± 0.0237 | min=0.4375 max=0.5405
         : test loss mean=66597.2680 ± 80111.2141
         : individual accs = ['0.538596', '0.491364', '0.503106', '0.528497', '0.522046', '0.520524', '0.478603', '0.528838', '0.437500', '0.491135', '0.525350', '0.498667', '0.516493', '0.540517', '0.514235', '0.525764', '0.502600', '0.494253', '0.516854', '0.485539']
         : correct/total = [(614, 1140), (569, 1158), (567, 1127), (612, 1158), (592, 1134), (596, 1145), (548, 1145), (596, 1127), (497, 1136), (554, 1128), (601, 1144), (561, 1125), (595, 1152), (627, 1160), (578, 1124), (602, 1145), (580, 1154), (559, 1131), (598, 1157), (554, 1141)]
         : compromised: 0.5037, honest: 0.5181
         : coarse stats = ['Node 0: acc_rate=0.714', 'Node 1: acc_rate=0.571', 'Node 2: acc_rate=0.714']...
Round 008: test acc mean=0.5067 ± 0.0213 | min=0.4689 max=0.5625
         : test loss mean=79375.5611 ± 221730.0169
         : individual accs = ['0.472807', '0.491364', '0.509317', '0.468912', '0.477954', '0.485590', '0.521397', '0.523514', '0.562500', '0.490248', '0.525350', '0.498667', '0.522569', '0.504310', '0.517794', '0.517031', '0.503466', '0.508400', '0.515990', '0.516214']
         : correct/total = [(539, 1140), (569, 1158), (574, 1127), (543, 1158), (542, 1134), (556, 1145), (597, 1145), (590, 1127), (639, 1136), (553, 1128), (601, 1144), (561, 1125), (602, 1152), (585, 1160), (582, 1124), (592, 1145), (581, 1154), (575, 1131), (597, 1157), (589, 1141)]
         : compromised: 0.5100, honest: 0.4989
         : coarse stats = ['Node 0: acc_rate=0.625', 'Node 1: acc_rate=0.562', 'Node 2: acc_rate=0.625']...
Round 009: test acc mean=0.5122 ± 0.0195 | min=0.4780 max=0.5625
         : test loss mean=22811.2341 ± 32922.6698
         : individual accs = ['0.533333', '0.538860', '0.494232', '0.528497', '0.477954', '0.504803', '0.504803', '0.487134', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.514731', '0.509284', '0.492653', '0.515337']
         : correct/total = [(608, 1140), (624, 1158), (557, 1127), (612, 1158), (542, 1134), (578, 1145), (578, 1145), (549, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (594, 1154), (576, 1131), (570, 1157), (588, 1141)]
         : compromised: 0.5153, honest: 0.5049
         : coarse stats = ['Node 0: acc_rate=0.556', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.556']...
Round 010: test acc mean=0.5101 ± 0.0229 | min=0.4698 max=0.5625
         : test loss mean=6787.7321 ± 17176.5173
         : individual accs = ['0.528070', '0.491364', '0.536823', '0.469775', '0.527337', '0.515284', '0.521397', '0.517303', '0.562500', '0.490248', '0.525350', '0.498667', '0.531250', '0.475000', '0.514235', '0.482969', '0.509532', '0.508400', '0.478825', '0.517967']
         : correct/total = [(602, 1140), (569, 1158), (605, 1127), (544, 1158), (598, 1134), (590, 1145), (597, 1145), (583, 1127), (639, 1136), (553, 1128), (601, 1144), (561, 1125), (612, 1152), (551, 1160), (578, 1124), (553, 1145), (588, 1154), (575, 1131), (554, 1157), (591, 1141)]
         : compromised: 0.5075, honest: 0.5163
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.450', 'Node 2: acc_rate=0.500']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: ring, Aggregation: coarse
Attack: gaussian, 70.0% compromised
Final accuracy - Compromised: 0.5075, Honest: 0.5163
Overall test accuracy: mean=0.5101 ± 0.0229

=== COARSE SUMMARY ===
Node 0: acceptance=0.500
Node 1: acceptance=0.450
Node 2: acceptance=0.500
Node 3: acceptance=0.500
Node 4: acceptance=0.500
Node 5: acceptance=0.450
Node 6: acceptance=0.450
Node 7: acceptance=0.500
Node 8: acceptance=0.350
Node 9: acceptance=0.700
Node 10: acceptance=0.700
Node 11: acceptance=0.600
Node 12: acceptance=0.500
Node 13: acceptance=0.500
Node 14: acceptance=0.500
Node 15: acceptance=0.450
Node 16: acceptance=0.500
Node 17: acceptance=0.450
Node 18: acceptance=0.500
Node 19: acceptance=0.450

Performance Summary:
  - Sketching time: 0.049s (20.7%)
  - Filtering time: 0.003s (1.3%)
  - Aggregation time: 0.185s (78.0%)
  - Total time: 0.237s
  - Mean acceptance rate: 0.502

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
