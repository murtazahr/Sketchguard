Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
Attack: Compromised 8/20 nodes: [1, 5, 11, 12, 13, 14, 17, 18]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8668 ± 0.1225
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522928', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (593, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5124, honest: 0.5191
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=0.833', 'Node 2: acc_rate=0.400']...
Round 002: test acc mean=0.6143 ± 0.1562 | min=0.4911 max=0.9197
         : test loss mean=0.6345 ± 0.2125
         : individual accs = ['0.625439', '0.508636', '0.499556', '0.538860', '0.906526', '0.919651', '0.580786', '0.822538', '0.853873', '0.491135', '0.527972', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.889081', '0.508400', '0.522040', '0.529360']
         : correct/total = [(713, 1140), (589, 1158), (563, 1127), (624, 1158), (1028, 1134), (1053, 1145), (665, 1145), (927, 1127), (970, 1136), (554, 1128), (604, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (1026, 1154), (575, 1131), (604, 1157), (604, 1141)]
         : compromised: 0.5631, honest: 0.6485
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=0.833', 'Node 2: acc_rate=0.400']...
Round 003: test acc mean=0.5282 ± 0.0542 | min=0.4911 max=0.7555
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.755478']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (862, 1141)]
         : compromised: 0.5124, honest: 0.5388
         : coarse stats = ['Node 0: acc_rate=0.889', 'Node 1: acc_rate=0.889', 'Node 2: acc_rate=0.600']...
Round 004: test acc mean=0.4991 ± 0.0218 | min=0.4712 max=0.5599
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.506655', '0.529361', '0.477954', '0.487336', '0.479476', '0.499556', '0.559859', '0.491135', '0.471154', '0.501333', '0.522569', '0.479310', '0.482206', '0.483843', '0.484402', '0.508400', '0.496975', '0.482033']
         : correct/total = [(603, 1140), (589, 1158), (571, 1127), (613, 1158), (542, 1134), (558, 1145), (549, 1145), (563, 1127), (636, 1136), (554, 1128), (539, 1144), (564, 1125), (602, 1152), (556, 1160), (542, 1124), (554, 1145), (559, 1154), (575, 1131), (575, 1157), (550, 1141)]
         : compromised: 0.4983, honest: 0.4995
         : coarse stats = ['Node 0: acc_rate=0.708', 'Node 1: acc_rate=0.708', 'Node 2: acc_rate=0.700']...
Round 005: test acc mean=0.5045 ± 0.0226 | min=0.4711 max=0.5616
         : test loss mean=50048.7865 ± 204541.3576
         : individual accs = ['0.471053', '0.508636', '0.508429', '0.528497', '0.534392', '0.506550', '0.479476', '0.496007', '0.561620', '0.491135', '0.525350', '0.504000', '0.477431', '0.505172', '0.482206', '0.487336', '0.526863', '0.491600', '0.522040', '0.482033']
         : correct/total = [(537, 1140), (589, 1158), (573, 1127), (612, 1158), (606, 1134), (580, 1145), (549, 1145), (559, 1127), (638, 1136), (554, 1128), (601, 1144), (567, 1125), (550, 1152), (586, 1160), (542, 1124), (558, 1145), (608, 1154), (556, 1131), (604, 1157), (550, 1141)]
         : compromised: 0.4997, honest: 0.5077
         : coarse stats = ['Node 0: acc_rate=0.767', 'Node 1: acc_rate=0.767', 'Node 2: acc_rate=0.720']...
Round 006: test acc mean=0.5019 ± 0.0197 | min=0.4711 max=0.5420
         : test loss mean=1218.8598 ± 1904.4563
         : individual accs = ['0.471053', '0.508636', '0.506655', '0.473230', '0.489418', '0.514410', '0.495197', '0.503993', '0.526408', '0.473404', '0.541958', '0.504889', '0.483507', '0.502586', '0.526690', '0.482969', '0.520797', '0.507515', '0.522904', '0.482033']
         : correct/total = [(537, 1140), (589, 1158), (571, 1127), (548, 1158), (555, 1134), (589, 1145), (567, 1145), (568, 1127), (598, 1136), (534, 1128), (620, 1144), (568, 1125), (557, 1152), (583, 1160), (592, 1124), (553, 1145), (601, 1154), (574, 1131), (605, 1157), (550, 1141)]
         : compromised: 0.5089, honest: 0.4973
         : coarse stats = ['Node 0: acc_rate=0.778', 'Node 1: acc_rate=0.806', 'Node 2: acc_rate=0.733']...
Round 007: test acc mean=0.4946 ± 0.0215 | min=0.4715 max=0.5625
         : test loss mean=167849.7865 ± 662728.0188
         : individual accs = ['0.472807', '0.516408', '0.506655', '0.471503', '0.522046', '0.509170', '0.478603', '0.496007', '0.562500', '0.508865', '0.474650', '0.501333', '0.477431', '0.493103', '0.482206', '0.482969', '0.484402', '0.491600', '0.477960', '0.482033']
         : correct/total = [(539, 1140), (598, 1158), (571, 1127), (546, 1158), (592, 1134), (583, 1145), (548, 1145), (559, 1127), (639, 1136), (574, 1128), (543, 1144), (564, 1125), (550, 1152), (572, 1160), (542, 1124), (553, 1145), (559, 1154), (556, 1131), (553, 1157), (550, 1141)]
         : compromised: 0.4937, honest: 0.4953
         : coarse stats = ['Node 0: acc_rate=0.690', 'Node 1: acc_rate=0.690', 'Node 2: acc_rate=0.686']...
Round 008: test acc mean=0.4981 ± 0.0230 | min=0.4401 max=0.5376
         : test loss mean=0.8988 ± 0.2828
         : individual accs = ['0.528947', '0.491364', '0.506655', '0.471503', '0.522046', '0.485590', '0.478603', '0.496007', '0.440141', '0.508865', '0.537587', '0.501333', '0.521701', '0.493103', '0.482206', '0.482969', '0.525997', '0.491600', '0.477960', '0.517090']
         : correct/total = [(603, 1140), (569, 1158), (571, 1127), (546, 1158), (592, 1134), (556, 1145), (548, 1145), (559, 1127), (500, 1136), (574, 1128), (615, 1144), (564, 1125), (601, 1152), (572, 1160), (542, 1124), (553, 1145), (607, 1154), (556, 1131), (553, 1157), (590, 1141)]
         : compromised: 0.4931, honest: 0.5014
         : coarse stats = ['Node 0: acc_rate=0.688', 'Node 1: acc_rate=0.604', 'Node 2: acc_rate=0.650']...
Round 009: test acc mean=0.5003 ± 0.0259 | min=0.4711 max=0.5653
         : test loss mean=1.0740 ± 0.5541
         : individual accs = ['0.471053', '0.491364', '0.506655', '0.471503', '0.565256', '0.485590', '0.478603', '0.496007', '0.558979', '0.508865', '0.474650', '0.501333', '0.510417', '0.493103', '0.500000', '0.482969', '0.540728', '0.491600', '0.494382', '0.482033']
         : correct/total = [(537, 1140), (569, 1158), (571, 1127), (546, 1158), (641, 1134), (556, 1145), (548, 1145), (559, 1127), (635, 1136), (574, 1128), (543, 1144), (564, 1125), (588, 1152), (572, 1160), (562, 1124), (553, 1145), (624, 1154), (556, 1131), (572, 1157), (550, 1141)]
         : compromised: 0.4960, honest: 0.5031
         : coarse stats = ['Node 0: acc_rate=0.685', 'Node 1: acc_rate=0.537', 'Node 2: acc_rate=0.578']...
Round 010: test acc mean=0.5030 ± 0.0266 | min=0.4711 max=0.5623
         : test loss mean=0.8349 ± 0.2016
         : individual accs = ['0.471053', '0.491364', '0.506655', '0.471503', '0.540564', '0.485590', '0.478603', '0.496007', '0.539613', '0.508865', '0.474650', '0.501333', '0.494792', '0.504310', '0.562278', '0.482969', '0.553726', '0.491600', '0.522040', '0.482033']
         : correct/total = [(537, 1140), (569, 1158), (571, 1127), (546, 1158), (613, 1134), (556, 1145), (548, 1145), (559, 1127), (613, 1136), (574, 1128), (543, 1144), (564, 1125), (570, 1152), (585, 1160), (632, 1124), (553, 1145), (639, 1154), (556, 1131), (604, 1157), (550, 1141)]
         : compromised: 0.5067, honest: 0.5005
         : coarse stats = ['Node 0: acc_rate=0.683', 'Node 1: acc_rate=0.533', 'Node 2: acc_rate=0.540']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: gaussian, 40.0% compromised
Final accuracy - Compromised: 0.5067, Honest: 0.5005
Overall test accuracy: mean=0.5030 ± 0.0266

=== COARSE SUMMARY ===
Node 0: acceptance=0.683
Node 1: acceptance=0.533
Node 2: acceptance=0.540
Node 3: acceptance=0.675
Node 4: acceptance=0.550
Node 5: acceptance=0.440
Node 6: acceptance=0.680
Node 7: acceptance=0.580
Node 8: acceptance=0.650
Node 9: acceptance=0.767
Node 10: acceptance=0.625
Node 11: acceptance=0.557
Node 12: acceptance=0.557
Node 13: acceptance=0.650
Node 14: acceptance=0.571
Node 15: acceptance=0.567
Node 16: acceptance=0.500
Node 17: acceptance=0.560
Node 18: acceptance=0.625
Node 19: acceptance=0.550

Performance Summary:
  - Sketching time: 0.042s (12.7%)
  - Filtering time: 0.005s (1.4%)
  - Aggregation time: 0.286s (85.9%)
  - Total time: 0.333s
  - Mean acceptance rate: 0.593

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
