Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: ring, nodes: 20, edges: 20
Attack: Compromised 8/20 nodes: [1, 5, 11, 12, 13, 14, 17, 18]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5165 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.494232', '0.529361', '0.523810', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (557, 1127), (613, 1158), (594, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5124, honest: 0.5193
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=0.500']...
Round 002: test acc mean=0.7826 ± 0.1644 | min=0.5086 max=0.9140
         : test loss mean=41.7467 ± 142.8665
         : individual accs = ['0.914035', '0.508636', '0.905058', '0.903282', '0.894180', '0.514410', '0.906550', '0.894410', '0.563380', '0.618794', '0.869755', '0.768000', '0.516493', '0.509483', '0.901246', '0.912664', '0.913345', '0.846154', '0.879862', '0.912358']
         : correct/total = [(1042, 1140), (589, 1158), (1020, 1127), (1046, 1158), (1014, 1134), (589, 1145), (1038, 1145), (1008, 1127), (640, 1136), (698, 1128), (995, 1144), (864, 1125), (595, 1152), (591, 1160), (1013, 1124), (1045, 1145), (1054, 1154), (957, 1131), (1018, 1157), (1041, 1141)]
         : compromised: 0.6805, honest: 0.8507
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=0.500']...
Round 003: test acc mean=0.5829 ± 0.1325 | min=0.4933 max=0.9136
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.913644', '0.522046', '0.709170', '0.521397', '0.882875', '0.611796', '0.831560', '0.525350', '0.498667', '0.511285', '0.500000', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (1058, 1158), (592, 1134), (812, 1145), (597, 1145), (995, 1127), (695, 1136), (938, 1128), (601, 1144), (561, 1125), (589, 1152), (580, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5345, honest: 0.6151
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=0.667']...
Round 004: test acc mean=0.5491 ± 0.1093 | min=0.4347 max=0.8598
         : test loss mean=1817.9468 ± 2943.5057
         : individual accs = ['0.476316', '0.508636', '0.525288', '0.528497', '0.522046', '0.552838', '0.521397', '0.859805', '0.773768', '0.759752', '0.524476', '0.499556', '0.472222', '0.540517', '0.521352', '0.483843', '0.511265', '0.498674', '0.434745', '0.466258']
         : correct/total = [(543, 1140), (589, 1158), (592, 1127), (612, 1158), (592, 1134), (633, 1145), (597, 1145), (969, 1127), (879, 1136), (857, 1128), (600, 1144), (562, 1125), (544, 1152), (627, 1160), (586, 1124), (554, 1145), (590, 1154), (564, 1131), (503, 1157), (532, 1141)]
         : compromised: 0.5036, honest: 0.5794
         : coarse stats = ['Node 0: acc_rate=0.750', 'Node 1: acc_rate=0.750', 'Node 2: acc_rate=0.750']...
Round 005: test acc mean=0.5570 ± 0.1349 | min=0.4454 max=0.8917
         : test loss mean=1382.9487 ± 2580.4791
         : individual accs = ['0.507895', '0.508636', '0.445430', '0.528497', '0.499118', '0.485590', '0.497817', '0.891748', '0.865317', '0.867908', '0.474650', '0.476444', '0.494792', '0.519828', '0.514235', '0.509170', '0.510399', '0.508400', '0.517718', '0.516214']
         : correct/total = [(579, 1140), (589, 1158), (502, 1127), (612, 1158), (566, 1134), (556, 1145), (570, 1145), (1005, 1127), (983, 1136), (979, 1128), (543, 1144), (536, 1125), (570, 1152), (603, 1160), (578, 1124), (583, 1145), (589, 1154), (575, 1131), (599, 1157), (589, 1141)]
         : compromised: 0.5032, honest: 0.5928
         : coarse stats = ['Node 0: acc_rate=0.800', 'Node 1: acc_rate=0.600', 'Node 2: acc_rate=0.800']...
Round 006: test acc mean=0.5620 ± 0.1442 | min=0.4421 max=0.9095
         : test loss mean=772.8354 ± 812.2463
         : individual accs = ['0.478947', '0.508636', '0.500444', '0.528497', '0.522046', '0.514410', '0.521397', '0.909494', '0.904049', '0.892730', '0.518357', '0.501333', '0.474826', '0.510345', '0.483986', '0.517031', '0.504333', '0.442087', '0.515125', '0.491674']
         : correct/total = [(546, 1140), (589, 1158), (564, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (1025, 1127), (1027, 1136), (1007, 1128), (593, 1144), (564, 1125), (547, 1152), (592, 1160), (544, 1124), (592, 1145), (582, 1154), (500, 1131), (596, 1157), (561, 1141)]
         : compromised: 0.4938, honest: 0.6074
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.833']...
Round 007: test acc mean=0.5541 ± 0.1472 | min=0.4741 max=0.9113
         : test loss mean=26642.2430 ± 102227.1295
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.474093', '0.484127', '0.485590', '0.479476', '0.911269', '0.901408', '0.895390', '0.474650', '0.501333', '0.486111', '0.492241', '0.517794', '0.482969', '0.488735', '0.480106', '0.477960', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (549, 1158), (549, 1134), (556, 1145), (549, 1145), (1027, 1127), (1024, 1136), (1010, 1128), (543, 1144), (564, 1125), (560, 1152), (571, 1160), (582, 1124), (553, 1145), (564, 1154), (543, 1131), (553, 1157), (591, 1141)]
         : compromised: 0.4937, honest: 0.5944
         : coarse stats = ['Node 0: acc_rate=0.786', 'Node 1: acc_rate=0.429', 'Node 2: acc_rate=0.786']...
Round 008: test acc mean=0.5664 ± 0.1434 | min=0.4747 max=0.9130
         : test loss mean=283028.6159 ± 921999.5290
         : individual accs = ['0.529825', '0.508636', '0.493345', '0.506908', '0.519400', '0.514410', '0.488210', '0.913043', '0.899648', '0.906028', '0.474650', '0.501333', '0.477431', '0.515517', '0.517794', '0.516157', '0.515598', '0.505747', '0.503025', '0.520596']
         : correct/total = [(604, 1140), (589, 1158), (556, 1127), (587, 1158), (589, 1134), (589, 1145), (559, 1145), (1029, 1127), (1022, 1136), (1022, 1128), (543, 1144), (564, 1125), (550, 1152), (598, 1160), (582, 1124), (591, 1145), (595, 1154), (572, 1131), (582, 1157), (594, 1141)]
         : compromised: 0.5055, honest: 0.6070
         : coarse stats = ['Node 0: acc_rate=0.750', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.750']...
Round 009: test acc mean=0.5193 ± 0.0885 | min=0.4630 max=0.8979
         : test loss mean=188834.5023 ± 658899.7517
         : individual accs = ['0.528070', '0.508636', '0.493345', '0.520725', '0.462963', '0.485590', '0.484716', '0.503993', '0.897887', '0.491135', '0.467657', '0.501333', '0.496528', '0.493103', '0.497331', '0.517031', '0.487002', '0.508400', '0.522040', '0.517967']
         : correct/total = [(602, 1140), (589, 1158), (556, 1127), (603, 1158), (525, 1134), (556, 1145), (555, 1145), (568, 1127), (1020, 1136), (554, 1128), (535, 1144), (564, 1125), (572, 1152), (572, 1160), (559, 1124), (592, 1145), (562, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5016, honest: 0.5310
         : coarse stats = ['Node 0: acc_rate=0.722', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.722']...
Round 010: test acc mean=0.5362 ± 0.0604 | min=0.4822 max=0.7502
         : test loss mean=11633.4959 ± 34510.8753
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.529361', '0.522046', '0.485590', '0.750218', '0.599823', '0.562500', '0.571809', '0.613636', '0.501333', '0.508681', '0.509483', '0.482206', '0.515284', '0.515598', '0.482759', '0.522040', '0.519720']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (613, 1158), (592, 1134), (556, 1145), (859, 1145), (676, 1127), (639, 1136), (645, 1128), (702, 1144), (564, 1125), (586, 1152), (591, 1160), (542, 1124), (590, 1145), (595, 1154), (546, 1131), (604, 1157), (593, 1141)]
         : compromised: 0.5001, honest: 0.5602
         : coarse stats = ['Node 0: acc_rate=0.700', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.700']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: ring, Aggregation: coarse
Attack: gaussian, 40.0% compromised
Final accuracy - Compromised: 0.5001, Honest: 0.5602
Overall test accuracy: mean=0.5362 ± 0.0604

=== COARSE SUMMARY ===
Node 0: acceptance=0.700
Node 1: acceptance=0.500
Node 2: acceptance=0.700
Node 3: acceptance=0.550
Node 4: acceptance=0.700
Node 5: acceptance=0.400
Node 6: acceptance=0.600
Node 7: acceptance=0.750
Node 8: acceptance=1.000
Node 9: acceptance=0.750
Node 10: acceptance=0.600
Node 11: acceptance=0.550
Node 12: acceptance=0.500
Node 13: acceptance=0.500
Node 14: acceptance=0.600
Node 15: acceptance=0.550
Node 16: acceptance=0.500
Node 17: acceptance=0.550
Node 18: acceptance=0.700
Node 19: acceptance=0.700

Performance Summary:
  - Sketching time: 0.043s (18.3%)
  - Filtering time: 0.003s (1.3%)
  - Aggregation time: 0.188s (80.3%)
  - Total time: 0.234s
  - Mean acceptance rate: 0.620

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
