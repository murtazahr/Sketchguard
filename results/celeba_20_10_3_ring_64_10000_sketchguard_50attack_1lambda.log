Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Projects/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Projects/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 4500 samples per client per epoch
Graph: ring, nodes: 20, edges: 20
Degree statistics: avg=2.00, min=2, max=2
Attack: Compromised 10/20 nodes: [1, 2, 5, 11, 12, 13, 14, 15, 17, 18]
Attack type: directed_deviation, lambda: 1.0
Model variant: baseline
Model parameters: 2,219,692
COARSE Node 0:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 2,219,692 parameters
  - Config: COARSEConfig(gamma=2, kappa=1, alpha=0.5, min_neighbors=1, sketch_size=1000, network_seed=987654321, attack_detection_window=5)
  - Sketch size: 1000
  - Compression ratio: 2219.7x
  - Complexity: O(d + N×k) = O(2,219,692 + 20×1000)
  - Theoretical speedup vs BALANCE: 19.8x
Initial test acc across nodes: mean=0.4978 ± 0.0208
Round 001: test acc mean=0.6019 ± 0.0724 | min=0.4792 max=0.7185
         : test loss mean=551.8159 ± 1214.0964
         : individual accs = ['0.578070', '0.670121', '0.669033', '0.643351', '0.640212', '0.550218', '0.555459', '0.536823', '0.711268', '0.658688', '0.718531', '0.670222', '0.479167', '0.499138', '0.510676', '0.632314', '0.498267', '0.583554', '0.655143', '0.577564']
         : correct/total = [(659, 1140), (776, 1158), (754, 1127), (745, 1158), (726, 1134), (630, 1145), (636, 1145), (605, 1127), (808, 1136), (743, 1128), (822, 1144), (754, 1125), (552, 1152), (579, 1160), (574, 1124), (724, 1145), (575, 1154), (660, 1131), (758, 1157), (659, 1141)]
         : compromised: 0.5920, honest: 0.6118
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.500']...
Round 002: test acc mean=0.6630 ± 0.1005 | min=0.5069 max=0.7727
         : test loss mean=nan ± nan
         : individual accs = ['0.742105', '0.734888', '0.713398', '0.709845', '0.703704', '0.650655', '0.728384', '0.686779', '0.746479', '0.726064', '0.772727', '0.752000', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.743302', '0.760736']
         : correct/total = [(846, 1140), (851, 1158), (804, 1127), (822, 1158), (798, 1134), (745, 1145), (834, 1145), (774, 1127), (848, 1136), (819, 1128), (884, 1144), (846, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (860, 1157), (868, 1141)]
         : compromised: 0.6167, honest: 0.7092
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.500']...
Round 003: test acc mean=0.7204 ± 0.1375 | min=0.5069 max=0.8619
         : test loss mean=nan ± nan
         : individual accs = ['0.835088', '0.816926', '0.794144', '0.785838', '0.794533', '0.730131', '0.799127', '0.777285', '0.802817', '0.837766', '0.861888', '0.855111', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.797753', '0.831727']
         : correct/total = [(952, 1140), (946, 1158), (895, 1127), (910, 1158), (901, 1134), (836, 1145), (915, 1145), (876, 1127), (912, 1136), (945, 1128), (986, 1144), (962, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (923, 1157), (949, 1141)]
         : compromised: 0.6567, honest: 0.7842
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.500']...
Round 004: test acc mean=0.7539 ± 0.1571 | min=0.5069 max=0.8782
         : test loss mean=nan ± nan
         : individual accs = ['0.864912', '0.878238', '0.859805', '0.864421', '0.841270', '0.820961', '0.855022', '0.839397', '0.847711', '0.872340', '0.868007', '0.864000', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.845290', '0.868536']
         : correct/total = [(986, 1140), (1017, 1158), (969, 1127), (1001, 1158), (954, 1134), (940, 1145), (979, 1145), (946, 1127), (963, 1136), (984, 1128), (993, 1144), (972, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (978, 1157), (991, 1141)]
         : compromised: 0.6841, honest: 0.8237
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.500']...
Round 005: test acc mean=0.7568 ± 0.1592 | min=0.5069 max=0.8907
         : test loss mean=nan ± nan
         : individual accs = ['0.838596', '0.855786', '0.863354', '0.883420', '0.865079', '0.848908', '0.869869', '0.866903', '0.833627', '0.851064', '0.890734', '0.884444', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.835782', '0.860649']
         : correct/total = [(956, 1140), (991, 1158), (973, 1127), (1023, 1158), (981, 1134), (972, 1145), (996, 1145), (977, 1127), (947, 1136), (960, 1128), (1019, 1144), (995, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (967, 1157), (982, 1141)]
         : compromised: 0.6861, honest: 0.8276
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.500']...
Round 006: test acc mean=0.7732 ± 0.1693 | min=0.5069 max=0.8907
         : test loss mean=nan ± nan
         : individual accs = ['0.890351', '0.890328', '0.886424', '0.887737', '0.885362', '0.882096', '0.882969', '0.880213', '0.882042', '0.867908', '0.890734', '0.890667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.873812', '0.884312']
         : correct/total = [(1015, 1140), (1031, 1158), (999, 1127), (1028, 1158), (1004, 1134), (1010, 1145), (1011, 1145), (992, 1127), (1002, 1136), (979, 1128), (1019, 1144), (1002, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (1011, 1157), (1009, 1141)]
         : compromised: 0.6996, honest: 0.8467
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.500']...
Round 007: test acc mean=0.7787 ± 0.1729 | min=0.5069 max=0.9031
         : test loss mean=nan ± nan
         : individual accs = ['0.896491', '0.897237', '0.890861', '0.892919', '0.880952', '0.890830', '0.888210', '0.888199', '0.883803', '0.897163', '0.897727', '0.903111', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.881590', '0.896582']
         : correct/total = [(1022, 1140), (1039, 1158), (1004, 1127), (1034, 1158), (999, 1134), (1020, 1145), (1017, 1145), (1001, 1127), (1004, 1136), (1012, 1128), (1027, 1144), (1016, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (1020, 1157), (1023, 1141)]
         : compromised: 0.7036, honest: 0.8538
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.500']...
Round 008: test acc mean=0.7773 ± 0.1721 | min=0.5069 max=0.9093
         : test loss mean=nan ± nan
         : individual accs = ['0.892105', '0.895509', '0.888199', '0.889465', '0.897707', '0.900437', '0.889956', '0.888199', '0.869718', '0.877660', '0.895105', '0.909333', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.878997', '0.886065']
         : correct/total = [(1017, 1140), (1037, 1158), (1001, 1127), (1030, 1158), (1018, 1134), (1031, 1145), (1019, 1145), (1001, 1127), (988, 1136), (990, 1128), (1024, 1144), (1023, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (1017, 1157), (1011, 1141)]
         : compromised: 0.7045, honest: 0.8502
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.500']...
Round 009: test acc mean=0.7817 ± 0.1750 | min=0.5069 max=0.9136
         : test loss mean=nan ± nan
         : individual accs = ['0.901754', '0.888601', '0.895297', '0.913644', '0.901235', '0.903057', '0.896070', '0.901508', '0.882042', '0.891844', '0.897727', '0.905778', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.871219', '0.895706']
         : correct/total = [(1028, 1140), (1029, 1158), (1009, 1127), (1058, 1158), (1022, 1134), (1034, 1145), (1026, 1145), (1016, 1127), (1002, 1136), (1006, 1128), (1027, 1144), (1019, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (1008, 1157), (1022, 1141)]
         : compromised: 0.7037, honest: 0.8597
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.500']...
Round 010: test acc mean=0.7842 ± 0.1766 | min=0.5069 max=0.9102
         : test loss mean=nan ± nan
         : individual accs = ['0.900000', '0.905872', '0.892635', '0.909326', '0.901235', '0.905677', '0.884716', '0.900621', '0.897007', '0.899823', '0.898601', '0.910222', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.888505', '0.901840']
         : correct/total = [(1026, 1140), (1049, 1158), (1006, 1127), (1053, 1158), (1022, 1134), (1037, 1145), (1013, 1145), (1015, 1127), (1019, 1136), (1015, 1128), (1028, 1144), (1024, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (1028, 1157), (1029, 1141)]
         : compromised: 0.7076, honest: 0.8609
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.500']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: ring, Aggregation: sketchguard
Attack: directed_deviation, 50.0% compromised
Final accuracy - Compromised: 0.7076, Honest: 0.8609
Overall test accuracy: mean=0.7842 ± 0.1766

=== COARSE SUMMARY ===
Node 0: acceptance=0.500
Node 1: acceptance=0.500
Node 2: acceptance=0.500
Node 3: acceptance=0.500
Node 4: acceptance=0.500
Node 5: acceptance=0.750
Node 6: acceptance=0.500
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=0.500
Node 11: acceptance=0.500
Node 12: acceptance=0.000
Node 13: acceptance=0.000
Node 14: acceptance=0.000
Node 15: acceptance=0.050
Node 16: acceptance=0.000
Node 17: acceptance=0.050
Node 18: acceptance=0.500
Node 19: acceptance=0.500

=== PARALLEL EXECUTION TIME (realistic for distributed system) ===
  COMMUNICATION (max across nodes):
    - Sketch transfer: 0.000s (0.0%)
    - Model fetch (accepted): 0.000s (0.0%)
  COMPUTATION (max across nodes):
    - Sketching: 0.374s (96.1%)
    - Filtering: 0.001s (0.2%)
    - Aggregation: 0.014s (3.7%)
  TOTALS:
    - Total computation: 0.389s (100.0%)
    - Total communication: 0.000s (0.0%)
    - Total parallel time: 0.389s

=== PER-NODE AVERAGE TIME ===
  - Sketching: 0.229s
  - Filtering: 0.000s
  - Aggregation: 0.006s
  - Sketch transfer: 0.000s
  - Model fetch: 0.000s
  - Total per node: 0.236s

=== TOTAL COMPUTATIONAL WORK (sum across all nodes) ===
  - Total sketching: 4.587s
  - Total filtering: 0.009s
  - Total aggregation: 0.129s
  - Total sketch transfer: 0.000s
  - Total model fetch: 0.000s
  - Grand total: 4.725s
  - Mean acceptance rate: 0.443

COARSE Algorithm Properties:
  - Original dimension: 2,219,692
  - Sketch size: 1000
  - Compression ratio: 19.8x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
