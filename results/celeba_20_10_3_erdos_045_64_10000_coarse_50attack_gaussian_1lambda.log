Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 99
Attack: Compromised 10/20 nodes: [1, 2, 5, 11, 12, 13, 14, 15, 17, 18]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8461 ± 0.0809
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5110, honest: 0.5217
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.500']...
Round 002: test acc mean=0.5165 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.7757 ± 0.0593
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.504880', '0.562500', '0.491135', '0.526224', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.518843']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (569, 1127), (639, 1136), (554, 1128), (602, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (592, 1141)]
         : compromised: 0.5110, honest: 0.5220
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.500']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5110, honest: 0.5217
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.667', 'Node 2: acc_rate=0.667']...
Round 004: test acc mean=0.5111 ± 0.0221 | min=0.4769 max=0.5643
         : test loss mean=23199.4367 ± 73696.8137
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.519400', '0.476856', '0.521397', '0.503993', '0.564261', '0.480496', '0.486888', '0.498667', '0.558160', '0.506897', '0.517794', '0.497817', '0.515598', '0.506631', '0.491789', '0.515337']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (589, 1134), (546, 1145), (597, 1145), (568, 1127), (641, 1136), (542, 1128), (557, 1144), (561, 1125), (643, 1152), (588, 1160), (582, 1124), (570, 1145), (595, 1154), (573, 1131), (569, 1157), (588, 1141)]
         : compromised: 0.5057, honest: 0.5165
         : coarse stats = ['Node 0: acc_rate=0.708', 'Node 1: acc_rate=0.725', 'Node 2: acc_rate=0.750']...
Round 005: test acc mean=0.5088 ± 0.0186 | min=0.4792 max=0.5493
         : test loss mean=2016.4379 ± 3604.7103
         : individual accs = ['0.528947', '0.482729', '0.493345', '0.528497', '0.518519', '0.514410', '0.549345', '0.503993', '0.535211', '0.507979', '0.506993', '0.498667', '0.479167', '0.506897', '0.485765', '0.517031', '0.515598', '0.482759', '0.496111', '0.524102']
         : correct/total = [(603, 1140), (559, 1158), (556, 1127), (612, 1158), (588, 1134), (589, 1145), (629, 1145), (568, 1127), (608, 1136), (573, 1128), (580, 1144), (561, 1125), (552, 1152), (588, 1160), (546, 1124), (592, 1145), (595, 1154), (546, 1131), (574, 1157), (598, 1141)]
         : compromised: 0.4957, honest: 0.5219
         : coarse stats = ['Node 0: acc_rate=0.717', 'Node 1: acc_rate=0.760', 'Node 2: acc_rate=0.775']...
Round 006: test acc mean=0.5148 ± 0.0173 | min=0.4690 max=0.5625
         : test loss mean=45035.5413 ± 192992.3402
         : individual accs = ['0.519298', '0.516408', '0.493345', '0.526770', '0.507937', '0.519651', '0.521397', '0.503993', '0.562500', '0.468972', '0.527098', '0.496889', '0.521701', '0.506897', '0.517794', '0.517031', '0.522530', '0.508400', '0.519447', '0.517967']
         : correct/total = [(592, 1140), (598, 1158), (556, 1127), (610, 1158), (576, 1134), (595, 1145), (597, 1145), (568, 1127), (639, 1136), (529, 1128), (603, 1144), (559, 1125), (601, 1152), (588, 1160), (582, 1124), (592, 1145), (603, 1154), (575, 1131), (601, 1157), (591, 1141)]
         : compromised: 0.5118, honest: 0.5178
         : coarse stats = ['Node 0: acc_rate=0.750', 'Node 1: acc_rate=0.783', 'Node 2: acc_rate=0.812']...
Round 007: test acc mean=0.5139 ± 0.0118 | min=0.4911 max=0.5344
         : test loss mean=2.0121 ± 0.7144
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.534392', '0.514410', '0.521397', '0.503993', '0.500000', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (606, 1134), (589, 1145), (597, 1145), (568, 1127), (568, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5110, honest: 0.5167
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.729', 'Node 2: acc_rate=0.768']...
Round 008: test acc mean=0.5155 ± 0.0152 | min=0.4911 max=0.5634
         : test loss mean=0.8296 ± 0.1187
         : individual accs = ['0.528947', '0.508636', '0.494232', '0.528497', '0.506173', '0.514410', '0.521397', '0.503993', '0.563380', '0.491135', '0.525350', '0.498667', '0.520833', '0.506897', '0.517794', '0.517031', '0.515598', '0.507515', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (557, 1127), (612, 1158), (574, 1134), (589, 1145), (597, 1145), (568, 1127), (640, 1136), (554, 1128), (601, 1144), (561, 1125), (600, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (574, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5108, honest: 0.5202
         : coarse stats = ['Node 0: acc_rate=0.625', 'Node 1: acc_rate=0.700', 'Node 2: acc_rate=0.734']...
Round 009: test acc mean=0.5436 ± 0.0295 | min=0.5069 max=0.6109
         : test loss mean=0.7216 ± 0.0473
         : individual accs = ['0.540351', '0.512090', '0.513753', '0.550950', '0.535273', '0.579039', '0.602620', '0.511979', '0.564261', '0.540780', '0.525350', '0.508444', '0.550347', '0.506897', '0.542705', '0.554585', '0.610919', '0.508400', '0.559205', '0.554777']
         : correct/total = [(616, 1140), (593, 1158), (579, 1127), (638, 1158), (607, 1134), (663, 1145), (690, 1145), (577, 1127), (641, 1136), (610, 1128), (601, 1144), (572, 1125), (634, 1152), (588, 1160), (610, 1124), (635, 1145), (705, 1154), (575, 1131), (647, 1157), (633, 1141)]
         : compromised: 0.5335, honest: 0.5537
         : coarse stats = ['Node 0: acc_rate=0.602', 'Node 1: acc_rate=0.678', 'Node 2: acc_rate=0.708']...
Round 010: test acc mean=0.5590 ± 0.0282 | min=0.5119 max=0.6026
         : test loss mean=0.6971 ± 0.0296
         : individual accs = ['0.537719', '0.518998', '0.530612', '0.597582', '0.530864', '0.602620', '0.583406', '0.548358', '0.571303', '0.546099', '0.531469', '0.594667', '0.602431', '0.555172', '0.548932', '0.544978', '0.596187', '0.511936', '0.561798', '0.564417']
         : correct/total = [(613, 1140), (601, 1158), (598, 1127), (692, 1158), (602, 1134), (690, 1145), (668, 1145), (618, 1127), (649, 1136), (616, 1128), (608, 1144), (669, 1125), (694, 1152), (644, 1160), (617, 1124), (624, 1145), (688, 1154), (579, 1131), (650, 1157), (644, 1141)]
         : compromised: 0.5572, honest: 0.5607
         : coarse stats = ['Node 0: acc_rate=0.592', 'Node 1: acc_rate=0.660', 'Node 2: acc_rate=0.688']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: gaussian, 50.0% compromised
Final accuracy - Compromised: 0.5572, Honest: 0.5607
Overall test accuracy: mean=0.5590 ± 0.0282

=== COARSE SUMMARY ===
Node 0: acceptance=0.592
Node 1: acceptance=0.660
Node 2: acceptance=0.688
Node 3: acceptance=0.686
Node 4: acceptance=0.589
Node 5: acceptance=0.630
Node 6: acceptance=0.575
Node 7: acceptance=0.582
Node 8: acceptance=0.571
Node 9: acceptance=0.664
Node 10: acceptance=0.700
Node 11: acceptance=0.600
Node 12: acceptance=0.617
Node 13: acceptance=0.667
Node 14: acceptance=0.579
Node 15: acceptance=0.622
Node 16: acceptance=0.557
Node 17: acceptance=0.662
Node 18: acceptance=0.608
Node 19: acceptance=0.560

Performance Summary:
  - Sketching time: 0.044s (7.8%)
  - Filtering time: 0.008s (1.3%)
  - Aggregation time: 0.517s (90.9%)
  - Total time: 0.569s
  - Mean acceptance rate: 0.620

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
