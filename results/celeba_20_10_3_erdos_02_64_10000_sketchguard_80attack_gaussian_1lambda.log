Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 4500 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
Degree statistics: avg=4.80, min=2, max=7
Attack: Compromised 16/20 nodes: [1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
Attack type: gaussian, lambda: 1.0
Model variant: baseline
Model parameters: 2,219,692
COARSE Node 0:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 2,219,692 parameters
  - Config: COARSEConfig(gamma=2, kappa=1, alpha=0.5, min_neighbors=1, sketch_size=1000, network_seed=987654321, attack_detection_window=5)
  - Sketch size: 1000
  - Compression ratio: 2219.7x
  - Complexity: O(d + N×k) = O(2,219,692 + 20×1000)
  - Theoretical speedup vs BALANCE: 19.8x
Initial test acc across nodes: mean=0.4978 ± 0.0208
Round 001: test acc mean=0.6120 ± 0.0728 | min=0.4680 max=0.7196
         : test loss mean=23071709.3219 ± 49805626.1787
         : individual accs = ['0.683333', '0.681347', '0.637977', '0.468048', '0.571429', '0.592140', '0.643668', '0.560781', '0.636444', '0.655142', '0.644231', '0.500444', '0.719618', '0.519828', '0.626335', '0.684716', '0.715771', '0.598585', '0.615385', '0.483786']
         : correct/total = [(779, 1140), (789, 1158), (719, 1127), (542, 1158), (648, 1134), (678, 1145), (737, 1145), (632, 1127), (723, 1136), (739, 1128), (737, 1144), (563, 1125), (829, 1152), (603, 1160), (704, 1124), (784, 1145), (826, 1154), (677, 1131), (712, 1157), (552, 1141)]
         : compromised: 0.6067, honest: 0.6328
         : sketchguard stats = ['Node 0: acc_rate=0.167', 'Node 1: acc_rate=0.333', 'Node 2: acc_rate=0.200']...
Round 002: test acc mean=0.6766 ± 0.0857 | min=0.4987 max=0.7686
         : test loss mean=nan ± nan
         : individual accs = ['0.735965', '0.679620', '0.726708', '0.528497', '0.666667', '0.716157', '0.743231', '0.685004', '0.713028', '0.762411', '0.719406', '0.498667', '0.692708', '0.506897', '0.712633', '0.743231', '0.768631', '0.713528', '0.700951', '0.517967']
         : correct/total = [(839, 1140), (787, 1158), (819, 1127), (612, 1158), (756, 1134), (820, 1145), (851, 1145), (772, 1127), (810, 1136), (860, 1128), (823, 1144), (561, 1125), (798, 1152), (588, 1160), (801, 1124), (851, 1145), (887, 1154), (807, 1131), (811, 1157), (591, 1141)]
         : compromised: 0.6672, honest: 0.7141
         : sketchguard stats = ['Node 0: acc_rate=0.167', 'Node 1: acc_rate=0.333', 'Node 2: acc_rate=0.200']...
Round 003: test acc mean=0.7452 ± 0.1198 | min=0.4987 max=0.8421
         : test loss mean=nan ± nan
         : individual accs = ['0.842105', '0.747841', '0.824312', '0.528497', '0.808642', '0.817467', '0.816594', '0.805679', '0.828345', '0.828901', '0.821678', '0.498667', '0.728299', '0.506897', '0.817616', '0.779913', '0.840555', '0.758621', '0.784788', '0.517967']
         : correct/total = [(960, 1140), (866, 1158), (929, 1127), (612, 1158), (917, 1134), (936, 1145), (935, 1145), (908, 1127), (941, 1136), (935, 1128), (940, 1144), (561, 1125), (839, 1152), (588, 1160), (919, 1124), (893, 1145), (970, 1154), (858, 1131), (908, 1157), (591, 1141)]
         : compromised: 0.7254, honest: 0.8242
         : sketchguard stats = ['Node 0: acc_rate=0.167', 'Node 1: acc_rate=0.333', 'Node 2: acc_rate=0.200']...
Round 004: test acc mean=0.7867 ± 0.1384 | min=0.4987 max=0.8812
         : test loss mean=nan ± nan
         : individual accs = ['0.851754', '0.816926', '0.859805', '0.528497', '0.868607', '0.867249', '0.868122', '0.866903', '0.881162', '0.878546', '0.875000', '0.498667', '0.847222', '0.506897', '0.861210', '0.839301', '0.867418', '0.797524', '0.835782', '0.517967']
         : correct/total = [(971, 1140), (946, 1158), (969, 1127), (612, 1158), (985, 1134), (993, 1145), (994, 1145), (977, 1127), (1001, 1136), (991, 1128), (1001, 1144), (561, 1125), (976, 1152), (588, 1160), (968, 1124), (961, 1145), (1001, 1154), (902, 1131), (967, 1157), (591, 1141)]
         : compromised: 0.7675, honest: 0.8637
         : sketchguard stats = ['Node 0: acc_rate=0.167', 'Node 1: acc_rate=0.333', 'Node 2: acc_rate=0.200']...
Round 005: test acc mean=0.7978 ± 0.1432 | min=0.4987 max=0.8927
         : test loss mean=nan ± nan
         : individual accs = ['0.873684', '0.867876', '0.874889', '0.528497', '0.865079', '0.830568', '0.874236', '0.866903', '0.887324', '0.892730', '0.881993', '0.498667', '0.879340', '0.506897', '0.867438', '0.861135', '0.884749', '0.862069', '0.834054', '0.517967']
         : correct/total = [(996, 1140), (1005, 1158), (986, 1127), (612, 1158), (981, 1134), (951, 1145), (1001, 1145), (977, 1127), (1008, 1136), (1007, 1128), (1009, 1144), (561, 1125), (1013, 1152), (588, 1160), (975, 1124), (986, 1145), (1021, 1154), (975, 1131), (965, 1157), (591, 1141)]
         : compromised: 0.7791, honest: 0.8726
         : sketchguard stats = ['Node 0: acc_rate=0.167', 'Node 1: acc_rate=0.333', 'Node 2: acc_rate=0.200']...
Round 006: test acc mean=0.8104 ± 0.1494 | min=0.4987 max=0.9013
         : test loss mean=nan ± nan
         : individual accs = ['0.895614', '0.865285', '0.879326', '0.528497', '0.885362', '0.901310', '0.896070', '0.890861', '0.899648', '0.883865', '0.895105', '0.498667', '0.894097', '0.506897', '0.901246', '0.865502', '0.893414', '0.855880', '0.853068', '0.517967']
         : correct/total = [(1021, 1140), (1002, 1158), (991, 1127), (612, 1158), (1004, 1134), (1032, 1145), (1026, 1145), (1004, 1127), (1022, 1136), (997, 1128), (1024, 1144), (561, 1125), (1030, 1152), (588, 1160), (1013, 1124), (991, 1145), (1031, 1154), (968, 1131), (987, 1157), (591, 1141)]
         : compromised: 0.7902, honest: 0.8913
         : sketchguard stats = ['Node 0: acc_rate=0.167', 'Node 1: acc_rate=0.333', 'Node 2: acc_rate=0.200']...
Round 007: test acc mean=0.8167 ± 0.1524 | min=0.4987 max=0.9086
         : test loss mean=nan ± nan
         : individual accs = ['0.898246', '0.886010', '0.889973', '0.528497', '0.886243', '0.904803', '0.896943', '0.908607', '0.899648', '0.900709', '0.897727', '0.498667', '0.896701', '0.506897', '0.902135', '0.879476', '0.898614', '0.852343', '0.884183', '0.517967']
         : correct/total = [(1024, 1140), (1026, 1158), (1003, 1127), (612, 1158), (1005, 1134), (1036, 1145), (1027, 1145), (1024, 1127), (1022, 1136), (1016, 1128), (1027, 1144), (561, 1125), (1033, 1152), (588, 1160), (1014, 1124), (1007, 1145), (1037, 1154), (964, 1131), (1023, 1157), (591, 1141)]
         : compromised: 0.7964, honest: 0.8979
         : sketchguard stats = ['Node 0: acc_rate=0.167', 'Node 1: acc_rate=0.333', 'Node 2: acc_rate=0.200']...
Round 008: test acc mean=0.8207 ± 0.1541 | min=0.4987 max=0.9118
         : test loss mean=nan ± nan
         : individual accs = ['0.902632', '0.895509', '0.887311', '0.528497', '0.895062', '0.911790', '0.897817', '0.909494', '0.892606', '0.893617', '0.900350', '0.498667', '0.903646', '0.506897', '0.910142', '0.888210', '0.899480', '0.886826', '0.886776', '0.517967']
         : correct/total = [(1029, 1140), (1037, 1158), (1000, 1127), (612, 1158), (1015, 1134), (1044, 1145), (1028, 1145), (1025, 1127), (1014, 1136), (1008, 1128), (1030, 1144), (561, 1125), (1041, 1152), (588, 1160), (1023, 1124), (1017, 1145), (1038, 1154), (1003, 1131), (1026, 1157), (591, 1141)]
         : compromised: 0.8004, honest: 0.9017
         : sketchguard stats = ['Node 0: acc_rate=0.167', 'Node 1: acc_rate=0.292', 'Node 2: acc_rate=0.200']...
Round 009: test acc mean=0.8209 ± 0.1544 | min=0.4987 max=0.9113
         : test loss mean=nan ± nan
         : individual accs = ['0.904386', '0.900691', '0.887311', '0.528497', '0.902116', '0.907424', '0.904803', '0.911269', '0.895246', '0.901596', '0.899476', '0.498667', '0.897569', '0.506897', '0.905694', '0.893450', '0.907279', '0.882405', '0.865169', '0.517967']
         : correct/total = [(1031, 1140), (1043, 1158), (1000, 1127), (612, 1158), (1023, 1134), (1039, 1145), (1036, 1145), (1027, 1127), (1017, 1136), (1017, 1128), (1029, 1144), (561, 1125), (1034, 1152), (588, 1160), (1018, 1124), (1023, 1145), (1047, 1154), (998, 1131), (1001, 1157), (591, 1141)]
         : compromised: 0.7996, honest: 0.9063
         : sketchguard stats = ['Node 0: acc_rate=0.167', 'Node 1: acc_rate=0.278', 'Node 2: acc_rate=0.200']...
Round 010: test acc mean=0.8239 ± 0.1557 | min=0.4987 max=0.9175
         : test loss mean=nan ± nan
         : individual accs = ['0.908772', '0.902418', '0.897072', '0.528497', '0.904762', '0.901310', '0.903930', '0.917480', '0.892606', '0.911348', '0.900350', '0.498667', '0.906250', '0.506897', '0.911032', '0.897817', '0.905546', '0.886826', '0.878133', '0.517967']
         : correct/total = [(1036, 1140), (1045, 1158), (1011, 1127), (612, 1158), (1026, 1134), (1032, 1145), (1035, 1145), (1034, 1127), (1014, 1136), (1028, 1128), (1030, 1144), (561, 1125), (1044, 1152), (588, 1160), (1024, 1124), (1028, 1145), (1045, 1154), (1003, 1131), (1016, 1157), (591, 1141)]
         : compromised: 0.8026, honest: 0.9091
         : sketchguard stats = ['Node 0: acc_rate=0.167', 'Node 1: acc_rate=0.267', 'Node 2: acc_rate=0.200']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: sketchguard
Attack: gaussian, 80.0% compromised
Final accuracy - Compromised: 0.8026, Honest: 0.9091
Overall test accuracy: mean=0.8239 ± 0.1557

=== COARSE SUMMARY ===
Node 0: acceptance=0.167
Node 1: acceptance=0.267
Node 2: acceptance=0.200
Node 3: acceptance=0.000
Node 4: acceptance=0.250
Node 5: acceptance=0.200
Node 6: acceptance=0.200
Node 7: acceptance=0.200
Node 8: acceptance=0.500
Node 9: acceptance=0.333
Node 10: acceptance=0.250
Node 11: acceptance=0.000
Node 12: acceptance=0.329
Node 13: acceptance=0.000
Node 14: acceptance=0.143
Node 15: acceptance=0.167
Node 16: acceptance=0.200
Node 17: acceptance=0.320
Node 18: acceptance=0.250
Node 19: acceptance=0.000

=== PARALLEL EXECUTION TIME (realistic for distributed system) ===
  COMMUNICATION (max across nodes):
    - Sketch transfer: 0.000s (0.0%)
    - Model fetch (accepted): 0.000s (0.0%)
  COMPUTATION (max across nodes):
    - Sketching: 0.267s (95.2%)
    - Filtering: 0.001s (0.3%)
    - Aggregation: 0.013s (4.5%)
  TOTALS:
    - Total computation: 0.281s (100.0%)
    - Total communication: 0.000s (0.0%)
    - Total parallel time: 0.281s

=== PER-NODE AVERAGE TIME ===
  - Sketching: 0.215s
  - Filtering: 0.000s
  - Aggregation: 0.006s
  - Sketch transfer: 0.000s
  - Model fetch: 0.000s
  - Total per node: 0.221s

=== TOTAL COMPUTATIONAL WORK (sum across all nodes) ===
  - Total sketching: 4.303s
  - Total filtering: 0.008s
  - Total aggregation: 0.117s
  - Total sketch transfer: 0.000s
  - Total model fetch: 0.000s
  - Grand total: 4.429s
  - Mean acceptance rate: 0.199

COARSE Algorithm Properties:
  - Original dimension: 2,219,692
  - Sketch size: 1000
  - Compression ratio: 19.8x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
