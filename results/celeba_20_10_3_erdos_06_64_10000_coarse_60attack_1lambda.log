Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 126
Attack: Compromised 12/20 nodes: [1, 2, 3, 5, 8, 11, 12, 13, 14, 15, 17, 18]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=33.3951 ± 25.2924
         : individual accs = ['0.528947', '0.509499', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.514731', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (590, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (594, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5168, honest: 0.5157
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5123 ± 0.0216 | min=0.4552 max=0.5476
         : test loss mean=15.3757 ± 10.3850
         : individual accs = ['0.511404', '0.500000', '0.455191', '0.500864', '0.509700', '0.522271', '0.520524', '0.514641', '0.486796', '0.535461', '0.535839', '0.537778', '0.529514', '0.493103', '0.518683', '0.547598', '0.500000', '0.534925', '0.502161', '0.489921']
         : correct/total = [(583, 1140), (579, 1158), (513, 1127), (580, 1158), (578, 1134), (598, 1145), (596, 1145), (580, 1127), (553, 1136), (604, 1128), (613, 1144), (605, 1125), (610, 1152), (572, 1160), (583, 1124), (627, 1145), (577, 1154), (605, 1131), (581, 1157), (559, 1141)]
         : compromised: 0.5107, honest: 0.5147
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5126 ± 0.0182 | min=0.4786 max=0.5625
         : test loss mean=0.7439 ± 0.0478
         : individual accs = ['0.528947', '0.508636', '0.496007', '0.528497', '0.522046', '0.514410', '0.478603', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.482206', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (559, 1127), (612, 1158), (592, 1134), (589, 1145), (548, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (542, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5140, honest: 0.5105
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.6046 ± 0.0236 | min=0.5595 max=0.6472
         : test loss mean=3.5710 ± 1.2212
         : individual accs = ['0.602632', '0.572539', '0.578527', '0.625216', '0.618166', '0.585153', '0.606987', '0.568767', '0.622359', '0.600177', '0.644231', '0.622222', '0.625868', '0.559483', '0.590747', '0.619214', '0.612652', '0.647215', '0.592913', '0.596845']
         : correct/total = [(687, 1140), (663, 1158), (652, 1127), (724, 1158), (701, 1134), (670, 1145), (695, 1145), (641, 1127), (707, 1136), (677, 1128), (737, 1144), (700, 1125), (721, 1152), (649, 1160), (664, 1124), (709, 1145), (707, 1154), (732, 1131), (686, 1157), (681, 1141)]
         : compromised: 0.6035, honest: 0.6063
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5178 ± 0.0162 | min=0.4911 max=0.5651
         : test loss mean=0.7118 ± 0.0273
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.513537', '0.532751', '0.503993', '0.565141', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.533808', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (588, 1145), (610, 1145), (568, 1127), (642, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (600, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5182, honest: 0.5172
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.6790 ± 0.0279 | min=0.6466 max=0.7728
         : test loss mean=2.9902 ± 0.9115
         : individual accs = ['0.665789', '0.684801', '0.647737', '0.688256', '0.688713', '0.685590', '0.669869', '0.646850', '0.676937', '0.694149', '0.697552', '0.693333', '0.702257', '0.646552', '0.646797', '0.671616', '0.674177', '0.772767', '0.651685', '0.674847']
         : correct/total = [(759, 1140), (793, 1158), (730, 1127), (797, 1158), (781, 1134), (785, 1145), (767, 1145), (729, 1127), (769, 1136), (783, 1128), (798, 1144), (780, 1125), (809, 1152), (750, 1160), (727, 1124), (769, 1145), (778, 1154), (874, 1131), (754, 1157), (770, 1141)]
         : compromised: 0.6807, honest: 0.6765
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.7302 ± 0.0257
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5167, honest: 0.5158
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.7160 ± 0.0279 | min=0.6805 max=0.8134
         : test loss mean=2.2798 ± 0.5705
         : individual accs = ['0.694737', '0.737478', '0.699201', '0.705527', '0.721340', '0.719651', '0.703057', '0.699201', '0.680458', '0.713652', '0.729021', '0.711111', '0.756076', '0.705172', '0.702847', '0.722271', '0.714038', '0.813439', '0.691443', '0.701139']
         : correct/total = [(792, 1140), (854, 1158), (788, 1127), (817, 1158), (818, 1134), (824, 1145), (805, 1145), (788, 1127), (773, 1136), (805, 1128), (834, 1144), (800, 1125), (871, 1152), (818, 1160), (790, 1124), (827, 1145), (824, 1154), (920, 1131), (800, 1157), (800, 1141)]
         : compromised: 0.7204, honest: 0.7095
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.7474 ± 0.0349
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5167, honest: 0.5158
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.7233 ± 0.0280 | min=0.6673 max=0.8028
         : test loss mean=1.9870 ± 0.5016
         : individual accs = ['0.747368', '0.749568', '0.706300', '0.718480', '0.716931', '0.727511', '0.716157', '0.713398', '0.667254', '0.737589', '0.746503', '0.746667', '0.744792', '0.717241', '0.701068', '0.715284', '0.694974', '0.802829', '0.698358', '0.696757']
         : correct/total = [(852, 1140), (868, 1158), (796, 1127), (832, 1158), (813, 1134), (833, 1145), (820, 1145), (804, 1127), (758, 1136), (832, 1128), (854, 1144), (840, 1125), (858, 1152), (832, 1160), (788, 1124), (819, 1145), (802, 1154), (908, 1131), (808, 1157), (795, 1141)]
         : compromised: 0.7246, honest: 0.7212
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: directed_deviation, 60.0% compromised
Final accuracy - Compromised: 0.7246, Honest: 0.7212
Overall test accuracy: mean=0.7233 ± 0.0280

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.050s (5.1%)
  - Filtering time: 0.010s (1.0%)
  - Aggregation time: 0.931s (94.0%)
  - Total time: 0.991s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
