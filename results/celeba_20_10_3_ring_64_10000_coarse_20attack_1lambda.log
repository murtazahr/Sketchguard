Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: ring, nodes: 20, edges: 20
Attack: Compromised 4/20 nodes: [5, 12, 13, 17]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5138 ± 0.0181 | min=0.4696 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.529361', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.469618', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (613, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (541, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.4998, honest: 0.5172
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5249 ± 0.0581 | min=0.4774 max=0.6912
         : test loss mean=10.5201 ± 15.1206
         : individual accs = ['0.530702', '0.683938', '0.691216', '0.528497', '0.485009', '0.526638', '0.502183', '0.503993', '0.563380', '0.491135', '0.525350', '0.501333', '0.477431', '0.493103', '0.482206', '0.517031', '0.487002', '0.508400', '0.480553', '0.517967']
         : correct/total = [(605, 1140), (792, 1158), (779, 1127), (612, 1158), (550, 1134), (603, 1145), (575, 1145), (568, 1127), (640, 1136), (554, 1128), (601, 1144), (564, 1125), (550, 1152), (572, 1160), (542, 1124), (592, 1145), (562, 1154), (575, 1131), (556, 1157), (591, 1141)]
         : compromised: 0.5014, honest: 0.5307
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5506 ± 0.0751 | min=0.4911 max=0.8299
         : test loss mean=0.8296 ± 0.2977
         : individual accs = ['0.647368', '0.829879', '0.527063', '0.528497', '0.522046', '0.567686', '0.521397', '0.503993', '0.569542', '0.491135', '0.525350', '0.502222', '0.522569', '0.525862', '0.521352', '0.517031', '0.515598', '0.633952', '0.521175', '0.517967']
         : correct/total = [(738, 1140), (961, 1158), (594, 1127), (612, 1158), (592, 1134), (650, 1145), (597, 1145), (568, 1127), (647, 1136), (554, 1128), (601, 1144), (565, 1125), (602, 1152), (610, 1160), (586, 1124), (592, 1145), (595, 1154), (717, 1131), (603, 1157), (591, 1141)]
         : compromised: 0.5625, honest: 0.5476
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.6126 ± 0.1432 | min=0.4774 max=0.8707
         : test loss mean=12.1061 ± 23.2935
         : individual accs = ['0.528947', '0.847150', '0.531500', '0.832470', '0.483245', '0.870742', '0.478603', '0.763975', '0.563380', '0.523936', '0.748252', '0.501333', '0.477431', '0.493103', '0.482206', '0.517031', '0.540728', '0.805482', '0.515990', '0.745837']
         : correct/total = [(603, 1140), (981, 1158), (599, 1127), (964, 1158), (548, 1134), (997, 1145), (548, 1145), (861, 1127), (640, 1136), (591, 1128), (856, 1144), (564, 1125), (550, 1152), (572, 1160), (542, 1124), (592, 1145), (624, 1154), (911, 1131), (597, 1157), (851, 1141)]
         : compromised: 0.6617, honest: 0.6003
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.6294 ± 0.1207 | min=0.5078 max=0.8696
         : test loss mean=0.6142 ± 0.1525
         : individual accs = ['0.612281', '0.869603', '0.773736', '0.730570', '0.524691', '0.859389', '0.521397', '0.595386', '0.738556', '0.632979', '0.567308', '0.569778', '0.522569', '0.507759', '0.517794', '0.584279', '0.515598', '0.832891', '0.541919', '0.568799']
         : correct/total = [(698, 1140), (1007, 1158), (872, 1127), (846, 1158), (595, 1134), (984, 1145), (597, 1145), (671, 1127), (839, 1136), (714, 1128), (649, 1144), (641, 1125), (602, 1152), (589, 1160), (582, 1124), (669, 1145), (595, 1154), (942, 1131), (627, 1157), (649, 1141)]
         : compromised: 0.6807, honest: 0.6165
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.7166 ± 0.1448 | min=0.4847 max=0.8891
         : test loss mean=3.1098 ± 5.9574
         : individual accs = ['0.729825', '0.883420', '0.818988', '0.881693', '0.569665', '0.889083', '0.484716', '0.868678', '0.800176', '0.850177', '0.823427', '0.507556', '0.526910', '0.592241', '0.585409', '0.586026', '0.585789', '0.851459', '0.643042', '0.854514']
         : correct/total = [(832, 1140), (1023, 1158), (923, 1127), (1021, 1158), (646, 1134), (1018, 1145), (555, 1145), (979, 1127), (909, 1136), (959, 1128), (942, 1144), (571, 1125), (607, 1152), (687, 1160), (658, 1124), (671, 1145), (676, 1154), (963, 1131), (744, 1157), (975, 1141)]
         : compromised: 0.7149, honest: 0.7171
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.7130 ± 0.1471 | min=0.5060 max=0.9016
         : test loss mean=0.5347 ± 0.2036
         : individual accs = ['0.835965', '0.901554', '0.880213', '0.839378', '0.537919', '0.882096', '0.521397', '0.772848', '0.871479', '0.828014', '0.702797', '0.586667', '0.522569', '0.506034', '0.516904', '0.768559', '0.618718', '0.859416', '0.539326', '0.768624']
         : correct/total = [(953, 1140), (1044, 1158), (992, 1127), (972, 1158), (610, 1134), (1010, 1145), (597, 1145), (871, 1127), (990, 1136), (934, 1128), (804, 1144), (660, 1125), (602, 1152), (587, 1160), (581, 1124), (880, 1145), (714, 1154), (972, 1131), (624, 1157), (877, 1141)]
         : compromised: 0.6925, honest: 0.7181
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.7366 ± 0.1540 | min=0.4900 max=0.9085
         : test loss mean=2.8461 ± 5.6886
         : individual accs = ['0.831579', '0.902418', '0.889973', '0.908463', '0.562610', '0.896070', '0.489956', '0.897072', '0.841549', '0.867908', '0.869755', '0.529778', '0.547743', '0.568103', '0.583630', '0.659389', '0.587522', '0.836428', '0.613656', '0.849255']
         : correct/total = [(948, 1140), (1045, 1158), (1003, 1127), (1052, 1158), (638, 1134), (1026, 1145), (561, 1145), (1011, 1127), (956, 1136), (979, 1128), (995, 1144), (596, 1125), (631, 1152), (659, 1160), (656, 1124), (755, 1145), (678, 1154), (946, 1131), (710, 1157), (969, 1141)]
         : compromised: 0.7121, honest: 0.7428
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.7295 ± 0.1567 | min=0.5069 max=0.9016
         : test loss mean=0.5193 ± 0.2536
         : individual accs = ['0.835088', '0.901554', '0.884650', '0.850604', '0.535273', '0.888210', '0.521397', '0.818988', '0.870599', '0.875000', '0.814685', '0.597333', '0.522569', '0.506897', '0.517794', '0.786900', '0.554593', '0.864721', '0.577355', '0.866784']
         : correct/total = [(952, 1140), (1044, 1158), (997, 1127), (985, 1158), (607, 1134), (1017, 1145), (597, 1145), (923, 1127), (989, 1136), (987, 1128), (932, 1144), (672, 1125), (602, 1152), (588, 1160), (582, 1124), (901, 1145), (640, 1154), (978, 1131), (668, 1157), (989, 1141)]
         : compromised: 0.6956, honest: 0.7380
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.7466 ± 0.1581 | min=0.4961 max=0.9076
         : test loss mean=nan ± nan
         : individual accs = ['0.853509', '0.907599', '0.888199', '0.888601', '0.575838', '0.901310', '0.496070', '0.905058', '0.867958', '0.895390', '0.884615', '0.513778', '0.595486', '0.583621', '0.605872', '0.808734', '0.571924', '0.798408', '0.522040', '0.867660']
         : correct/total = [(973, 1140), (1051, 1158), (1001, 1127), (1029, 1158), (653, 1134), (1032, 1145), (568, 1145), (1020, 1127), (986, 1136), (1010, 1128), (1012, 1144), (578, 1125), (686, 1152), (677, 1160), (681, 1124), (926, 1145), (660, 1154), (903, 1131), (604, 1157), (990, 1141)]
         : compromised: 0.7197, honest: 0.7533
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: ring, Aggregation: coarse
Attack: directed_deviation, 20.0% compromised
Final accuracy - Compromised: 0.7197, Honest: 0.7533
Overall test accuracy: mean=0.7466 ± 0.1581

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.040s (15.3%)
  - Filtering time: 0.003s (1.3%)
  - Aggregation time: 0.216s (83.3%)
  - Total time: 0.259s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
