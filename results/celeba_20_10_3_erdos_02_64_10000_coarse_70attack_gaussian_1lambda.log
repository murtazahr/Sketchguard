Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
Attack: Compromised 14/20 nodes: [1, 2, 3, 5, 6, 8, 11, 12, 13, 14, 15, 17, 18, 19]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522928', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (593, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5172, honest: 0.5147
         : coarse stats = ['Node 0: acc_rate=0.333', 'Node 1: acc_rate=0.333', 'Node 2: acc_rate=0.200']...
Round 002: test acc mean=0.7750 ± 0.1649 | min=0.4987 max=0.9224
         : test loss mean=12.5502 ± 52.8458
         : individual accs = ['0.876316', '0.508636', '0.899734', '0.642487', '0.922399', '0.915284', '0.895197', '0.909494', '0.830106', '0.875887', '0.906469', '0.498667', '0.522569', '0.506897', '0.820285', '0.902183', '0.906412', '0.508400', '0.853068', '0.800175']
         : correct/total = [(999, 1140), (589, 1158), (1014, 1127), (744, 1158), (1046, 1134), (1048, 1145), (1025, 1145), (1025, 1127), (943, 1136), (988, 1128), (1037, 1144), (561, 1125), (602, 1152), (588, 1160), (922, 1124), (1033, 1145), (1046, 1154), (575, 1131), (987, 1157), (913, 1141)]
         : compromised: 0.7217, honest: 0.8995
         : coarse stats = ['Node 0: acc_rate=0.333', 'Node 1: acc_rate=0.333', 'Node 2: acc_rate=0.200']...
Round 003: test acc mean=0.5162 ± 0.0151 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.504310', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (585, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5170, honest: 0.5145
         : coarse stats = ['Node 0: acc_rate=0.556', 'Node 1: acc_rate=0.556', 'Node 2: acc_rate=0.467']...
Round 004: test acc mean=0.5022 ± 0.0206 | min=0.4375 max=0.5371
         : test loss mean=25061.2085 ± 80618.5571
         : individual accs = ['0.530702', '0.507772', '0.491571', '0.516408', '0.521164', '0.537118', '0.503930', '0.491571', '0.437500', '0.491135', '0.490385', '0.503111', '0.492188', '0.511207', '0.516904', '0.498690', '0.484402', '0.496905', '0.522040', '0.498685']
         : correct/total = [(605, 1140), (588, 1158), (554, 1127), (598, 1158), (591, 1134), (615, 1145), (577, 1145), (554, 1127), (497, 1136), (554, 1128), (561, 1144), (566, 1125), (567, 1152), (593, 1160), (581, 1124), (571, 1145), (559, 1154), (562, 1131), (604, 1157), (569, 1141)]
         : compromised: 0.5024, honest: 0.5016
         : coarse stats = ['Node 0: acc_rate=0.625', 'Node 1: acc_rate=0.625', 'Node 2: acc_rate=0.600']...
Round 005: test acc mean=0.5054 ± 0.0246 | min=0.4559 max=0.5625
         : test loss mean=3742.2408 ± 8534.5071
         : individual accs = ['0.524561', '0.491364', '0.469388', '0.503454', '0.487654', '0.511790', '0.455895', '0.488021', '0.562500', '0.548759', '0.524476', '0.496889', '0.525174', '0.508621', '0.516014', '0.486463', '0.515598', '0.489832', '0.512532', '0.488168']
         : correct/total = [(598, 1140), (569, 1158), (529, 1127), (583, 1158), (553, 1134), (586, 1145), (522, 1145), (550, 1127), (639, 1136), (619, 1128), (600, 1144), (559, 1125), (605, 1152), (590, 1160), (580, 1124), (557, 1145), (595, 1154), (554, 1131), (593, 1157), (557, 1141)]
         : compromised: 0.5013, honest: 0.5148
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.700', 'Node 2: acc_rate=0.680']...
Round 006: test acc mean=0.5002 ± 0.0263 | min=0.4375 max=0.5432
         : test loss mean=31596.5062 ± 123567.8319
         : individual accs = ['0.537719', '0.508636', '0.510204', '0.522453', '0.467372', '0.543231', '0.504803', '0.500444', '0.437500', '0.520390', '0.505245', '0.454222', '0.519965', '0.483621', '0.512456', '0.482969', '0.484402', '0.507515', '0.522040', '0.478528']
         : correct/total = [(613, 1140), (589, 1158), (575, 1127), (605, 1158), (530, 1134), (622, 1145), (578, 1145), (564, 1127), (497, 1136), (587, 1128), (578, 1144), (511, 1125), (599, 1152), (561, 1160), (576, 1124), (553, 1145), (559, 1154), (574, 1131), (604, 1157), (546, 1141)]
         : compromised: 0.4992, honest: 0.5026
         : coarse stats = ['Node 0: acc_rate=0.694', 'Node 1: acc_rate=0.722', 'Node 2: acc_rate=0.733']...
Round 007: test acc mean=0.4933 ± 0.0199 | min=0.4375 max=0.5285
         : test loss mean=706837.3979 ± 1933376.3817
         : individual accs = ['0.471053', '0.508636', '0.506655', '0.528497', '0.501764', '0.495197', '0.478603', '0.503993', '0.437500', '0.491135', '0.492133', '0.498667', '0.517361', '0.490517', '0.517794', '0.473362', '0.484402', '0.508400', '0.477960', '0.482033']
         : correct/total = [(537, 1140), (589, 1158), (571, 1127), (612, 1158), (569, 1134), (567, 1145), (548, 1145), (568, 1127), (497, 1136), (554, 1128), (563, 1144), (561, 1125), (596, 1152), (569, 1160), (582, 1124), (542, 1145), (559, 1154), (575, 1131), (553, 1157), (550, 1141)]
         : compromised: 0.4944, honest: 0.4907
         : coarse stats = ['Node 0: acc_rate=0.619', 'Node 1: acc_rate=0.643', 'Node 2: acc_rate=0.657']...
Round 008: test acc mean=0.5006 ± 0.0248 | min=0.4375 max=0.5555
         : test loss mean=nan ± nan
         : individual accs = ['0.485965', '0.508636', '0.478261', '0.528497', '0.522046', '0.485590', '0.476856', '0.498669', '0.437500', '0.486702', '0.474650', '0.498667', '0.522569', '0.514655', '0.488434', '0.517031', '0.555459', '0.496905', '0.517718', '0.516214']
         : correct/total = [(554, 1140), (589, 1158), (539, 1127), (612, 1158), (592, 1134), (556, 1145), (546, 1145), (562, 1127), (497, 1136), (549, 1128), (543, 1144), (561, 1125), (602, 1152), (597, 1160), (549, 1124), (592, 1145), (641, 1154), (562, 1131), (599, 1157), (589, 1141)]
         : compromised: 0.4991, honest: 0.5039
         : coarse stats = ['Node 0: acc_rate=0.583', 'Node 1: acc_rate=0.562', 'Node 2: acc_rate=0.575']...
Round 009: test acc mean=0.5100 ± 0.0251 | min=0.4780 max=0.5833
         : test loss mean=105654.9515 ± 224449.9767
         : individual accs = ['0.583333', '0.508636', '0.506655', '0.529361', '0.477954', '0.504803', '0.545852', '0.503993', '0.501761', '0.491135', '0.517483', '0.498667', '0.522569', '0.507759', '0.496441', '0.493450', '0.547660', '0.503095', '0.477960', '0.482033']
         : correct/total = [(665, 1140), (589, 1158), (571, 1127), (613, 1158), (542, 1134), (578, 1145), (625, 1145), (568, 1127), (570, 1136), (554, 1128), (592, 1144), (561, 1125), (602, 1152), (589, 1160), (558, 1124), (565, 1145), (632, 1154), (569, 1131), (553, 1157), (550, 1141)]
         : compromised: 0.5056, honest: 0.5203
         : coarse stats = ['Node 0: acc_rate=0.556', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.511']...
Round 010: test acc mean=0.5288 ± 0.0350 | min=0.4774 max=0.6205
         : test loss mean=nan ± nan
         : individual accs = ['0.585965', '0.508636', '0.506655', '0.528497', '0.522046', '0.514410', '0.560699', '0.504880', '0.515845', '0.553191', '0.520979', '0.498667', '0.477431', '0.498276', '0.559609', '0.517031', '0.620451', '0.572060', '0.523768', '0.486415']
         : correct/total = [(668, 1140), (589, 1158), (571, 1127), (612, 1158), (592, 1134), (589, 1145), (642, 1145), (569, 1127), (586, 1136), (624, 1128), (596, 1144), (561, 1125), (550, 1152), (578, 1160), (629, 1124), (592, 1145), (716, 1154), (647, 1131), (606, 1157), (555, 1141)]
         : compromised: 0.5191, honest: 0.5513
         : coarse stats = ['Node 0: acc_rate=0.533', 'Node 1: acc_rate=0.450', 'Node 2: acc_rate=0.460']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: gaussian, 70.0% compromised
Final accuracy - Compromised: 0.5191, Honest: 0.5513
Overall test accuracy: mean=0.5288 ± 0.0350

=== COARSE SUMMARY ===
Node 0: acceptance=0.533
Node 1: acceptance=0.450
Node 2: acceptance=0.460
Node 3: acceptance=0.550
Node 4: acceptance=0.425
Node 5: acceptance=0.420
Node 6: acceptance=0.520
Node 7: acceptance=0.440
Node 8: acceptance=0.700
Node 9: acceptance=0.600
Node 10: acceptance=0.425
Node 11: acceptance=0.457
Node 12: acceptance=0.457
Node 13: acceptance=0.500
Node 14: acceptance=0.486
Node 15: acceptance=0.417
Node 16: acceptance=0.520
Node 17: acceptance=0.520
Node 18: acceptance=0.450
Node 19: acceptance=0.500

Performance Summary:
  - Sketching time: 0.049s (15.4%)
  - Filtering time: 0.005s (1.5%)
  - Aggregation time: 0.266s (83.1%)
  - Total time: 0.320s
  - Mean acceptance rate: 0.491

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
