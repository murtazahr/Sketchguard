Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
Attack: Compromised 6/20 nodes: [5, 12, 13, 14, 17, 18]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5085 ± 0.0199 | min=0.4366 max=0.5280
         : test loss mean=nan ± nan
         : individual accs = ['0.523684', '0.508636', '0.496007', '0.512953', '0.485891', '0.514410', '0.527511', '0.503993', '0.436620', '0.491135', '0.527972', '0.515556', '0.522569', '0.506034', '0.517794', '0.517031', '0.515598', '0.507515', '0.522040', '0.517967']
         : correct/total = [(597, 1140), (589, 1158), (559, 1127), (594, 1158), (551, 1134), (589, 1145), (604, 1145), (568, 1127), (496, 1136), (554, 1128), (604, 1144), (580, 1125), (602, 1152), (587, 1160), (582, 1124), (592, 1145), (595, 1154), (574, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5151, honest: 0.5058
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5115 ± 0.0248 | min=0.4569 max=0.5729
         : test loss mean=3.0906 ± 3.1513
         : individual accs = ['0.528947', '0.508636', '0.558119', '0.527634', '0.524691', '0.511790', '0.572926', '0.486247', '0.456866', '0.491135', '0.513112', '0.489778', '0.519965', '0.510345', '0.502669', '0.491703', '0.494801', '0.500442', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (629, 1127), (611, 1158), (595, 1134), (586, 1145), (656, 1145), (548, 1127), (519, 1136), (554, 1128), (587, 1144), (551, 1125), (599, 1152), (592, 1160), (565, 1124), (563, 1145), (571, 1154), (566, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5112, honest: 0.5116
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5176 ± 0.0139 | min=0.4911 max=0.5616
         : test loss mean=1.0684 ± 0.3983
         : individual accs = ['0.528947', '0.508636', '0.519965', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.561620', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (586, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (638, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5154, honest: 0.5186
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5884 ± 0.0562 | min=0.4929 max=0.7254
         : test loss mean=1.3954 ± 0.9527
         : individual accs = ['0.725439', '0.508636', '0.588287', '0.607081', '0.634921', '0.582533', '0.652402', '0.635315', '0.582746', '0.492908', '0.650350', '0.619556', '0.576389', '0.522414', '0.606762', '0.567686', '0.569324', '0.604775', '0.522040', '0.517967']
         : correct/total = [(827, 1140), (589, 1158), (663, 1127), (703, 1158), (720, 1134), (667, 1145), (747, 1145), (716, 1127), (662, 1136), (556, 1128), (744, 1144), (697, 1125), (664, 1152), (606, 1160), (682, 1124), (650, 1145), (657, 1154), (684, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5692, honest: 0.5966
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5392 ± 0.0501 | min=0.4933 max=0.6975
         : test loss mean=1.0402 ± 0.3225
         : individual accs = ['0.528947', '0.632988', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.555851', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.697494', '0.610868']
         : correct/total = [(603, 1140), (733, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (627, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (807, 1157), (697, 1141)]
         : compromised: 0.5446, honest: 0.5369
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.6365 ± 0.0729 | min=0.5086 max=0.7895
         : test loss mean=1.1352 ± 0.6713
         : individual accs = ['0.789474', '0.508636', '0.593611', '0.650259', '0.677249', '0.576419', '0.675109', '0.650399', '0.632923', '0.664007', '0.772727', '0.663111', '0.717014', '0.562931', '0.622776', '0.622707', '0.599653', '0.685234', '0.522040', '0.544259']
         : correct/total = [(900, 1140), (589, 1158), (669, 1127), (753, 1158), (768, 1134), (660, 1145), (773, 1145), (733, 1127), (719, 1136), (749, 1128), (884, 1144), (746, 1125), (826, 1152), (653, 1160), (700, 1124), (713, 1145), (692, 1154), (775, 1131), (604, 1157), (621, 1141)]
         : compromised: 0.6144, honest: 0.6460
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.5739 ± 0.1139 | min=0.4933 max=0.8449
         : test loss mean=1.0026 ± 0.3461
         : individual accs = ['0.528947', '0.804836', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.745567', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.796024', '0.844873']
         : correct/total = [(603, 1140), (932, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (841, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (921, 1157), (964, 1141)]
         : compromised: 0.5610, honest: 0.5795
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.6732 ± 0.0754 | min=0.5086 max=0.7908
         : test loss mean=1.0873 ± 0.7796
         : individual accs = ['0.788596', '0.508636', '0.728483', '0.729706', '0.679012', '0.670742', '0.640175', '0.639752', '0.666373', '0.790780', '0.727273', '0.650667', '0.753472', '0.738793', '0.620107', '0.614847', '0.598787', '0.717949', '0.522040', '0.677476']
         : correct/total = [(899, 1140), (589, 1158), (821, 1127), (845, 1158), (770, 1134), (768, 1145), (733, 1145), (721, 1127), (757, 1136), (892, 1128), (832, 1144), (732, 1125), (868, 1152), (857, 1160), (697, 1124), (704, 1145), (691, 1154), (812, 1131), (604, 1157), (773, 1141)]
         : compromised: 0.6705, honest: 0.6743
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.5860 ± 0.1370 | min=0.4933 max=0.8878
         : test loss mean=1.0445 ± 0.4238
         : individual accs = ['0.528947', '0.837651', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.837766', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.868626', '0.887818']
         : correct/total = [(603, 1140), (970, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (945, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (1005, 1157), (1013, 1141)]
         : compromised: 0.5731, honest: 0.5915
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.7338 ± 0.0927 | min=0.5086 max=0.8549
         : test loss mean=0.8592 ± 0.6453
         : individual accs = ['0.814035', '0.508636', '0.697427', '0.807427', '0.743386', '0.706550', '0.820961', '0.786158', '0.711268', '0.802305', '0.854895', '0.768000', '0.833333', '0.775862', '0.696619', '0.682969', '0.618718', '0.775420', '0.522040', '0.750219']
         : correct/total = [(928, 1140), (589, 1158), (786, 1127), (935, 1158), (843, 1134), (809, 1145), (940, 1145), (886, 1127), (808, 1136), (905, 1128), (978, 1144), (864, 1125), (960, 1152), (900, 1160), (783, 1124), (782, 1145), (714, 1154), (877, 1131), (604, 1157), (856, 1141)]
         : compromised: 0.7183, honest: 0.7405
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: directed_deviation, 30.0% compromised
Final accuracy - Compromised: 0.7183, Honest: 0.7405
Overall test accuracy: mean=0.7338 ± 0.0927

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.042s (9.2%)
  - Filtering time: 0.005s (1.1%)
  - Aggregation time: 0.411s (89.7%)
  - Total time: 0.458s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
