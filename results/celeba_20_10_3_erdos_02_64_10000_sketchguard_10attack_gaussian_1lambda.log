Device: cpu
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 4500 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
Degree statistics: avg=4.80, min=2, max=7
Attack: Compromised 2/20 nodes: [5, 13]
Attack type: gaussian, lambda: 1.0
Model variant: baseline
Model parameters: 2,219,692
COARSE Node 0:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 2,219,692 parameters
  - Config: COARSEConfig(gamma=2, kappa=1, alpha=0.5, min_neighbors=1, sketch_size=1000, network_seed=987654321, attack_detection_window=5)
  - Sketch size: 1000
  - Compression ratio: 2219.7x
  - Complexity: O(d + N×k) = O(2,219,692 + 20×1000)
  - Theoretical speedup vs BALANCE: 19.8x
Initial test acc across nodes: mean=0.4978 ± 0.0207
Round 001: test acc mean=0.6612 ± 0.0505 | min=0.5197 max=0.7208
         : test loss mean=0.6810 ± 0.0036
         : individual accs = ['0.705263', '0.674439', '0.621118', '0.703800', '0.566138', '0.647162', '0.641048', '0.606034', '0.635563', '0.683511', '0.657343', '0.692444', '0.707465', '0.698276', '0.677046', '0.690830', '0.709705', '0.665782', '0.720830', '0.519720']
         : correct/total = [(804, 1140), (781, 1158), (700, 1127), (815, 1158), (642, 1134), (741, 1145), (734, 1145), (683, 1127), (722, 1136), (771, 1128), (752, 1144), (779, 1125), (815, 1152), (810, 1160), (761, 1124), (791, 1145), (819, 1154), (753, 1131), (834, 1157), (593, 1141)]
         : compromised: 0.6727, honest: 0.6599
         : sketchguard stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.6612 ± 0.0484 | min=0.5293 max=0.7280
         : test loss mean=0.6654 ± 0.0129
         : individual accs = ['0.660526', '0.677029', '0.677019', '0.675302', '0.570547', '0.529258', '0.642795', '0.662822', '0.727993', '0.701241', '0.712413', '0.681778', '0.705729', '0.591379', '0.645907', '0.654148', '0.689775', '0.646331', '0.714780', '0.656442']
         : correct/total = [(753, 1140), (784, 1158), (763, 1127), (782, 1158), (647, 1134), (606, 1145), (736, 1145), (747, 1127), (827, 1136), (791, 1128), (815, 1144), (767, 1125), (813, 1152), (686, 1160), (726, 1124), (749, 1145), (796, 1154), (731, 1131), (827, 1157), (749, 1141)]
         : compromised: 0.5603, honest: 0.6724
         : sketchguard stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.6991 ± 0.0521 | min=0.5758 max=0.7808
         : test loss mean=0.6313 ± 0.0317
         : individual accs = ['0.680702', '0.678756', '0.710736', '0.759067', '0.575838', '0.606114', '0.729258', '0.665484', '0.780810', '0.757092', '0.736014', '0.748444', '0.662326', '0.715517', '0.668149', '0.703930', '0.715771', '0.636605', '0.757131', '0.695004']
         : correct/total = [(776, 1140), (786, 1158), (801, 1127), (879, 1158), (653, 1134), (694, 1145), (835, 1145), (750, 1127), (887, 1136), (854, 1128), (842, 1144), (842, 1125), (763, 1152), (830, 1160), (751, 1124), (806, 1145), (826, 1154), (720, 1131), (876, 1157), (793, 1141)]
         : compromised: 0.6608, honest: 0.7034
         : sketchguard stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.7558 ± 0.0388 | min=0.6992 max=0.8310
         : test loss mean=0.5699 ± 0.0481
         : individual accs = ['0.713158', '0.716753', '0.735581', '0.796200', '0.701940', '0.710044', '0.732751', '0.699201', '0.830986', '0.816489', '0.802448', '0.795556', '0.734375', '0.747414', '0.755338', '0.755459', '0.759099', '0.742706', '0.801210', '0.769500']
         : correct/total = [(813, 1140), (830, 1158), (829, 1127), (922, 1158), (796, 1134), (813, 1145), (839, 1145), (788, 1127), (944, 1136), (921, 1128), (918, 1144), (895, 1125), (846, 1152), (867, 1160), (849, 1124), (865, 1145), (876, 1154), (840, 1131), (927, 1157), (878, 1141)]
         : compromised: 0.7287, honest: 0.7588
         : sketchguard stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.7953 ± 0.0375 | min=0.6806 max=0.8582
         : test loss mean=0.4937 ± 0.0490
         : individual accs = ['0.788596', '0.767703', '0.680568', '0.835060', '0.783951', '0.785153', '0.790393', '0.792369', '0.852113', '0.858156', '0.833042', '0.819556', '0.767361', '0.809483', '0.782918', '0.801747', '0.766898', '0.780725', '0.823682', '0.786152']
         : correct/total = [(899, 1140), (889, 1158), (767, 1127), (967, 1158), (889, 1134), (899, 1145), (905, 1145), (893, 1127), (968, 1136), (968, 1128), (953, 1144), (922, 1125), (884, 1152), (939, 1160), (880, 1124), (918, 1145), (885, 1154), (883, 1131), (953, 1157), (897, 1141)]
         : compromised: 0.7973, honest: 0.7951
         : sketchguard stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.8220 ± 0.0238 | min=0.7758 max=0.8644
         : test loss mean=0.4243 ± 0.0332
         : individual accs = ['0.796491', '0.823834', '0.781721', '0.853195', '0.824515', '0.851528', '0.834934', '0.826974', '0.864437', '0.829787', '0.847902', '0.832000', '0.820312', '0.780172', '0.775801', '0.813100', '0.830156', '0.804598', '0.829732', '0.818580']
         : correct/total = [(908, 1140), (954, 1158), (881, 1127), (988, 1158), (935, 1134), (975, 1145), (956, 1145), (932, 1127), (982, 1136), (936, 1128), (970, 1144), (936, 1125), (945, 1152), (905, 1160), (872, 1124), (931, 1145), (958, 1154), (910, 1131), (960, 1157), (934, 1141)]
         : compromised: 0.8159, honest: 0.8227
         : sketchguard stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.8489 ± 0.0157 | min=0.8249 max=0.8786
         : test loss mean=0.3660 ± 0.0229
         : individual accs = ['0.842105', '0.867876', '0.831411', '0.869603', '0.839506', '0.878603', '0.855022', '0.836735', '0.860035', '0.873227', '0.834790', '0.868444', '0.835069', '0.847414', '0.835409', '0.828821', '0.850953', '0.824934', '0.851340', '0.847502']
         : correct/total = [(960, 1140), (1005, 1158), (937, 1127), (1007, 1158), (952, 1134), (1006, 1145), (979, 1145), (943, 1127), (977, 1136), (985, 1128), (955, 1144), (977, 1125), (962, 1152), (983, 1160), (939, 1124), (949, 1145), (982, 1154), (933, 1131), (985, 1157), (967, 1141)]
         : compromised: 0.8630, honest: 0.8474
         : sketchguard stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.8661 ± 0.0100 | min=0.8435 max=0.8861
         : test loss mean=0.3270 ± 0.0147
         : individual accs = ['0.860526', '0.880829', '0.861579', '0.860104', '0.860670', '0.882096', '0.875983', '0.868678', '0.872359', '0.859043', '0.856643', '0.871111', '0.863715', '0.858621', '0.886121', '0.857642', '0.872617', '0.843501', '0.868626', '0.861525']
         : correct/total = [(981, 1140), (1020, 1158), (971, 1127), (996, 1158), (976, 1134), (1010, 1145), (1003, 1145), (979, 1127), (991, 1136), (969, 1128), (980, 1144), (980, 1125), (995, 1152), (996, 1160), (996, 1124), (982, 1145), (1007, 1154), (954, 1131), (1005, 1157), (983, 1141)]
         : compromised: 0.8704, honest: 0.8656
         : sketchguard stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.8717 ± 0.0127 | min=0.8427 max=0.8891
         : test loss mean=0.3074 ± 0.0211
         : individual accs = ['0.881579', '0.888601', '0.845608', '0.878238', '0.867725', '0.889083', '0.880349', '0.866903', '0.885563', '0.882979', '0.871503', '0.876444', '0.872396', '0.864655', '0.870107', '0.859389', '0.878683', '0.855880', '0.842697', '0.875548']
         : correct/total = [(1005, 1140), (1029, 1158), (953, 1127), (1017, 1158), (984, 1134), (1018, 1145), (1008, 1145), (977, 1127), (1006, 1136), (996, 1128), (997, 1144), (986, 1125), (1005, 1152), (1003, 1160), (978, 1124), (984, 1145), (1014, 1154), (968, 1131), (975, 1157), (999, 1141)]
         : compromised: 0.8769, honest: 0.8711
         : sketchguard stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.8816 ± 0.0096 | min=0.8607 max=0.8935
         : test loss mean=0.2866 ± 0.0128
         : individual accs = ['0.892105', '0.888601', '0.860692', '0.881693', '0.884480', '0.891703', '0.877729', '0.877551', '0.893486', '0.890957', '0.870629', '0.888889', '0.875868', '0.891379', '0.891459', '0.866376', '0.883882', '0.878868', '0.866897', '0.878177']
         : correct/total = [(1017, 1140), (1029, 1158), (970, 1127), (1021, 1158), (1003, 1134), (1021, 1145), (1005, 1145), (989, 1127), (1015, 1136), (1005, 1128), (996, 1144), (1000, 1125), (1009, 1152), (1034, 1160), (1002, 1124), (992, 1145), (1020, 1154), (994, 1131), (1003, 1157), (1002, 1141)]
         : compromised: 0.8915, honest: 0.8805
         : sketchguard stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: sketchguard
Attack: gaussian, 10.0% compromised
Final accuracy - Compromised: 0.8915, Honest: 0.8805
Overall test accuracy: mean=0.8816 ± 0.0096

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=0.750
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=0.800
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=0.714
Node 12: acceptance=0.857
Node 13: acceptance=1.000
Node 14: acceptance=0.714
Node 15: acceptance=0.833
Node 16: acceptance=1.000
Node 17: acceptance=0.800
Node 18: acceptance=1.000
Node 19: acceptance=1.000

=== PARALLEL EXECUTION TIME (realistic for distributed system) ===
  COMMUNICATION (max across nodes):
    - Sketch transfer: 0.000s (0.0%)
    - Model fetch (accepted): 0.000s (0.0%)
  COMPUTATION (max across nodes):
    - Sketching: 0.299s (93.7%)
    - Filtering: 0.001s (0.3%)
    - Aggregation: 0.019s (6.0%)
  TOTALS:
    - Total computation: 0.319s (100.0%)
    - Total communication: 0.000s (0.0%)
    - Total parallel time: 0.319s

=== PER-NODE AVERAGE TIME ===
  - Sketching: 0.203s
  - Filtering: 0.001s
  - Aggregation: 0.011s
  - Sketch transfer: 0.000s
  - Model fetch: 0.000s
  - Total per node: 0.215s

=== TOTAL COMPUTATIONAL WORK (sum across all nodes) ===
  - Total sketching: 4.058s
  - Total filtering: 0.011s
  - Total aggregation: 0.222s
  - Total sketch transfer: 0.000s
  - Total model fetch: 0.000s
  - Grand total: 4.291s
  - Mean acceptance rate: 0.923

COARSE Algorithm Properties:
  - Original dimension: 2,219,692
  - Sketch size: 1000
  - Compression ratio: 19.8x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
