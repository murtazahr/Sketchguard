Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 99
Attack: Compromised 6/20 nodes: [5, 12, 13, 14, 17, 18]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8561 ± 0.0826
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5154, honest: 0.5168
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.800', 'Node 2: acc_rate=0.750']...
Round 002: test acc mean=0.5168 ± 0.0147 | min=0.4911 max=0.5625
         : test loss mean=0.7531 ± 0.0572
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.513753', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (579, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5154, honest: 0.5175
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.800', 'Node 2: acc_rate=0.750']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5154, honest: 0.5168
         : coarse stats = ['Node 0: acc_rate=0.778', 'Node 1: acc_rate=0.867', 'Node 2: acc_rate=0.833']...
Round 004: test acc mean=0.5083 ± 0.0155 | min=0.4730 max=0.5289
         : test loss mean=83361.5897 ± 245083.0295
         : individual accs = ['0.528947', '0.501727', '0.493345', '0.488774', '0.522046', '0.508297', '0.516157', '0.500444', '0.526408', '0.514184', '0.520105', '0.499556', '0.482639', '0.493103', '0.524021', '0.524017', '0.512998', '0.473033', '0.518583', '0.517967']
         : correct/total = [(603, 1140), (581, 1158), (556, 1127), (566, 1158), (592, 1134), (582, 1145), (591, 1145), (564, 1127), (598, 1136), (580, 1128), (595, 1144), (562, 1125), (556, 1152), (572, 1160), (589, 1124), (600, 1145), (592, 1154), (535, 1131), (600, 1157), (591, 1141)]
         : compromised: 0.4999, honest: 0.5119
         : coarse stats = ['Node 0: acc_rate=0.792', 'Node 1: acc_rate=0.725', 'Node 2: acc_rate=0.875']...
Round 005: test acc mean=0.4964 ± 0.0235 | min=0.4401 max=0.5423
         : test loss mean=1417.3684 ± 2409.4825
         : individual accs = ['0.473684', '0.508636', '0.496894', '0.537997', '0.542328', '0.485590', '0.479476', '0.496007', '0.440141', '0.508865', '0.478147', '0.501333', '0.526042', '0.510345', '0.483986', '0.483843', '0.484402', '0.491600', '0.477960', '0.520596']
         : correct/total = [(540, 1140), (589, 1158), (560, 1127), (623, 1158), (615, 1134), (556, 1145), (549, 1145), (559, 1127), (500, 1136), (574, 1128), (547, 1144), (564, 1125), (606, 1152), (592, 1160), (544, 1124), (554, 1145), (559, 1154), (556, 1131), (553, 1157), (594, 1141)]
         : compromised: 0.4959, honest: 0.4966
         : coarse stats = ['Node 0: acc_rate=0.767', 'Node 1: acc_rate=0.780', 'Node 2: acc_rate=0.825']...
Round 006: test acc mean=0.4928 ± 0.0208 | min=0.4375 max=0.5390
         : test loss mean=629.8217 ± 1306.3207
         : individual accs = ['0.471053', '0.508636', '0.488909', '0.518135', '0.522046', '0.484716', '0.481223', '0.496007', '0.437500', '0.508865', '0.474650', '0.492444', '0.482639', '0.498276', '0.480427', '0.487336', '0.487868', '0.491600', '0.503889', '0.539001']
         : correct/total = [(537, 1140), (589, 1158), (551, 1127), (600, 1158), (592, 1134), (555, 1145), (551, 1145), (559, 1127), (497, 1136), (574, 1128), (543, 1144), (554, 1125), (556, 1152), (578, 1160), (540, 1124), (558, 1145), (563, 1154), (556, 1131), (583, 1157), (615, 1141)]
         : compromised: 0.4903, honest: 0.4938
         : coarse stats = ['Node 0: acc_rate=0.764', 'Node 1: acc_rate=0.800', 'Node 2: acc_rate=0.854']...
Round 007: test acc mean=0.5039 ± 0.0233 | min=0.4375 max=0.5328
         : test loss mean=13065239.4250 ± 56950052.8688
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.471503', '0.522046', '0.514410', '0.478603', '0.503993', '0.437500', '0.532801', '0.525350', '0.501333', '0.522569', '0.506897', '0.517794', '0.482969', '0.515598', '0.508400', '0.478825', '0.525855']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (546, 1158), (592, 1134), (589, 1145), (548, 1145), (568, 1127), (497, 1136), (601, 1128), (601, 1144), (564, 1125), (602, 1152), (588, 1160), (582, 1124), (553, 1145), (595, 1154), (575, 1131), (554, 1157), (600, 1141)]
         : compromised: 0.5081, honest: 0.5020
         : coarse stats = ['Node 0: acc_rate=0.726', 'Node 1: acc_rate=0.714', 'Node 2: acc_rate=0.768']...
Round 008: test acc mean=0.5127 ± 0.0149 | min=0.4631 max=0.5324
         : test loss mean=1.0870 ± 1.2401
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.502641', '0.508865', '0.525350', '0.463111', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.511052', '0.532411', '0.510079']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (571, 1136), (574, 1128), (601, 1144), (521, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (578, 1131), (616, 1157), (582, 1141)]
         : compromised: 0.5175, honest: 0.5107
         : coarse stats = ['Node 0: acc_rate=0.698', 'Node 1: acc_rate=0.713', 'Node 2: acc_rate=0.734']...
Round 009: test acc mean=0.5164 ± 0.0150 | min=0.4895 max=0.5519
         : test loss mean=0.7582 ± 0.1215
         : individual accs = ['0.529825', '0.508636', '0.492458', '0.529361', '0.522928', '0.514410', '0.522271', '0.503993', '0.551937', '0.491135', '0.489510', '0.504000', '0.522569', '0.528448', '0.528470', '0.517904', '0.515598', '0.508400', '0.526361', '0.520596']
         : correct/total = [(604, 1140), (589, 1158), (555, 1127), (613, 1158), (593, 1134), (589, 1145), (598, 1145), (568, 1127), (627, 1136), (554, 1128), (560, 1144), (567, 1125), (602, 1152), (613, 1160), (594, 1124), (593, 1145), (595, 1154), (575, 1131), (609, 1157), (594, 1141)]
         : compromised: 0.5214, honest: 0.5143
         : coarse stats = ['Node 0: acc_rate=0.676', 'Node 1: acc_rate=0.722', 'Node 2: acc_rate=0.722']...
Round 010: test acc mean=0.5324 ± 0.0198 | min=0.4911 max=0.5651
         : test loss mean=0.7136 ± 0.0697
         : individual accs = ['0.556140', '0.507772', '0.519965', '0.506045', '0.552910', '0.540611', '0.529258', '0.517303', '0.565141', '0.491135', '0.545455', '0.536000', '0.515625', '0.562069', '0.539146', '0.516157', '0.526863', '0.523431', '0.542783', '0.553900']
         : correct/total = [(634, 1140), (588, 1158), (586, 1127), (586, 1158), (627, 1134), (619, 1145), (606, 1145), (583, 1127), (642, 1136), (554, 1128), (624, 1144), (603, 1125), (594, 1152), (652, 1160), (606, 1124), (591, 1145), (608, 1154), (592, 1131), (628, 1157), (632, 1141)]
         : compromised: 0.5373, honest: 0.5303
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.730', 'Node 2: acc_rate=0.713']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: gaussian, 30.0% compromised
Final accuracy - Compromised: 0.5373, Honest: 0.5303
Overall test accuracy: mean=0.5324 ± 0.0198

=== COARSE SUMMARY ===
Node 0: acceptance=0.667
Node 1: acceptance=0.730
Node 2: acceptance=0.713
Node 3: acceptance=0.743
Node 4: acceptance=0.722
Node 5: acceptance=0.740
Node 6: acceptance=0.675
Node 7: acceptance=0.645
Node 8: acceptance=0.571
Node 9: acceptance=0.491
Node 10: acceptance=0.787
Node 11: acceptance=0.667
Node 12: acceptance=0.725
Node 13: acceptance=0.778
Node 14: acceptance=0.657
Node 15: acceptance=0.656
Node 16: acceptance=0.671
Node 17: acceptance=0.762
Node 18: acceptance=0.708
Node 19: acceptance=0.650

Performance Summary:
  - Sketching time: 0.042s (6.9%)
  - Filtering time: 0.008s (1.3%)
  - Aggregation time: 0.562s (91.8%)
  - Total time: 0.612s
  - Mean acceptance rate: 0.688

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
