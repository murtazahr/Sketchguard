Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 4500 samples per client per epoch
Graph: ring, nodes: 20, edges: 20
Degree statistics: avg=2.00, min=2, max=2
Model variant: baseline
Model parameters: 2,219,692
COARSE Node 0:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 2,219,692 parameters
  - Config: COARSEConfig(gamma=2, kappa=1, alpha=0.5, min_neighbors=1, sketch_size=1000, network_seed=987654321, attack_detection_window=5)
  - Sketch size: 1000
  - Compression ratio: 2219.7x
  - Complexity: O(d + N×k) = O(2,219,692 + 20×1000)
  - Theoretical speedup vs BALANCE: 19.8x
Initial test acc across nodes: mean=0.4978 ± 0.0208
Round 001: test acc mean=0.6365 ± 0.0567 | min=0.5368 max=0.7252
         : test loss mean=0.6810 ± 0.0042
         : individual accs = ['0.606140', '0.677029', '0.661934', '0.607945', '0.558201', '0.550218', '0.559825', '0.536823', '0.711268', '0.658688', '0.680070', '0.700444', '0.706597', '0.662069', '0.637011', '0.645415', '0.581456', '0.665782', '0.725151', '0.597721']
         : correct/total = [(691, 1140), (784, 1158), (746, 1127), (704, 1158), (633, 1134), (630, 1145), (641, 1145), (605, 1127), (808, 1136), (743, 1128), (778, 1144), (788, 1125), (814, 1152), (768, 1160), (716, 1124), (739, 1145), (671, 1154), (753, 1131), (839, 1157), (682, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.7003 ± 0.0252 | min=0.6526 max=0.7465
         : test loss mean=0.6375 ± 0.0172
         : individual accs = ['0.692982', '0.680484', '0.691216', '0.681347', '0.652557', '0.695197', '0.684716', '0.664596', '0.746479', '0.701241', '0.725524', '0.743111', '0.725694', '0.692241', '0.725089', '0.695197', '0.674177', '0.699381', '0.736387', '0.698510']
         : correct/total = [(790, 1140), (788, 1158), (779, 1127), (789, 1158), (740, 1134), (796, 1145), (784, 1145), (749, 1127), (848, 1136), (791, 1128), (830, 1144), (836, 1125), (836, 1152), (803, 1160), (815, 1124), (796, 1145), (778, 1154), (791, 1131), (852, 1157), (797, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.7742 ± 0.0256 | min=0.7275 max=0.8260
         : test loss mean=0.5424 ± 0.0381
         : individual accs = ['0.746491', '0.740069', '0.741792', '0.736615', '0.727513', '0.764192', '0.772926', '0.759539', '0.795775', '0.805851', '0.826049', '0.795556', '0.760417', '0.786207', '0.794484', '0.782533', '0.792028', '0.780725', '0.793431', '0.782647']
         : correct/total = [(851, 1140), (857, 1158), (836, 1127), (853, 1158), (825, 1134), (875, 1145), (885, 1145), (856, 1127), (904, 1136), (909, 1128), (945, 1144), (895, 1125), (876, 1152), (912, 1160), (893, 1124), (896, 1145), (914, 1154), (883, 1131), (918, 1157), (893, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.8263 ± 0.0259 | min=0.7613 max=0.8644
         : test loss mean=0.4300 ± 0.0462
         : individual accs = ['0.806140', '0.809154', '0.761313', '0.781520', '0.795414', '0.839301', '0.817467', '0.811890', '0.848592', '0.864362', '0.863636', '0.852444', '0.825521', '0.835345', '0.844306', '0.821834', '0.838821', '0.835544', '0.827139', '0.846626']
         : correct/total = [(919, 1140), (937, 1158), (858, 1127), (905, 1158), (902, 1134), (961, 1145), (936, 1145), (915, 1127), (964, 1136), (975, 1128), (988, 1144), (959, 1125), (951, 1152), (969, 1160), (949, 1124), (941, 1145), (968, 1154), (945, 1131), (957, 1157), (966, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.8433 ± 0.0243 | min=0.7865 max=0.8802
         : test loss mean=0.3739 ± 0.0365
         : individual accs = ['0.814912', '0.856649', '0.805679', '0.831606', '0.818342', '0.817467', '0.863755', '0.850932', '0.833627', '0.838652', '0.880245', '0.872000', '0.861979', '0.865517', '0.861210', '0.848035', '0.870017', '0.840849', '0.786517', '0.848379']
         : correct/total = [(929, 1140), (992, 1158), (908, 1127), (963, 1158), (928, 1134), (936, 1145), (989, 1145), (959, 1127), (947, 1136), (946, 1128), (1007, 1144), (981, 1125), (993, 1152), (1004, 1160), (968, 1124), (971, 1145), (1004, 1154), (951, 1131), (910, 1157), (968, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.8644 ± 0.0135 | min=0.8422 max=0.8960
         : test loss mean=0.3269 ± 0.0227
         : individual accs = ['0.865789', '0.875648', '0.852706', '0.861831', '0.842152', '0.851528', '0.864629', '0.868678', '0.882923', '0.862589', '0.895979', '0.873778', '0.862847', '0.865517', '0.842527', '0.848035', '0.883016', '0.864721', '0.852204', '0.870289']
         : correct/total = [(987, 1140), (1014, 1158), (961, 1127), (998, 1158), (955, 1134), (975, 1145), (990, 1145), (979, 1127), (1003, 1136), (973, 1128), (1025, 1144), (983, 1125), (994, 1152), (1004, 1160), (947, 1124), (971, 1145), (1019, 1154), (978, 1131), (986, 1157), (993, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.8795 ± 0.0105 | min=0.8585 max=0.9030
         : test loss mean=0.2992 ± 0.0195
         : individual accs = ['0.878070', '0.884283', '0.865129', '0.877375', '0.865961', '0.889956', '0.885590', '0.875776', '0.880282', '0.891844', '0.902972', '0.890667', '0.880208', '0.878448', '0.877224', '0.858515', '0.887348', '0.879752', '0.862576', '0.877301']
         : correct/total = [(1001, 1140), (1024, 1158), (975, 1127), (1016, 1158), (982, 1134), (1019, 1145), (1014, 1145), (987, 1127), (1000, 1136), (1006, 1128), (1033, 1144), (1002, 1125), (1014, 1152), (1019, 1160), (986, 1124), (983, 1145), (1024, 1154), (995, 1131), (998, 1157), (1001, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.8789 ± 0.0127 | min=0.8584 max=0.8987
         : test loss mean=0.2926 ± 0.0172
         : individual accs = ['0.884211', '0.892919', '0.868678', '0.858377', '0.858907', '0.898690', '0.884716', '0.878438', '0.868838', '0.866135', '0.891608', '0.895111', '0.886285', '0.882759', '0.898577', '0.862882', '0.878683', '0.875332', '0.864304', '0.882559']
         : correct/total = [(1008, 1140), (1034, 1158), (979, 1127), (994, 1158), (974, 1134), (1029, 1145), (1013, 1145), (990, 1127), (987, 1136), (977, 1128), (1020, 1144), (1007, 1125), (1021, 1152), (1024, 1160), (1010, 1124), (988, 1145), (1014, 1154), (990, 1131), (1000, 1157), (1007, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.8846 ± 0.0138 | min=0.8479 max=0.8996
         : test loss mean=0.2806 ± 0.0227
         : individual accs = ['0.894737', '0.895509', '0.875776', '0.885147', '0.876543', '0.899563', '0.891703', '0.894410', '0.891725', '0.890071', '0.898601', '0.897778', '0.888021', '0.889655', '0.888790', '0.868122', '0.877816', '0.847922', '0.854797', '0.885188']
         : correct/total = [(1020, 1140), (1037, 1158), (987, 1127), (1025, 1158), (994, 1134), (1030, 1145), (1021, 1145), (1008, 1127), (1013, 1136), (1004, 1128), (1028, 1144), (1010, 1125), (1023, 1152), (1032, 1160), (999, 1124), (994, 1145), (1013, 1154), (959, 1131), (989, 1157), (1010, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.8910 ± 0.0094 | min=0.8751 max=0.9065
         : test loss mean=0.2705 ± 0.0162
         : individual accs = ['0.897368', '0.891192', '0.876664', '0.885147', '0.884480', '0.896943', '0.877729', '0.896185', '0.898768', '0.899823', '0.906469', '0.899556', '0.892361', '0.893966', '0.905694', '0.875109', '0.893414', '0.881521', '0.878133', '0.888694']
         : correct/total = [(1023, 1140), (1032, 1158), (988, 1127), (1025, 1158), (1003, 1134), (1027, 1145), (1005, 1145), (1010, 1127), (1021, 1136), (1015, 1128), (1037, 1144), (1012, 1125), (1028, 1152), (1037, 1160), (1018, 1124), (1002, 1145), (1031, 1154), (997, 1131), (1016, 1157), (1014, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: ring, Aggregation: coarse
Overall test accuracy: mean=0.8910 ± 0.0094

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

=== PARALLEL EXECUTION TIME (realistic for distributed system) ===
  COMMUNICATION (max across nodes):
    - Sketch transfer: 0.000s (0.0%)
    - Model fetch (accepted): 0.000s (0.0%)
  COMPUTATION (max across nodes):
    - Sketching: 0.195s (92.9%)
    - Filtering: 0.001s (0.3%)
    - Aggregation: 0.014s (6.7%)
  TOTALS:
    - Total computation: 0.209s (100.0%)
    - Total communication: 0.000s (0.0%)
    - Total parallel time: 0.209s

=== PER-NODE AVERAGE TIME ===
  - Sketching: 0.179s
  - Filtering: 0.000s
  - Aggregation: 0.005s
  - Sketch transfer: 0.000s
  - Model fetch: 0.000s
  - Total per node: 0.185s

=== TOTAL COMPUTATIONAL WORK (sum across all nodes) ===
  - Total sketching: 3.587s
  - Total filtering: 0.006s
  - Total aggregation: 0.097s
  - Total sketch transfer: 0.000s
  - Total model fetch: 0.000s
  - Grand total: 3.690s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 2,219,692
  - Sketch size: 1000
  - Compression ratio: 19.8x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
