Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 99
Attack: Compromised 4/20 nodes: [5, 12, 13, 17]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8501 ± 0.0806
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5131, honest: 0.5172
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=0.800', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5165 ± 0.0149 | min=0.4911 max=0.5625
         : test loss mean=0.7477 ± 0.0643
         : individual accs = ['0.528947', '0.508636', '0.494232', '0.528497', '0.522046', '0.514410', '0.521397', '0.505768', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522904', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (557, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (570, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (605, 1157), (591, 1141)]
         : compromised: 0.5131, honest: 0.5174
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=0.800', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5131, honest: 0.5172
         : coarse stats = ['Node 0: acc_rate=0.889', 'Node 1: acc_rate=0.867', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.4920 ± 0.0198 | min=0.4375 max=0.5285
         : test loss mean=541.2098 ± 587.3313
         : individual accs = ['0.471053', '0.517271', '0.506655', '0.528497', '0.522046', '0.485590', '0.495197', '0.496007', '0.437500', '0.508865', '0.474650', '0.502222', '0.479167', '0.493103', '0.483096', '0.492576', '0.485269', '0.499558', '0.478825', '0.482033']
         : correct/total = [(537, 1140), (599, 1158), (571, 1127), (612, 1158), (592, 1134), (556, 1145), (567, 1145), (559, 1127), (497, 1136), (574, 1128), (543, 1144), (565, 1125), (552, 1152), (572, 1160), (543, 1124), (564, 1145), (560, 1154), (565, 1131), (554, 1157), (550, 1141)]
         : compromised: 0.4894, honest: 0.4926
         : coarse stats = ['Node 0: acc_rate=0.854', 'Node 1: acc_rate=0.875', 'Node 2: acc_rate=0.969']...
Round 005: test acc mean=0.4889 ± 0.0217 | min=0.4278 max=0.5339
         : test loss mean=119.1129 ± 115.6278
         : individual accs = ['0.471930', '0.491364', '0.506655', '0.527634', '0.477072', '0.489956', '0.473362', '0.496007', '0.427817', '0.508865', '0.504371', '0.488000', '0.533854', '0.493103', '0.482206', '0.475109', '0.489601', '0.479222', '0.478825', '0.482910']
         : correct/total = [(538, 1140), (569, 1158), (571, 1127), (611, 1158), (541, 1134), (561, 1145), (542, 1145), (559, 1127), (486, 1136), (574, 1128), (577, 1144), (549, 1125), (615, 1152), (572, 1160), (542, 1124), (544, 1145), (565, 1154), (542, 1131), (554, 1157), (551, 1141)]
         : compromised: 0.4990, honest: 0.4864
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=0.880', 'Node 2: acc_rate=0.825']...
Round 006: test acc mean=0.5450 ± 0.0681 | min=0.5048 max=0.7465
         : test loss mean=96.3310 ± 185.6190
         : individual accs = ['0.559649', '0.505181', '0.736469', '0.521589', '0.534392', '0.504803', '0.529258', '0.522626', '0.585387', '0.746454', '0.519231', '0.523556', '0.521701', '0.505172', '0.517794', '0.514410', '0.513865', '0.508400', '0.512532', '0.517967']
         : correct/total = [(638, 1140), (585, 1158), (830, 1127), (604, 1158), (606, 1134), (578, 1145), (606, 1145), (589, 1127), (665, 1136), (842, 1128), (594, 1144), (589, 1125), (601, 1152), (586, 1160), (582, 1124), (589, 1145), (593, 1154), (575, 1131), (593, 1157), (591, 1141)]
         : compromised: 0.5100, honest: 0.5538
         : coarse stats = ['Node 0: acc_rate=0.806', 'Node 1: acc_rate=0.883', 'Node 2: acc_rate=0.708']...
Round 007: test acc mean=0.5204 ± 0.1140 | min=0.4375 max=0.8626
         : test loss mean=0.8737 ± 0.3048
         : individual accs = ['0.471053', '0.491364', '0.856256', '0.471503', '0.477954', '0.485590', '0.478603', '0.496007', '0.437500', '0.862589', '0.474650', '0.501333', '0.477431', '0.493103', '0.482206', '0.482969', '0.515598', '0.491600', '0.478825', '0.482033']
         : correct/total = [(537, 1140), (569, 1158), (965, 1127), (546, 1158), (542, 1134), (556, 1145), (548, 1145), (559, 1127), (497, 1136), (973, 1128), (543, 1144), (564, 1125), (550, 1152), (572, 1160), (542, 1124), (553, 1145), (595, 1154), (556, 1131), (554, 1157), (550, 1141)]
         : compromised: 0.4869, honest: 0.5288
         : coarse stats = ['Node 0: acc_rate=0.798', 'Node 1: acc_rate=0.857', 'Node 2: acc_rate=0.625']...
Round 008: test acc mean=0.5040 ± 0.0375 | min=0.4711 max=0.6086
         : test loss mean=0.7226 ± 0.0368
         : individual accs = ['0.471053', '0.491364', '0.506655', '0.485320', '0.485009', '0.485590', '0.480349', '0.498669', '0.563380', '0.508865', '0.474650', '0.504000', '0.477431', '0.608621', '0.485765', '0.494323', '0.484402', '0.498674', '0.592913', '0.482033']
         : correct/total = [(537, 1140), (569, 1158), (571, 1127), (562, 1158), (550, 1134), (556, 1145), (550, 1145), (562, 1127), (640, 1136), (574, 1128), (543, 1144), (567, 1125), (550, 1152), (706, 1160), (546, 1124), (566, 1145), (559, 1154), (564, 1131), (686, 1157), (550, 1141)]
         : compromised: 0.5176, honest: 0.5005
         : coarse stats = ['Node 0: acc_rate=0.792', 'Node 1: acc_rate=0.850', 'Node 2: acc_rate=0.656']...
Round 009: test acc mean=0.6024 ± 0.0460 | min=0.5118 max=0.6900
         : test loss mean=0.6607 ± 0.0307
         : individual accs = ['0.554386', '0.561313', '0.591837', '0.671848', '0.600529', '0.511790', '0.689956', '0.570541', '0.589789', '0.584220', '0.604895', '0.629333', '0.574653', '0.678448', '0.570285', '0.641921', '0.594454', '0.572060', '0.671564', '0.583699']
         : correct/total = [(632, 1140), (650, 1158), (667, 1127), (778, 1158), (681, 1134), (586, 1145), (790, 1145), (643, 1127), (670, 1136), (659, 1128), (692, 1144), (708, 1125), (662, 1152), (787, 1160), (641, 1124), (735, 1145), (686, 1154), (647, 1131), (777, 1157), (666, 1141)]
         : compromised: 0.5842, honest: 0.6069
         : coarse stats = ['Node 0: acc_rate=0.796', 'Node 1: acc_rate=0.844', 'Node 2: acc_rate=0.694']...
Round 010: test acc mean=0.6868 ± 0.0425 | min=0.6207 max=0.7435
         : test loss mean=0.5890 ± 0.0445
         : individual accs = ['0.633333', '0.637306', '0.697427', '0.743523', '0.669312', '0.643668', '0.741485', '0.629104', '0.665493', '0.727837', '0.688811', '0.729778', '0.669271', '0.734483', '0.694840', '0.707424', '0.633449', '0.620690', '0.741573', '0.727432']
         : correct/total = [(722, 1140), (738, 1158), (786, 1127), (861, 1158), (759, 1134), (737, 1145), (849, 1145), (709, 1127), (756, 1136), (821, 1128), (788, 1144), (821, 1125), (771, 1152), (852, 1160), (781, 1124), (810, 1145), (731, 1154), (702, 1131), (858, 1157), (830, 1141)]
         : compromised: 0.6670, honest: 0.6918
         : coarse stats = ['Node 0: acc_rate=0.800', 'Node 1: acc_rate=0.840', 'Node 2: acc_rate=0.725']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: gaussian, 20.0% compromised
Final accuracy - Compromised: 0.6670, Honest: 0.6918
Overall test accuracy: mean=0.6868 ± 0.0425

=== COARSE SUMMARY ===
Node 0: acceptance=0.800
Node 1: acceptance=0.840
Node 2: acceptance=0.725
Node 3: acceptance=0.900
Node 4: acceptance=0.867
Node 5: acceptance=0.810
Node 6: acceptance=0.783
Node 7: acceptance=0.827
Node 8: acceptance=0.743
Node 9: acceptance=0.691
Node 10: acceptance=0.850
Node 11: acceptance=0.817
Node 12: acceptance=0.792
Node 13: acceptance=0.689
Node 14: acceptance=0.764
Node 15: acceptance=0.833
Node 16: acceptance=0.829
Node 17: acceptance=0.838
Node 18: acceptance=0.833
Node 19: acceptance=0.730

Performance Summary:
  - Sketching time: 0.039s (5.8%)
  - Filtering time: 0.008s (1.1%)
  - Aggregation time: 0.638s (93.1%)
  - Total time: 0.685s
  - Mean acceptance rate: 0.798

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
