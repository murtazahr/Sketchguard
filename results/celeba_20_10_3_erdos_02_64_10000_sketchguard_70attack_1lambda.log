Device: cpu
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 4500 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
Degree statistics: avg=4.80, min=2, max=7
Attack: Compromised 14/20 nodes: [1, 2, 3, 5, 6, 8, 11, 12, 13, 14, 15, 17, 18, 19]
Attack type: directed_deviation, lambda: 1.0
Model variant: baseline
Model parameters: 2,219,692
COARSE Node 0:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 2,219,692 parameters
  - Config: COARSEConfig(gamma=2, kappa=1, alpha=0.5, min_neighbors=1, sketch_size=1000, network_seed=987654321, attack_detection_window=5)
  - Sketch size: 1000
  - Compression ratio: 2219.7x
  - Complexity: O(d + N×k) = O(2,219,692 + 20×1000)
  - Theoretical speedup vs BALANCE: 19.8x
Initial test acc across nodes: mean=0.4978 ± 0.0207
Round 001: test acc mean=0.6354 ± 0.0589 | min=0.4845 max=0.7196
         : test loss mean=110.7333 ± 479.7298
         : individual accs = ['0.684211', '0.682211', '0.636202', '0.682211', '0.573192', '0.588646', '0.643668', '0.617569', '0.635563', '0.655142', '0.645979', '0.691556', '0.719618', '0.484483', '0.627224', '0.680349', '0.715771', '0.608311', '0.615385', '0.521472']
         : correct/total = [(780, 1140), (790, 1158), (717, 1127), (790, 1158), (650, 1134), (674, 1145), (737, 1145), (696, 1127), (722, 1136), (739, 1128), (739, 1144), (778, 1125), (829, 1152), (562, 1160), (705, 1124), (779, 1145), (826, 1154), (688, 1131), (712, 1157), (595, 1141)]
         : compromised: 0.6298, honest: 0.6486
         : sketchguard stats = ['Node 0: acc_rate=0.333', 'Node 1: acc_rate=0.333', 'Node 2: acc_rate=0.200']...
Round 002: test acc mean=0.7058 ± 0.0563 | min=0.5069 max=0.7574
         : test loss mean=nan ± nan
         : individual accs = ['0.725439', '0.680484', '0.742680', '0.744387', '0.666667', '0.731878', '0.745852', '0.685004', '0.739437', '0.756206', '0.721154', '0.635556', '0.701389', '0.506897', '0.712633', '0.752838', '0.757366', '0.672856', '0.701815', '0.735320']
         : correct/total = [(827, 1140), (788, 1158), (837, 1127), (862, 1158), (756, 1134), (838, 1145), (854, 1145), (772, 1127), (840, 1136), (853, 1128), (825, 1144), (715, 1125), (808, 1152), (588, 1160), (801, 1124), (862, 1145), (874, 1154), (761, 1131), (812, 1157), (839, 1141)]
         : compromised: 0.7003, honest: 0.7186
         : sketchguard stats = ['Node 0: acc_rate=0.333', 'Node 1: acc_rate=0.333', 'Node 2: acc_rate=0.200']...
Round 003: test acc mean=0.7866 ± 0.0768 | min=0.5069 max=0.8440
         : test loss mean=nan ± nan
         : individual accs = ['0.835088', '0.709845', '0.819876', '0.841105', '0.799824', '0.830568', '0.829694', '0.803017', '0.830106', '0.840426', '0.834790', '0.782222', '0.718750', '0.506897', '0.814057', '0.788646', '0.844021', '0.708223', '0.773552', '0.820333']
         : correct/total = [(952, 1140), (822, 1158), (924, 1127), (974, 1158), (907, 1134), (951, 1145), (950, 1145), (905, 1127), (943, 1136), (948, 1128), (955, 1144), (880, 1125), (828, 1152), (588, 1160), (915, 1124), (903, 1145), (974, 1154), (801, 1131), (895, 1157), (936, 1141)]
         : compromised: 0.7696, honest: 0.8262
         : sketchguard stats = ['Node 0: acc_rate=0.333', 'Node 1: acc_rate=0.333', 'Node 2: acc_rate=0.200']...
Round 004: test acc mean=0.8309 ± 0.0796 | min=0.5069 max=0.8776
         : test loss mean=nan ± nan
         : individual accs = ['0.860526', '0.762522', '0.857143', '0.866149', '0.853616', '0.869869', '0.868996', '0.853594', '0.873239', '0.875000', '0.877622', '0.787556', '0.828125', '0.506897', '0.850534', '0.834934', '0.866551', '0.838196', '0.828003', '0.858896']
         : correct/total = [(981, 1140), (883, 1158), (966, 1127), (1003, 1158), (968, 1134), (996, 1145), (995, 1145), (962, 1127), (992, 1136), (987, 1128), (1004, 1144), (886, 1125), (954, 1152), (588, 1160), (956, 1124), (956, 1145), (1000, 1154), (948, 1131), (958, 1157), (980, 1141)]
         : compromised: 0.8165, honest: 0.8645
         : sketchguard stats = ['Node 0: acc_rate=0.333', 'Node 1: acc_rate=0.333', 'Node 2: acc_rate=0.200']...
Round 005: test acc mean=0.8451 ± 0.0798 | min=0.5069 max=0.8886
         : test loss mean=nan ± nan
         : individual accs = ['0.863158', '0.842832', '0.874002', '0.888601', '0.862434', '0.820961', '0.865502', '0.862467', '0.884683', '0.887411', '0.870629', '0.865778', '0.865451', '0.506897', '0.859431', '0.854148', '0.880416', '0.857648', '0.815039', '0.874671']
         : correct/total = [(984, 1140), (976, 1158), (985, 1127), (1029, 1158), (978, 1134), (940, 1145), (991, 1145), (972, 1127), (1005, 1136), (1001, 1128), (996, 1144), (974, 1125), (997, 1152), (588, 1160), (966, 1124), (978, 1145), (1016, 1154), (970, 1131), (943, 1157), (998, 1141)]
         : compromised: 0.8340, honest: 0.8711
         : sketchguard stats = ['Node 0: acc_rate=0.333', 'Node 1: acc_rate=0.333', 'Node 2: acc_rate=0.200']...
Round 006: test acc mean=0.8621 ± 0.0831 | min=0.5069 max=0.9004
         : test loss mean=nan ± nan
         : individual accs = ['0.887719', '0.843696', '0.880213', '0.881693', '0.885362', '0.900437', '0.886463', '0.894410', '0.898768', '0.888298', '0.888986', '0.861333', '0.888021', '0.506897', '0.895018', '0.861135', '0.889948', '0.881521', '0.840104', '0.882559']
         : correct/total = [(1012, 1140), (977, 1158), (992, 1127), (1021, 1158), (1004, 1134), (1031, 1145), (1015, 1145), (1008, 1127), (1021, 1136), (1002, 1128), (1017, 1144), (969, 1125), (1023, 1152), (588, 1160), (1006, 1124), (986, 1145), (1027, 1154), (997, 1131), (972, 1157), (1007, 1141)]
         : compromised: 0.8506, honest: 0.8891
         : sketchguard stats = ['Node 0: acc_rate=0.333', 'Node 1: acc_rate=0.333', 'Node 2: acc_rate=0.200']...
Round 007: test acc mean=0.8728 ± 0.0844 | min=0.5069 max=0.9059
         : test loss mean=nan ± nan
         : individual accs = ['0.895614', '0.889465', '0.884650', '0.905872', '0.879189', '0.902183', '0.894323', '0.903283', '0.895246', '0.899823', '0.894231', '0.880889', '0.894097', '0.506897', '0.899466', '0.874236', '0.895147', '0.887710', '0.879862', '0.893953']
         : correct/total = [(1021, 1140), (1030, 1158), (997, 1127), (1049, 1158), (997, 1134), (1033, 1145), (1024, 1145), (1018, 1127), (1017, 1136), (1015, 1128), (1023, 1144), (991, 1125), (1030, 1152), (588, 1160), (1011, 1124), (1001, 1145), (1033, 1154), (1004, 1131), (1018, 1157), (1020, 1141)]
         : compromised: 0.8635, honest: 0.8945
         : sketchguard stats = ['Node 0: acc_rate=0.333', 'Node 1: acc_rate=0.310', 'Node 2: acc_rate=0.200']...
Round 008: test acc mean=0.8764 ± 0.0852 | min=0.5069 max=0.9101
         : test loss mean=nan ± nan
         : individual accs = ['0.900877', '0.892055', '0.890861', '0.901554', '0.895062', '0.908297', '0.892576', '0.908607', '0.892606', '0.893617', '0.901224', '0.892444', '0.901910', '0.506897', '0.910142', '0.877729', '0.900347', '0.887710', '0.881590', '0.891323']
         : correct/total = [(1027, 1140), (1033, 1158), (1004, 1127), (1044, 1158), (1015, 1134), (1040, 1145), (1022, 1145), (1024, 1127), (1014, 1136), (1008, 1128), (1031, 1144), (1004, 1125), (1039, 1152), (588, 1160), (1023, 1124), (1005, 1145), (1039, 1154), (1004, 1131), (1020, 1157), (1017, 1141)]
         : compromised: 0.8663, honest: 0.9000
         : sketchguard stats = ['Node 0: acc_rate=0.333', 'Node 1: acc_rate=0.292', 'Node 2: acc_rate=0.200']...
Round 009: test acc mean=0.8773 ± 0.0856 | min=0.5069 max=0.9085
         : test loss mean=nan ± nan
         : individual accs = ['0.897368', '0.895509', '0.889973', '0.908463', '0.902998', '0.906550', '0.897817', '0.906832', '0.900528', '0.890071', '0.902098', '0.904889', '0.904514', '0.506897', '0.896797', '0.882096', '0.905546', '0.885942', '0.866033', '0.894829']
         : correct/total = [(1023, 1140), (1037, 1158), (1003, 1127), (1052, 1158), (1024, 1134), (1038, 1145), (1028, 1145), (1022, 1127), (1023, 1136), (1004, 1128), (1032, 1144), (1018, 1125), (1042, 1152), (588, 1160), (1008, 1124), (1010, 1145), (1045, 1154), (1002, 1131), (1002, 1157), (1021, 1141)]
         : compromised: 0.8672, honest: 0.9008
         : sketchguard stats = ['Node 0: acc_rate=0.333', 'Node 1: acc_rate=0.278', 'Node 2: acc_rate=0.200']...
Round 010: test acc mean=0.8799 ± 0.0860 | min=0.5069 max=0.9139
         : test loss mean=nan ± nan
         : individual accs = ['0.903509', '0.902418', '0.890861', '0.912781', '0.900353', '0.903057', '0.896943', '0.913931', '0.896127', '0.900709', '0.897727', '0.893333', '0.909722', '0.506897', '0.907473', '0.889956', '0.908146', '0.887710', '0.878997', '0.896582']
         : correct/total = [(1030, 1140), (1045, 1158), (1004, 1127), (1057, 1158), (1021, 1134), (1034, 1145), (1027, 1145), (1030, 1127), (1018, 1136), (1016, 1128), (1027, 1144), (1005, 1125), (1048, 1152), (588, 1160), (1020, 1124), (1019, 1145), (1048, 1154), (1004, 1131), (1017, 1157), (1023, 1141)]
         : compromised: 0.8695, honest: 0.9041
         : sketchguard stats = ['Node 0: acc_rate=0.333', 'Node 1: acc_rate=0.267', 'Node 2: acc_rate=0.200']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: sketchguard
Attack: directed_deviation, 70.0% compromised
Final accuracy - Compromised: 0.8695, Honest: 0.9041
Overall test accuracy: mean=0.8799 ± 0.0860

=== COARSE SUMMARY ===
Node 0: acceptance=0.333
Node 1: acceptance=0.267
Node 2: acceptance=0.200
Node 3: acceptance=0.250
Node 4: acceptance=0.250
Node 5: acceptance=0.200
Node 6: acceptance=0.200
Node 7: acceptance=0.400
Node 8: acceptance=0.500
Node 9: acceptance=0.333
Node 10: acceptance=0.250
Node 11: acceptance=0.229
Node 12: acceptance=0.343
Node 13: acceptance=0.000
Node 14: acceptance=0.143
Node 15: acceptance=0.167
Node 16: acceptance=0.200
Node 17: acceptance=0.460
Node 18: acceptance=0.250
Node 19: acceptance=0.500

=== PARALLEL EXECUTION TIME (realistic for distributed system) ===
  COMMUNICATION (max across nodes):
    - Sketch transfer: 0.000s (0.0%)
    - Model fetch (accepted): 0.000s (0.0%)
  COMPUTATION (max across nodes):
    - Sketching: 0.314s (96.5%)
    - Filtering: 0.001s (0.3%)
    - Aggregation: 0.010s (3.1%)
  TOTALS:
    - Total computation: 0.326s (100.0%)
    - Total communication: 0.000s (0.0%)
    - Total parallel time: 0.326s

=== PER-NODE AVERAGE TIME ===
  - Sketching: 0.262s
  - Filtering: 0.001s
  - Aggregation: 0.007s
  - Sketch transfer: 0.000s
  - Model fetch: 0.000s
  - Total per node: 0.269s

=== TOTAL COMPUTATIONAL WORK (sum across all nodes) ===
  - Total sketching: 5.241s
  - Total filtering: 0.011s
  - Total aggregation: 0.136s
  - Total sketch transfer: 0.000s
  - Total model fetch: 0.000s
  - Grand total: 5.388s
  - Mean acceptance rate: 0.274

COARSE Algorithm Properties:
  - Original dimension: 2,219,692
  - Sketch size: 1000
  - Compression ratio: 19.8x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
