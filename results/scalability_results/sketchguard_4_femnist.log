(edgedrift) mrangwala@rs-l-rhatop:~/Projects/Trust-Monitor$ python decentralized_fl_sim.py --dataset femnist --rounds 5 --local-epochs 1 --seed 987654321 --batch-size 64 --lr 0.01 --max-samples 10000 --agg sketchguard --attack-percentage 0.5 --attack-type directed_deviation --verbose --graph k-regular --k 4 --num-nodes 10
Device: cuda
Seed: 987654321
Loading 36 LEAF FEMNIST train files...
LEAF FEMNIST train: 3597 users, 734463 samples
Loading 36 LEAF FEMNIST test files...
LEAF FEMNIST test: 3597 users, 83388 samples
Found 3597 train users, 3597 test users, 3597 common users
User sample counts range: 525 (max) to 17 (min)
Distributed ALL 3597 users across 10 clients
Users per client: 359 (with 7 clients getting +1 user)
Train partition sizes: [72867, 73985, 71964, 75263, 71705, 73185, 73506, 75129, 72831, 74028]
Test partition sizes: [8271, 8396, 8174, 8530, 8143, 8316, 8346, 8532, 8275, 8405]
  Client 0: 72867 train samples, 62 unique classes
  Client 1: 73985 train samples, 62 unique classes
  Client 2: 71964 train samples, 62 unique classes
  Client 3: 75263 train samples, 62 unique classes
  Client 4: 71705 train samples, 62 unique classes
  Client 5: 73185 train samples, 62 unique classes
  Client 6: 73506 train samples, 62 unique classes
  Client 7: 75129 train samples, 62 unique classes
  Client 8: 72831 train samples, 62 unique classes
  Client 9: 74028 train samples, 62 unique classes
Will sample 10000 samples per client per epoch
Graph: k-regular, nodes: 10, edges: 20
Degree statistics: avg=4.00, min=4, max=4
k-regular with k=4 (each node has exactly 4 neighbors)
Attack: Compromised 5/10 nodes: [2, 3, 6, 7, 8]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 6,603,710 parameters
  - Sketch size: 1000
  - Compression ratio: 6603.7x
  - Complexity: O(d + N×k) = O(6,603,710 + 10×1000)
  - Theoretical speedup vs BALANCE: 10.0x
Initial test acc across nodes: mean=0.0136 ± 0.0098
Round 001: test acc mean=0.0685 ± 0.0199 | min=0.0495 max=0.0998
         : test loss mean=4.0094 ± 0.0146
         : individual accs = ['0.050780', '0.053835', '0.074994', '0.049472', '0.098735', '0.099808', '0.092140', '0.055204', '0.058731', '0.051041']
         : correct/total = [(420, 8271), (452, 8396), (613, 8174), (422, 8530), (804, 8143), (830, 8316), (769, 8346), (471, 8532), (486, 8275), (429, 8405)]
         : compromised: 0.0661, honest: 0.0708
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.750']...
Round 002: test acc mean=0.0788 ± 0.0356 | min=0.0477 max=0.1432
         : test loss mean=3.7702 ± 0.0906
         : individual accs = ['0.050780', '0.048952', '0.061904', '0.049707', '0.125261', '0.123497', '0.143182', '0.055204', '0.047734', '0.081737']
         : correct/total = [(420, 8271), (411, 8396), (506, 8174), (424, 8530), (1020, 8143), (1027, 8316), (1195, 8346), (471, 8532), (395, 8275), (687, 8405)]
         : compromised: 0.0715, honest: 0.0860
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.625']...
Round 003: test acc mean=0.1840 ± 0.1483 | min=0.0477 max=0.4042
         : test loss mean=3.3297 ± 0.5189
         : individual accs = ['0.085117', '0.065865', '0.048569', '0.293083', '0.403414', '0.404161', '0.343039', '0.047820', '0.047734', '0.101130']
         : correct/total = [(704, 8271), (553, 8396), (397, 8174), (2500, 8530), (3285, 8143), (3361, 8316), (2863, 8346), (408, 8532), (395, 8275), (850, 8405)]
         : compromised: 0.1560, honest: 0.2119
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.583']...
Round 004: test acc mean=0.3249 ± 0.1843 | min=0.1045 max=0.5644
         : test loss mean=2.7473 ± 0.8558
         : individual accs = ['0.209527', '0.225465', '0.149498', '0.523564', '0.564411', '0.557480', '0.542775', '0.104548', '0.196616', '0.175372']
         : correct/total = [(1733, 8271), (1893, 8396), (1222, 8174), (4466, 8530), (4596, 8143), (4636, 8316), (4530, 8346), (892, 8532), (1627, 8275), (1474, 8405)]
         : compromised: 0.3034, honest: 0.3465
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.562']...
Round 005: test acc mean=0.5215 ± 0.1128 | min=0.3952 max=0.6625
         : test loss mean=1.8186 ± 0.4906
         : individual accs = ['0.436102', '0.432825', '0.426841', '0.652872', '0.662287', '0.662458', '0.656602', '0.395218', '0.453414', '0.436407']
         : correct/total = [(3607, 8271), (3634, 8396), (3489, 8174), (5569, 8530), (5393, 8143), (5509, 8316), (5480, 8346), (3372, 8532), (3752, 8275), (3668, 8405)]
         : compromised: 0.5170, honest: 0.5260
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.550']...

=== FINAL RESULTS ===
Dataset: femnist, Nodes: 10, Graph: k-regular, Aggregation: sketchguard
Attack: directed_deviation, 50.0% compromised
Final accuracy - Compromised: 0.5170, Honest: 0.5260
Overall test accuracy: mean=0.5215 ± 0.1128

=== COARSE SUMMARY ===
Node 0: acceptance=0.500
Node 1: acceptance=0.500
Node 2: acceptance=0.550
Node 3: acceptance=0.600
Node 4: acceptance=0.250
Node 5: acceptance=0.250
Node 6: acceptance=0.500
Node 7: acceptance=0.300
Node 8: acceptance=0.500
Node 9: acceptance=0.500

=== PARALLEL EXECUTION TIME (realistic for distributed system) ===
  COMMUNICATION (max across nodes):
    - Sketch transfer: 0.000s (0.0%)
    - Model fetch (accepted): 0.000s (0.0%)
  COMPUTATION (max across nodes):
    - Sketching: 0.507s (98.4%)
    - Filtering: 0.001s (0.1%)
    - Aggregation: 0.008s (1.5%)
  TOTALS:
    - Total computation: 0.515s (100.0%)
    - Total communication: 0.000s (0.0%)
    - Total parallel time: 0.515s

=== PER-NODE AVERAGE TIME ===
  - Sketching: 0.399s
  - Filtering: 0.000s
  - Aggregation: 0.005s
  - Sketch transfer: 0.000s
  - Model fetch: 0.000s
  - Total per node: 0.404s

=== TOTAL COMPUTATIONAL WORK (sum across all nodes) ===
  - Total sketching: 3.986s
  - Total filtering: 0.004s
  - Total aggregation: 0.055s
  - Total sketch transfer: 0.000s
  - Total model fetch: 0.000s
  - Grand total: 4.045s
  - Mean acceptance rate: 0.445

COARSE Algorithm Properties:
  - Original dimension: 6,603,710
  - Sketch size: 1000
  - Compression ratio: 10.0x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation