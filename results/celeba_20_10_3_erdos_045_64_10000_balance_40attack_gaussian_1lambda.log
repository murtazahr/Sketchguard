Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 99
Attack: Compromised 8/20 nodes: [1, 5, 11, 12, 13, 14, 17, 18]
Attack type: gaussian, lambda: 1.0
BALANCE algorithm:
  - Model dimension: 30,758 parameters
  - Complexity: O(N×d) = O(20×30,758)
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8460 ± 0.0809
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5124, honest: 0.5190
Round 002: test acc mean=0.5169 ± 0.0148 | min=0.4911 max=0.5625
         : test loss mean=0.7468 ± 0.0586
         : individual accs = ['0.528947', '0.508636', '0.494232', '0.528497', '0.522046', '0.514410', '0.524891', '0.511091', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (557, 1127), (612, 1158), (592, 1134), (589, 1145), (601, 1145), (576, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5124, honest: 0.5199
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5124, honest: 0.5190
Round 004: test acc mean=0.5003 ± 0.0204 | min=0.4569 max=0.5294
         : test loss mean=nan ± nan
         : individual accs = ['0.523684', '0.508636', '0.496894', '0.529361', '0.470899', '0.502183', '0.517031', '0.486247', '0.456866', '0.491135', '0.525350', '0.498667', '0.521701', '0.521552', '0.512456', '0.489083', '0.502600', '0.508400', '0.477960', '0.466258']
         : correct/total = [(597, 1140), (589, 1158), (560, 1127), (613, 1158), (534, 1134), (575, 1145), (592, 1145), (548, 1127), (519, 1136), (554, 1128), (601, 1144), (561, 1125), (601, 1152), (605, 1160), (576, 1124), (560, 1145), (580, 1154), (575, 1131), (553, 1157), (532, 1141)]
         : compromised: 0.5064, honest: 0.4963
Round 005: test acc mean=0.5089 ± 0.0188 | min=0.4786 max=0.5599
         : test loss mean=484.2967 ± 728.1499
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.534542', '0.523810', '0.511790', '0.478603', '0.482697', '0.559859', '0.491135', '0.506993', '0.505778', '0.518229', '0.497414', '0.517794', '0.494323', '0.505199', '0.508400', '0.521175', '0.489921']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (619, 1158), (594, 1134), (586, 1145), (548, 1145), (544, 1127), (636, 1136), (554, 1128), (580, 1144), (569, 1125), (597, 1152), (577, 1160), (582, 1124), (566, 1145), (583, 1154), (575, 1131), (603, 1157), (559, 1141)]
         : compromised: 0.5112, honest: 0.5074
Round 006: test acc mean=0.4964 ± 0.0192 | min=0.4630 max=0.5294
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.491364', '0.511979', '0.529361', '0.462963', '0.476856', '0.515284', '0.502218', '0.480634', '0.491135', '0.483392', '0.521778', '0.480035', '0.506897', '0.483096', '0.523144', '0.488735', '0.491600', '0.483146', '0.475022']
         : correct/total = [(603, 1140), (569, 1158), (577, 1127), (613, 1158), (525, 1134), (546, 1145), (590, 1145), (566, 1127), (546, 1136), (554, 1128), (553, 1144), (587, 1125), (553, 1152), (588, 1160), (543, 1124), (599, 1145), (564, 1154), (556, 1131), (559, 1157), (542, 1141)]
         : compromised: 0.4918, honest: 0.4994
Round 007: test acc mean=0.5074 ± 0.0213 | min=0.4774 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.528219', '0.485590', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.477431', '0.493103', '0.517794', '0.517031', '0.515598', '0.491600', '0.477960', '0.482033']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (599, 1134), (556, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (550, 1152), (572, 1160), (582, 1124), (592, 1145), (595, 1154), (556, 1131), (553, 1157), (550, 1141)]
         : compromised: 0.4938, honest: 0.5165
Round 008: test acc mean=0.5029 ± 0.0220 | min=0.4375 max=0.5285
         : test loss mean=0.7908 ± 0.2336
         : individual accs = ['0.471053', '0.508636', '0.493345', '0.528497', '0.522046', '0.485590', '0.521397', '0.503993', '0.437500', '0.508865', '0.525350', '0.498667', '0.477431', '0.493103', '0.517794', '0.517031', '0.515598', '0.491600', '0.522040', '0.517967']
         : correct/total = [(537, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (556, 1145), (597, 1145), (568, 1127), (497, 1136), (574, 1128), (601, 1144), (561, 1125), (550, 1152), (572, 1160), (582, 1124), (592, 1145), (595, 1154), (556, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.4994, honest: 0.5052
Round 009: test acc mean=0.5110 ± 0.0193 | min=0.4375 max=0.5289
         : test loss mean=0.6990 ± 0.0118
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.437500', '0.508865', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (497, 1136), (574, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5124, honest: 0.5100
Round 010: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.6936 ± 0.0027
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5124, honest: 0.5190

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: balance
Attack: gaussian, 40.0% compromised
Final accuracy - Compromised: 0.5124, Honest: 0.5190
Overall test accuracy: mean=0.5164 ± 0.0150

=== BALANCE SUMMARY ===
Node 0: acceptance=0.617
Node 1: acceptance=0.700
Node 2: acceptance=0.588
Node 3: acceptance=0.657
Node 4: acceptance=0.567
Node 5: acceptance=0.600
Node 6: acceptance=0.567
Node 7: acceptance=0.582
Node 8: acceptance=0.557
Node 9: acceptance=0.482
Node 10: acceptance=0.675
Node 11: acceptance=0.600
Node 12: acceptance=0.642
Node 13: acceptance=0.678
Node 14: acceptance=0.550
Node 15: acceptance=0.589
Node 16: acceptance=0.571
Node 17: acceptance=0.700
Node 18: acceptance=0.658
Node 19: acceptance=0.590

Performance Summary:
  - Distance computation time: 1.543s (43.2%)
  - Filtering time: 1.679s (47.1%)
  - Aggregation time: 0.346s (9.7%)
  - Total time: 3.568s
  - Mean acceptance rate: 0.608

BALANCE Algorithm Properties:
  - Model dimension: 30,758
  - No compression: Full parameter comparison
  - Theoretical complexity: O(deg(i)×d)
  - Approach: Full parameter filtering + averaging
