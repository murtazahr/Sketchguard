Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 126
Attack: Compromised 2/20 nodes: [5, 13]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5214 ± 0.0192 | min=0.4911 max=0.5638
         : test loss mean=1.3811 ± 0.7655
         : individual accs = ['0.528947', '0.540587', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.563811', '0.498667', '0.544271', '0.506897', '0.517794', '0.517031', '0.515598', '0.517241', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (626, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (645, 1144), (561, 1125), (627, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (585, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5107, honest: 0.5226
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=1.5786 ± 0.6739
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5107, honest: 0.5170
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5157 ± 0.0129 | min=0.4911 max=0.5509
         : test loss mean=0.7645 ± 0.0573
         : individual accs = ['0.528947', '0.511226', '0.493345', '0.550950', '0.522046', '0.514410', '0.521397', '0.503993', '0.522007', '0.491135', '0.525350', '0.502222', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.506631', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (592, 1158), (556, 1127), (638, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (593, 1136), (554, 1128), (601, 1144), (565, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (573, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5107, honest: 0.5162
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=1.0761 ± 0.1469
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5107, honest: 0.5170
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5161 ± 0.0145 | min=0.4911 max=0.5590
         : test loss mean=0.8174 ± 0.0754
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.558979', '0.491135', '0.525350', '0.497778', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (635, 1136), (554, 1128), (601, 1144), (560, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5107, honest: 0.5168
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.5163 ± 0.0149 | min=0.4911 max=0.5616
         : test loss mean=1.0918 ± 0.2105
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.561620', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (638, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5107, honest: 0.5169
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.5808 ± 0.0601 | min=0.5102 max=0.7228
         : test loss mean=0.6513 ± 0.0195
         : individual accs = ['0.671053', '0.601900', '0.638864', '0.722798', '0.592593', '0.575546', '0.599127', '0.510204', '0.539613', '0.511525', '0.529720', '0.688889', '0.527778', '0.546552', '0.557829', '0.531004', '0.524263', '0.568523', '0.547969', '0.630149']
         : correct/total = [(765, 1140), (697, 1158), (720, 1127), (837, 1158), (672, 1134), (659, 1145), (686, 1145), (575, 1127), (613, 1136), (577, 1128), (606, 1144), (775, 1125), (608, 1152), (634, 1160), (627, 1124), (608, 1145), (605, 1154), (643, 1131), (634, 1157), (719, 1141)]
         : compromised: 0.5610, honest: 0.5830
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.5194 ± 0.0142 | min=0.4933 max=0.5625
         : test loss mean=0.9132 ± 0.1883
         : individual accs = ['0.528947', '0.510363', '0.493345', '0.528497', '0.522046', '0.515284', '0.521397', '0.503993', '0.562500', '0.525709', '0.530594', '0.499556', '0.523438', '0.506897', '0.517794', '0.517031', '0.531196', '0.509284', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (591, 1158), (556, 1127), (612, 1158), (592, 1134), (590, 1145), (597, 1145), (568, 1127), (639, 1136), (593, 1128), (607, 1144), (562, 1125), (603, 1152), (588, 1160), (582, 1124), (592, 1145), (613, 1154), (576, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5111, honest: 0.5203
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.7513 ± 0.0873 | min=0.4947 max=0.8642
         : test loss mean=0.5493 ± 0.0629
         : individual accs = ['0.601754', '0.733161', '0.640639', '0.803109', '0.864198', '0.855895', '0.731878', '0.796806', '0.494718', '0.772163', '0.782343', '0.679111', '0.777778', '0.808621', '0.732206', '0.746725', '0.769497', '0.828470', '0.798617', '0.808063']
         : correct/total = [(686, 1140), (849, 1158), (722, 1127), (930, 1158), (980, 1134), (980, 1145), (838, 1145), (898, 1127), (562, 1136), (871, 1128), (895, 1144), (764, 1125), (896, 1152), (938, 1160), (823, 1124), (855, 1145), (888, 1154), (937, 1131), (924, 1157), (922, 1141)]
         : compromised: 0.8323, honest: 0.7423
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.5848 ± 0.0671 | min=0.5013 max=0.7362
         : test loss mean=0.7493 ± 0.2552
         : individual accs = ['0.541228', '0.563903', '0.501331', '0.534542', '0.585538', '0.736245', '0.525764', '0.585626', '0.565141', '0.645390', '0.581294', '0.506667', '0.722222', '0.612931', '0.594306', '0.591266', '0.702773', '0.527851', '0.535869', '0.536372']
         : correct/total = [(617, 1140), (653, 1158), (565, 1127), (619, 1158), (664, 1134), (843, 1145), (602, 1145), (660, 1127), (642, 1136), (728, 1128), (665, 1144), (570, 1125), (832, 1152), (711, 1160), (668, 1124), (677, 1145), (811, 1154), (597, 1131), (620, 1157), (612, 1141)]
         : compromised: 0.6746, honest: 0.5748
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: directed_deviation, 10.0% compromised
Final accuracy - Compromised: 0.6746, Honest: 0.5748
Overall test accuracy: mean=0.5848 ± 0.0671

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.039s (3.8%)
  - Filtering time: 0.009s (0.9%)
  - Aggregation time: 0.970s (95.3%)
  - Total time: 1.019s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
