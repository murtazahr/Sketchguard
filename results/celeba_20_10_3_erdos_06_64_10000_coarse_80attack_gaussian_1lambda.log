Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 126
Attack: Compromised 16/20 nodes: [1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8748 ± 0.0898
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5160, honest: 0.5176
         : coarse stats = ['Node 0: acc_rate=0.188', 'Node 1: acc_rate=0.364', 'Node 2: acc_rate=0.250']...
Round 002: test acc mean=0.5432 ± 0.0904 | min=0.4911 max=0.9119
         : test loss mean=0.7452 ± 0.1434
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.911917', '0.532628', '0.514410', '0.521397', '0.645963', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.516464', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (1056, 1158), (604, 1134), (589, 1145), (597, 1145), (728, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (596, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5400, honest: 0.5560
         : coarse stats = ['Node 0: acc_rate=0.188', 'Node 1: acc_rate=0.364', 'Node 2: acc_rate=0.250']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5160, honest: 0.5176
         : coarse stats = ['Node 0: acc_rate=0.458', 'Node 1: acc_rate=0.576', 'Node 2: acc_rate=0.500']...
Round 004: test acc mean=0.5014 ± 0.0225 | min=0.4653 max=0.5627
         : test loss mean=685.1795 ± 992.3592
         : individual accs = ['0.502632', '0.512953', '0.505768', '0.471503', '0.475309', '0.485590', '0.477729', '0.501331', '0.477993', '0.518617', '0.520979', '0.504000', '0.522569', '0.512931', '0.465302', '0.500437', '0.482669', '0.508400', '0.518583', '0.562664']
         : correct/total = [(573, 1140), (594, 1158), (570, 1127), (546, 1158), (539, 1134), (556, 1145), (547, 1145), (565, 1127), (543, 1136), (585, 1128), (596, 1144), (567, 1125), (602, 1152), (595, 1160), (523, 1124), (573, 1145), (557, 1154), (575, 1131), (600, 1157), (642, 1141)]
         : compromised: 0.5041, honest: 0.4905
         : coarse stats = ['Node 0: acc_rate=0.578', 'Node 1: acc_rate=0.682', 'Node 2: acc_rate=0.625']...
Round 005: test acc mean=0.5037 ± 0.0208 | min=0.4445 max=0.5324
         : test loss mean=631.5390 ± 702.9512
         : individual accs = ['0.495614', '0.500000', '0.530612', '0.528497', '0.522046', '0.508297', '0.504803', '0.532387', '0.444542', '0.492908', '0.525350', '0.490667', '0.495660', '0.506897', '0.513345', '0.482969', '0.510399', '0.490716', '0.520311', '0.477651']
         : correct/total = [(565, 1140), (579, 1158), (598, 1127), (612, 1158), (592, 1134), (582, 1145), (578, 1145), (600, 1127), (505, 1136), (556, 1128), (601, 1144), (552, 1125), (571, 1152), (588, 1160), (577, 1124), (553, 1145), (589, 1154), (555, 1131), (602, 1157), (545, 1141)]
         : compromised: 0.5008, honest: 0.5151
         : coarse stats = ['Node 0: acc_rate=0.662', 'Node 1: acc_rate=0.745', 'Node 2: acc_rate=0.700']...
Round 006: test acc mean=0.4871 ± 0.0286 | min=0.4366 max=0.5650
         : test loss mean=275.9754 ± 270.1171
         : individual accs = ['0.471053', '0.511226', '0.471162', '0.467185', '0.546737', '0.485590', '0.478603', '0.505768', '0.436620', '0.500000', '0.474650', '0.449778', '0.472222', '0.475000', '0.482206', '0.494323', '0.493068', '0.564987', '0.477960', '0.482910']
         : correct/total = [(537, 1140), (592, 1158), (531, 1127), (541, 1158), (620, 1134), (556, 1145), (548, 1145), (570, 1127), (496, 1136), (564, 1128), (543, 1144), (506, 1125), (544, 1152), (551, 1160), (542, 1124), (566, 1145), (569, 1154), (639, 1131), (553, 1157), (551, 1141)]
         : compromised: 0.4828, honest: 0.5042
         : coarse stats = ['Node 0: acc_rate=0.708', 'Node 1: acc_rate=0.788', 'Node 2: acc_rate=0.750']...
Round 007: test acc mean=0.5190 ± 0.0236 | min=0.4783 max=0.5750
         : test loss mean=1.2668 ± 0.5263
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.574956', '0.514410', '0.521397', '0.503993', '0.561620', '0.491135', '0.544580', '0.498667', '0.478299', '0.506897', '0.524021', '0.526638', '0.541594', '0.491600', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (652, 1134), (589, 1145), (597, 1145), (568, 1127), (638, 1136), (554, 1128), (623, 1144), (561, 1125), (551, 1152), (588, 1160), (589, 1124), (603, 1145), (625, 1154), (556, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5144, honest: 0.5374
         : coarse stats = ['Node 0: acc_rate=0.625', 'Node 1: acc_rate=0.727', 'Node 2: acc_rate=0.679']...
Round 008: test acc mean=0.5403 ± 0.0290 | min=0.4911 max=0.5904
         : test loss mean=0.7270 ± 0.0584
         : individual accs = ['0.537719', '0.508636', '0.565217', '0.537133', '0.545855', '0.590393', '0.589520', '0.530612', '0.562500', '0.491135', '0.530594', '0.498667', '0.527778', '0.507759', '0.568505', '0.533624', '0.562392', '0.513705', '0.522040', '0.582822']
         : correct/total = [(613, 1140), (589, 1158), (637, 1127), (622, 1158), (619, 1134), (676, 1145), (675, 1145), (598, 1127), (639, 1136), (554, 1128), (607, 1144), (561, 1125), (608, 1152), (589, 1160), (639, 1124), (611, 1145), (649, 1154), (581, 1131), (604, 1157), (665, 1141)]
         : compromised: 0.5394, honest: 0.5441
         : coarse stats = ['Node 0: acc_rate=0.570', 'Node 1: acc_rate=0.682', 'Node 2: acc_rate=0.625']...
Round 009: test acc mean=0.5795 ± 0.0361 | min=0.4911 max=0.6437
         : test loss mean=0.6878 ± 0.0381
         : individual accs = ['0.599123', '0.598446', '0.567879', '0.595855', '0.583774', '0.643668', '0.634061', '0.602484', '0.571303', '0.491135', '0.556818', '0.545778', '0.559896', '0.563793', '0.572064', '0.533624', '0.561525', '0.607427', '0.562662', '0.638913']
         : correct/total = [(683, 1140), (693, 1158), (640, 1127), (690, 1158), (662, 1134), (737, 1145), (726, 1145), (679, 1127), (649, 1136), (554, 1128), (637, 1144), (614, 1125), (645, 1152), (654, 1160), (643, 1124), (611, 1145), (648, 1154), (687, 1131), (651, 1157), (729, 1141)]
         : compromised: 0.5777, honest: 0.5867
         : coarse stats = ['Node 0: acc_rate=0.528', 'Node 1: acc_rate=0.646', 'Node 2: acc_rate=0.583']...
Round 010: test acc mean=0.6284 ± 0.0270 | min=0.5802 max=0.6716
         : test loss mean=0.6467 ± 0.0205
         : individual accs = ['0.644737', '0.645078', '0.590949', '0.645941', '0.663139', '0.667249', '0.671616', '0.651287', '0.585387', '0.606383', '0.615385', '0.651556', '0.624132', '0.580172', '0.612989', '0.608734', '0.635182', '0.634836', '0.596370', '0.637160']
         : correct/total = [(735, 1140), (747, 1158), (666, 1127), (748, 1158), (752, 1134), (764, 1145), (769, 1145), (734, 1127), (665, 1136), (684, 1128), (704, 1144), (733, 1125), (719, 1152), (673, 1160), (689, 1124), (697, 1145), (733, 1154), (718, 1131), (690, 1157), (727, 1141)]
         : compromised: 0.6234, honest: 0.6486
         : coarse stats = ['Node 0: acc_rate=0.494', 'Node 1: acc_rate=0.618', 'Node 2: acc_rate=0.550']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: gaussian, 80.0% compromised
Final accuracy - Compromised: 0.6234, Honest: 0.6486
Overall test accuracy: mean=0.6284 ± 0.0270

=== COARSE SUMMARY ===
Node 0: acceptance=0.494
Node 1: acceptance=0.618
Node 2: acceptance=0.550
Node 3: acceptance=0.475
Node 4: acceptance=0.564
Node 5: acceptance=0.480
Node 6: acceptance=0.486
Node 7: acceptance=0.486
Node 8: acceptance=0.520
Node 9: acceptance=0.585
Node 10: acceptance=0.533
Node 11: acceptance=0.521
Node 12: acceptance=0.550
Node 13: acceptance=0.531
Node 14: acceptance=0.520
Node 15: acceptance=0.509
Node 16: acceptance=0.492
Node 17: acceptance=0.600
Node 18: acceptance=0.531
Node 19: acceptance=0.512

Performance Summary:
  - Sketching time: 0.050s (8.4%)
  - Filtering time: 0.009s (1.5%)
  - Aggregation time: 0.532s (90.0%)
  - Total time: 0.591s
  - Mean acceptance rate: 0.528

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
