Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 99
Attack: Compromised 2/20 nodes: [5, 13]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5192 ± 0.0198 | min=0.4911 max=0.5660
         : test loss mean=1.4382 ± 1.1931
         : individual accs = ['0.547368', '0.514680', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.497778', '0.565972', '0.506897', '0.517794', '0.517031', '0.515598', '0.497790', '0.522040', '0.517967']
         : correct/total = [(624, 1140), (596, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (560, 1125), (652, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (563, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5107, honest: 0.5201
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5190 ± 0.0161 | min=0.4911 max=0.5528
         : test loss mean=2.9858 ± 5.1023
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.540587', '0.519400', '0.514410', '0.525764', '0.506655', '0.552817', '0.491135', '0.525350', '0.496889', '0.523438', '0.506897', '0.520463', '0.517031', '0.515598', '0.549956', '0.522904', '0.520596']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (626, 1158), (589, 1134), (589, 1145), (602, 1145), (571, 1127), (628, 1136), (554, 1128), (601, 1144), (559, 1125), (603, 1152), (588, 1160), (585, 1124), (592, 1145), (595, 1154), (622, 1131), (605, 1157), (594, 1141)]
         : compromised: 0.5107, honest: 0.5200
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5175 ± 0.0164 | min=0.4911 max=0.5669
         : test loss mean=1.0488 ± 0.2199
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.530225', '0.522046', '0.514410', '0.535371', '0.503993', '0.566901', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.512456', '0.517031', '0.515598', '0.509284', '0.522040', '0.525855']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (614, 1158), (592, 1134), (589, 1145), (613, 1145), (568, 1127), (644, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (576, 1124), (592, 1145), (595, 1154), (576, 1131), (604, 1157), (600, 1141)]
         : compromised: 0.5107, honest: 0.5183
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=1.1900 ± 0.3623
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5107, honest: 0.5170
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5171 ± 0.0149 | min=0.4911 max=0.5634
         : test loss mean=0.8343 ± 0.0751
         : individual accs = ['0.528947', '0.508636', '0.498669', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.563380', '0.491135', '0.527972', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.522530', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (562, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (640, 1136), (554, 1128), (604, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (603, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5107, honest: 0.5179
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.5237 ± 0.0218 | min=0.4911 max=0.5717
         : test loss mean=0.9936 ± 0.3817
         : individual accs = ['0.552632', '0.571675', '0.503106', '0.554404', '0.544092', '0.514410', '0.524891', '0.504880', '0.562500', '0.491135', '0.525350', '0.494222', '0.522569', '0.506897', '0.519573', '0.517031', '0.516464', '0.509284', '0.523768', '0.515337']
         : correct/total = [(630, 1140), (662, 1158), (567, 1127), (642, 1158), (617, 1134), (589, 1145), (601, 1145), (569, 1127), (639, 1136), (554, 1128), (601, 1144), (556, 1125), (602, 1152), (588, 1160), (584, 1124), (592, 1145), (596, 1154), (576, 1131), (606, 1157), (588, 1141)]
         : compromised: 0.5107, honest: 0.5252
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.5613 ± 0.0400 | min=0.5190 max=0.6744
         : test loss mean=0.7811 ± 0.2055
         : individual accs = ['0.550000', '0.519862', '0.674357', '0.575993', '0.576720', '0.606987', '0.539738', '0.558119', '0.571303', '0.622340', '0.607517', '0.576000', '0.523438', '0.518966', '0.532028', '0.540611', '0.520797', '0.525199', '0.549697', '0.537248']
         : correct/total = [(627, 1140), (602, 1158), (760, 1127), (667, 1158), (654, 1134), (695, 1145), (618, 1145), (629, 1127), (649, 1136), (702, 1128), (695, 1144), (648, 1125), (603, 1152), (602, 1160), (598, 1124), (619, 1145), (601, 1154), (594, 1131), (636, 1157), (613, 1141)]
         : compromised: 0.5630, honest: 0.5612
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.6010 ± 0.1295 | min=0.4978 max=0.8208
         : test loss mean=0.6571 ± 0.1436
         : individual accs = ['0.528947', '0.510363', '0.820763', '0.528497', '0.522046', '0.783406', '0.521397', '0.503993', '0.514965', '0.816489', '0.767483', '0.497778', '0.522569', '0.819828', '0.516014', '0.517031', '0.778163', '0.508400', '0.522904', '0.518843']
         : correct/total = [(603, 1140), (591, 1158), (925, 1127), (612, 1158), (592, 1134), (897, 1145), (597, 1145), (568, 1127), (585, 1136), (921, 1128), (878, 1144), (560, 1125), (602, 1152), (951, 1160), (580, 1124), (592, 1145), (898, 1154), (575, 1131), (605, 1157), (592, 1141)]
         : compromised: 0.8016, honest: 0.5787
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.6166 ± 0.1439 | min=0.4987 max=0.8534
         : test loss mean=0.7845 ± 0.3094
         : individual accs = ['0.528947', '0.508636', '0.852706', '0.528497', '0.522046', '0.803493', '0.521397', '0.506655', '0.565141', '0.841312', '0.847028', '0.498667', '0.522569', '0.853448', '0.517794', '0.517031', '0.809359', '0.508400', '0.561798', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (961, 1127), (612, 1158), (592, 1134), (920, 1145), (597, 1145), (571, 1127), (642, 1136), (949, 1128), (969, 1144), (561, 1125), (602, 1152), (990, 1160), (582, 1124), (592, 1145), (934, 1154), (575, 1131), (650, 1157), (591, 1141)]
         : compromised: 0.8285, honest: 0.5931
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.7647 ± 0.1036 | min=0.5241 max=0.8873
         : test loss mean=0.6591 ± 0.6008
         : individual accs = ['0.825439', '0.785838', '0.887311', '0.748705', '0.837743', '0.850655', '0.586900', '0.768412', '0.565141', '0.865248', '0.875000', '0.688889', '0.796007', '0.824138', '0.703737', '0.776419', '0.877816', '0.709107', '0.796889', '0.524102']
         : correct/total = [(941, 1140), (910, 1158), (1000, 1127), (867, 1158), (950, 1134), (974, 1145), (672, 1145), (866, 1127), (642, 1136), (976, 1128), (1001, 1144), (775, 1125), (917, 1152), (956, 1160), (791, 1124), (889, 1145), (1013, 1154), (802, 1131), (922, 1157), (598, 1141)]
         : compromised: 0.8374, honest: 0.7566
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: directed_deviation, 10.0% compromised
Final accuracy - Compromised: 0.8374, Honest: 0.7566
Overall test accuracy: mean=0.7647 ± 0.1036

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.039s (4.8%)
  - Filtering time: 0.008s (1.0%)
  - Aggregation time: 0.765s (94.3%)
  - Total time: 0.811s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
