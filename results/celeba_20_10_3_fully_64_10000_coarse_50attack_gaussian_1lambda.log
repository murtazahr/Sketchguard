Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: fully, nodes: 20, edges: 190
Attack: Compromised 10/20 nodes: [1, 2, 5, 11, 12, 13, 14, 15, 17, 18]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8327 ± 0.0746
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5110, honest: 0.5217
         : coarse stats = ['Node 0: acc_rate=0.474', 'Node 1: acc_rate=0.526', 'Node 2: acc_rate=0.526']...
Round 002: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.7930 ± 0.0739
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5110, honest: 0.5217
         : coarse stats = ['Node 0: acc_rate=0.474', 'Node 1: acc_rate=0.526', 'Node 2: acc_rate=0.526']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5110, honest: 0.5217
         : coarse stats = ['Node 0: acc_rate=0.649', 'Node 1: acc_rate=0.684', 'Node 2: acc_rate=0.684']...
Round 004: test acc mean=0.5153 ± 0.0155 | min=0.4911 max=0.5625
         : test loss mean=232.7207 ± 75.1531
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.527634', '0.522046', '0.512664', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.516904', '0.517031', '0.515598', '0.495137', '0.516854', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (611, 1158), (592, 1134), (587, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (581, 1124), (592, 1145), (595, 1154), (560, 1131), (598, 1157), (591, 1141)]
         : compromised: 0.5089, honest: 0.5217
         : coarse stats = ['Node 0: acc_rate=0.737', 'Node 1: acc_rate=0.763', 'Node 2: acc_rate=0.763']...
Round 005: test acc mean=0.5131 ± 0.0179 | min=0.4793 max=0.5643
         : test loss mean=116.8068 ± 36.1643
         : individual accs = ['0.531579', '0.479275', '0.491571', '0.529361', '0.521164', '0.514410', '0.519651', '0.503106', '0.564261', '0.492021', '0.524476', '0.498667', '0.516493', '0.506034', '0.517794', '0.518777', '0.515598', '0.493369', '0.506482', '0.518843']
         : correct/total = [(606, 1140), (555, 1158), (554, 1127), (613, 1158), (591, 1134), (589, 1145), (595, 1145), (567, 1127), (641, 1136), (555, 1128), (600, 1144), (561, 1125), (595, 1152), (587, 1160), (582, 1124), (594, 1145), (595, 1154), (558, 1131), (586, 1157), (592, 1141)]
         : compromised: 0.5043, honest: 0.5220
         : coarse stats = ['Node 0: acc_rate=0.789', 'Node 1: acc_rate=0.811', 'Node 2: acc_rate=0.811']...
Round 006: test acc mean=0.5128 ± 0.0195 | min=0.4684 max=0.5625
         : test loss mean=122.0438 ± 47.3445
         : individual accs = ['0.528947', '0.480138', '0.492458', '0.528497', '0.522046', '0.514410', '0.521397', '0.503106', '0.562500', '0.491135', '0.518357', '0.468444', '0.523438', '0.506897', '0.518683', '0.519651', '0.514731', '0.502210', '0.522040', '0.517090']
         : correct/total = [(603, 1140), (556, 1158), (555, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (567, 1127), (639, 1136), (554, 1128), (593, 1144), (527, 1125), (603, 1152), (588, 1160), (583, 1124), (595, 1145), (594, 1154), (568, 1131), (604, 1157), (590, 1141)]
         : compromised: 0.5048, honest: 0.5208
         : coarse stats = ['Node 0: acc_rate=0.825', 'Node 1: acc_rate=0.842', 'Node 2: acc_rate=0.842']...
Round 007: test acc mean=0.5424 ± 0.0231 | min=0.4987 max=0.5953
         : test loss mean=0.7237 ± 0.0489
         : individual accs = ['0.524561', '0.556131', '0.498669', '0.550950', '0.552910', '0.531878', '0.574672', '0.559894', '0.549296', '0.557624', '0.526224', '0.500444', '0.550347', '0.565517', '0.519573', '0.541485', '0.595321', '0.536693', '0.528954', '0.527607']
         : correct/total = [(598, 1140), (644, 1158), (562, 1127), (638, 1158), (627, 1134), (609, 1145), (658, 1145), (631, 1127), (624, 1136), (629, 1128), (602, 1144), (563, 1125), (634, 1152), (656, 1160), (584, 1124), (620, 1145), (687, 1154), (607, 1131), (612, 1157), (602, 1141)]
         : compromised: 0.5330, honest: 0.5519
         : coarse stats = ['Node 0: acc_rate=0.774', 'Node 1: acc_rate=0.797', 'Node 2: acc_rate=0.797']...
Round 008: test acc mean=0.5911 ± 0.0198 | min=0.5432 max=0.6223
         : test loss mean=0.6735 ± 0.0158
         : individual accs = ['0.593860', '0.543178', '0.574091', '0.594991', '0.589065', '0.607860', '0.570306', '0.598935', '0.580986', '0.615248', '0.602273', '0.582222', '0.585938', '0.618103', '0.586299', '0.568559', '0.621317', '0.571176', '0.594641', '0.622261']
         : correct/total = [(677, 1140), (629, 1158), (647, 1127), (689, 1158), (668, 1134), (696, 1145), (653, 1145), (675, 1127), (660, 1136), (694, 1128), (689, 1144), (655, 1125), (675, 1152), (717, 1160), (659, 1124), (651, 1145), (717, 1154), (646, 1131), (688, 1157), (710, 1141)]
         : compromised: 0.5832, honest: 0.5989
         : coarse stats = ['Node 0: acc_rate=0.737', 'Node 1: acc_rate=0.763', 'Node 2: acc_rate=0.763']...
Round 009: test acc mean=0.6345 ± 0.0178 | min=0.6050 max=0.6776
         : test loss mean=0.6437 ± 0.0158
         : individual accs = ['0.642982', '0.620898', '0.616681', '0.631261', '0.639330', '0.643668', '0.641048', '0.637977', '0.643486', '0.632092', '0.615385', '0.630222', '0.605035', '0.647414', '0.670819', '0.620961', '0.677643', '0.609195', '0.636992', '0.626643']
         : correct/total = [(733, 1140), (719, 1158), (695, 1127), (731, 1158), (725, 1134), (737, 1145), (734, 1145), (719, 1127), (731, 1136), (713, 1128), (704, 1144), (709, 1125), (697, 1152), (751, 1160), (754, 1124), (711, 1145), (782, 1154), (689, 1131), (737, 1157), (715, 1141)]
         : compromised: 0.6302, honest: 0.6388
         : coarse stats = ['Node 0: acc_rate=0.708', 'Node 1: acc_rate=0.737', 'Node 2: acc_rate=0.737']...
Round 010: test acc mean=0.6632 ± 0.0164 | min=0.6313 max=0.6932
         : test loss mean=0.6156 ± 0.0172
         : individual accs = ['0.648246', '0.665803', '0.669920', '0.631261', '0.660494', '0.689083', '0.671616', '0.684117', '0.667254', '0.683511', '0.655594', '0.652444', '0.675347', '0.649138', '0.657473', '0.659389', '0.693241', '0.632184', '0.660328', '0.657318']
         : correct/total = [(739, 1140), (771, 1158), (755, 1127), (731, 1158), (749, 1134), (789, 1145), (769, 1145), (771, 1127), (758, 1136), (771, 1128), (750, 1144), (734, 1125), (778, 1152), (753, 1160), (739, 1124), (755, 1145), (800, 1154), (715, 1131), (764, 1157), (750, 1141)]
         : compromised: 0.6611, honest: 0.6653
         : coarse stats = ['Node 0: acc_rate=0.684', 'Node 1: acc_rate=0.716', 'Node 2: acc_rate=0.716']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: fully, Aggregation: coarse
Attack: gaussian, 50.0% compromised
Final accuracy - Compromised: 0.6611, Honest: 0.6653
Overall test accuracy: mean=0.6632 ± 0.0164

=== COARSE SUMMARY ===
Node 0: acceptance=0.684
Node 1: acceptance=0.716
Node 2: acceptance=0.716
Node 3: acceptance=0.684
Node 4: acceptance=0.684
Node 5: acceptance=0.716
Node 6: acceptance=0.684
Node 7: acceptance=0.684
Node 8: acceptance=0.684
Node 9: acceptance=0.684
Node 10: acceptance=0.684
Node 11: acceptance=0.716
Node 12: acceptance=0.716
Node 13: acceptance=0.716
Node 14: acceptance=0.716
Node 15: acceptance=0.716
Node 16: acceptance=0.684
Node 17: acceptance=0.716
Node 18: acceptance=0.716
Node 19: acceptance=0.684

Performance Summary:
  - Sketching time: 0.046s (4.3%)
  - Filtering time: 0.012s (1.1%)
  - Aggregation time: 1.007s (94.6%)
  - Total time: 1.065s
  - Mean acceptance rate: 0.700

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
