Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 99
Attack: Compromised 6/20 nodes: [5, 12, 13, 14, 17, 18]
Attack type: gaussian, lambda: 1.0
BALANCE algorithm:
  - Model dimension: 30,758 parameters
  - Complexity: O(N×d) = O(20×30,758)
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8561 ± 0.0826
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5154, honest: 0.5168
Round 002: test acc mean=0.5167 ± 0.0148 | min=0.4911 max=0.5625
         : test loss mean=0.7539 ± 0.0580
         : individual accs = ['0.528947', '0.509499', '0.493345', '0.529361', '0.522046', '0.514410', '0.521397', '0.509317', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (590, 1158), (556, 1127), (613, 1158), (592, 1134), (589, 1145), (597, 1145), (574, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5154, honest: 0.5173
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5154, honest: 0.5168
Round 004: test acc mean=0.5015 ± 0.0201 | min=0.4375 max=0.5289
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.504318', '0.491571', '0.528497', '0.497354', '0.496070', '0.504803', '0.514641', '0.437500', '0.491135', '0.528846', '0.496889', '0.477431', '0.508621', '0.512456', '0.482969', '0.512998', '0.508400', '0.507347', '0.499562']
         : correct/total = [(603, 1140), (584, 1158), (554, 1127), (612, 1158), (564, 1134), (568, 1145), (578, 1145), (580, 1127), (497, 1136), (554, 1128), (605, 1144), (559, 1125), (550, 1152), (590, 1160), (576, 1124), (553, 1145), (592, 1154), (575, 1131), (587, 1157), (570, 1141)]
         : compromised: 0.5017, honest: 0.5014
Round 005: test acc mean=0.5099 ± 0.0175 | min=0.4780 max=0.5475
         : test loss mean=1498.9634 ± 3027.0255
         : individual accs = ['0.494737', '0.508636', '0.505768', '0.481002', '0.529982', '0.492576', '0.520524', '0.496007', '0.547535', '0.508865', '0.527972', '0.486222', '0.522569', '0.529310', '0.517794', '0.506550', '0.515598', '0.508400', '0.477960', '0.519720']
         : correct/total = [(564, 1140), (589, 1158), (570, 1127), (557, 1158), (601, 1134), (564, 1145), (596, 1145), (559, 1127), (622, 1136), (574, 1128), (604, 1144), (547, 1125), (602, 1152), (614, 1160), (582, 1124), (580, 1145), (595, 1154), (575, 1131), (553, 1157), (593, 1141)]
         : compromised: 0.5081, honest: 0.5107
Round 006: test acc mean=0.5052 ± 0.0236 | min=0.4366 max=0.5380
         : test loss mean=nan ± nan
         : individual accs = ['0.471053', '0.508636', '0.494232', '0.528497', '0.519400', '0.537991', '0.521397', '0.503993', '0.436620', '0.508865', '0.525350', '0.498667', '0.522569', '0.506897', '0.520463', '0.468996', '0.495667', '0.493369', '0.522904', '0.517967']
         : correct/total = [(537, 1140), (589, 1158), (557, 1127), (612, 1158), (589, 1134), (616, 1145), (597, 1145), (568, 1127), (496, 1136), (574, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (585, 1124), (537, 1145), (572, 1154), (558, 1131), (605, 1157), (591, 1141)]
         : compromised: 0.5174, honest: 0.5000
Round 007: test acc mean=0.5140 ± 0.0172 | min=0.4830 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.493103', '0.517794', '0.482969', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (572, 1160), (582, 1124), (553, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5131, honest: 0.5144
Round 008: test acc mean=0.5157 ± 0.0157 | min=0.4911 max=0.5625
         : test loss mean=0.8432 ± 0.2372
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.493103', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (572, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5131, honest: 0.5168
Round 009: test acc mean=0.5148 ± 0.0165 | min=0.4911 max=0.5625
         : test loss mean=0.7075 ± 0.0204
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.493103', '0.517794', '0.517031', '0.515598', '0.491600', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (572, 1160), (582, 1124), (592, 1145), (595, 1154), (556, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5103, honest: 0.5168
Round 010: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.6930 ± 0.0018
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.516464', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (596, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5154, honest: 0.5169

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: balance
Attack: gaussian, 30.0% compromised
Final accuracy - Compromised: 0.5154, Honest: 0.5169
Overall test accuracy: mean=0.5164 ± 0.0150

=== BALANCE SUMMARY ===
Node 0: acceptance=0.650
Node 1: acceptance=0.600
Node 2: acceptance=0.700
Node 3: acceptance=0.743
Node 4: acceptance=0.711
Node 5: acceptance=0.700
Node 6: acceptance=0.625
Node 7: acceptance=0.627
Node 8: acceptance=0.571
Node 9: acceptance=0.764
Node 10: acceptance=0.775
Node 11: acceptance=0.617
Node 12: acceptance=0.708
Node 13: acceptance=0.678
Node 14: acceptance=0.679
Node 15: acceptance=0.656
Node 16: acceptance=0.657
Node 17: acceptance=0.500
Node 18: acceptance=0.692
Node 19: acceptance=0.670

Performance Summary:
  - Distance computation time: 1.553s (43.2%)
  - Filtering time: 1.689s (47.0%)
  - Aggregation time: 0.353s (9.8%)
  - Total time: 3.594s
  - Mean acceptance rate: 0.666

BALANCE Algorithm Properties:
  - Model dimension: 30,758
  - No compression: Full parameter comparison
  - Theoretical complexity: O(deg(i)×d)
  - Approach: Full parameter filtering + averaging
