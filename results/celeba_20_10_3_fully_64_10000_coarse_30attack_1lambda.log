Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: fully, nodes: 20, edges: 190
Attack: Compromised 6/20 nodes: [5, 12, 13, 14, 17, 18]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0153 | min=0.4911 max=0.5625
         : test loss mean=1.5403 ± 0.4355
         : individual accs = ['0.528947', '0.508636', '0.492458', '0.532815', '0.522046', '0.511790', '0.520524', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.516904', '0.517031', '0.516464', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (555, 1127), (617, 1158), (592, 1134), (586, 1145), (596, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (581, 1124), (592, 1145), (596, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5148, honest: 0.5170
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.4843 ± 0.0147 | min=0.4384 max=0.5089
         : test loss mean=13.3749 ± 6.2546
         : individual accs = ['0.476316', '0.491364', '0.508429', '0.471503', '0.481481', '0.485590', '0.481223', '0.496007', '0.438380', '0.508865', '0.474650', '0.501333', '0.478299', '0.493103', '0.482206', '0.483843', '0.484402', '0.488948', '0.477960', '0.482033']
         : correct/total = [(543, 1140), (569, 1158), (573, 1127), (546, 1158), (546, 1134), (556, 1145), (551, 1145), (559, 1127), (498, 1136), (574, 1128), (543, 1144), (564, 1125), (551, 1152), (572, 1160), (542, 1124), (554, 1145), (559, 1154), (553, 1131), (553, 1157), (550, 1141)]
         : compromised: 0.4844, honest: 0.4843
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8293 ± 0.0808
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5154, honest: 0.5168
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5876 ± 0.0584 | min=0.4767 max=0.6858
         : test loss mean=1.9823 ± 1.1288
         : individual accs = ['0.500000', '0.661485', '0.612245', '0.476684', '0.519400', '0.572926', '0.572052', '0.535936', '0.610035', '0.536348', '0.620629', '0.581333', '0.685764', '0.651724', '0.540036', '0.563319', '0.649913', '0.650752', '0.655143', '0.555653']
         : correct/total = [(570, 1140), (766, 1158), (690, 1127), (552, 1158), (589, 1134), (656, 1145), (655, 1145), (604, 1127), (693, 1136), (605, 1128), (710, 1144), (654, 1125), (790, 1152), (756, 1160), (607, 1124), (645, 1145), (750, 1154), (736, 1131), (758, 1157), (634, 1141)]
         : compromised: 0.6261, honest: 0.5711
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.7336 ± 0.0223
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5154, honest: 0.5168
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.6824 ± 0.0678 | min=0.5017 max=0.7843
         : test loss mean=1.7595 ± 1.0957
         : individual accs = ['0.599123', '0.686528', '0.612245', '0.501727', '0.655203', '0.647162', '0.754585', '0.728483', '0.666373', '0.753546', '0.629371', '0.626667', '0.663194', '0.734483', '0.702847', '0.703057', '0.750433', '0.784262', '0.771824', '0.677476']
         : correct/total = [(683, 1140), (795, 1158), (690, 1127), (581, 1158), (743, 1134), (741, 1145), (864, 1145), (821, 1127), (757, 1136), (850, 1128), (720, 1144), (705, 1125), (764, 1152), (852, 1160), (790, 1124), (805, 1145), (866, 1154), (887, 1131), (893, 1157), (773, 1141)]
         : compromised: 0.7173, honest: 0.6675
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.7102 ± 0.0154
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5154, honest: 0.5168
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.7638 ± 0.0434 | min=0.6770 max=0.8354
         : test loss mean=0.9241 ± 0.3644
         : individual accs = ['0.679825', '0.734024', '0.712511', '0.759067', '0.783951', '0.731004', '0.792140', '0.677019', '0.787852', '0.735816', '0.747378', '0.733333', '0.825521', '0.808621', '0.766904', '0.779039', '0.835355', '0.795756', '0.810717', '0.780894']
         : correct/total = [(775, 1140), (850, 1158), (803, 1127), (879, 1158), (889, 1134), (837, 1145), (907, 1145), (763, 1127), (895, 1136), (830, 1128), (855, 1144), (825, 1125), (951, 1152), (938, 1160), (862, 1124), (892, 1145), (964, 1154), (900, 1131), (938, 1157), (891, 1141)]
         : compromised: 0.7898, honest: 0.7527
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.7035 ± 0.0134
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5154, honest: 0.5168
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.8085 ± 0.0352 | min=0.7289 max=0.8548
         : test loss mean=0.6442 ± 0.1921
         : individual accs = ['0.795614', '0.805699', '0.830524', '0.745250', '0.798942', '0.848035', '0.851528', '0.784383', '0.823063', '0.783688', '0.842657', '0.728889', '0.841146', '0.843966', '0.785587', '0.811354', '0.798960', '0.832007', '0.854797', '0.763365']
         : correct/total = [(907, 1140), (933, 1158), (936, 1127), (863, 1158), (906, 1134), (971, 1145), (975, 1145), (884, 1127), (935, 1136), (884, 1128), (964, 1144), (820, 1125), (969, 1152), (979, 1160), (883, 1124), (929, 1145), (922, 1154), (941, 1131), (989, 1157), (871, 1141)]
         : compromised: 0.8343, honest: 0.7974
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: fully, Aggregation: coarse
Attack: directed_deviation, 30.0% compromised
Final accuracy - Compromised: 0.8343, Honest: 0.7974
Overall test accuracy: mean=0.8085 ± 0.0352

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.044s (3.0%)
  - Filtering time: 0.014s (0.9%)
  - Aggregation time: 1.409s (96.1%)
  - Total time: 1.467s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
