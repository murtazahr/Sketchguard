Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 126
Attack: Compromised 4/20 nodes: [5, 12, 13, 17]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5177 ± 0.0172 | min=0.4911 max=0.5625
         : test loss mean=1.9129 ± 1.3045
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.556131', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517090']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (644, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (590, 1141)]
         : compromised: 0.5131, honest: 0.5189
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5159 ± 0.0153 | min=0.4911 max=0.5406
         : test loss mean=1.6524 ± 1.0643
         : individual accs = ['0.526316', '0.536269', '0.491571', '0.528497', '0.534392', '0.506550', '0.540611', '0.534161', '0.535211', '0.491135', '0.508741', '0.494222', '0.522569', '0.506897', '0.505338', '0.517904', '0.500867', '0.508400', '0.514261', '0.514461']
         : correct/total = [(600, 1140), (621, 1158), (554, 1127), (612, 1158), (606, 1134), (580, 1145), (619, 1145), (602, 1127), (608, 1136), (554, 1128), (582, 1144), (556, 1125), (602, 1152), (588, 1160), (568, 1124), (593, 1145), (578, 1154), (575, 1131), (595, 1157), (587, 1141)]
         : compromised: 0.5111, honest: 0.5171
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=1.5599 ± 0.3843
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5131, honest: 0.5172
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5421 ± 0.0374 | min=0.4911 max=0.6548
         : test loss mean=1.2280 ± 0.7575
         : individual accs = ['0.529825', '0.597582', '0.654836', '0.531952', '0.569665', '0.536245', '0.531004', '0.532387', '0.557218', '0.491135', '0.518357', '0.508444', '0.522569', '0.506897', '0.535587', '0.591266', '0.566724', '0.508400', '0.524633', '0.526731']
         : correct/total = [(604, 1140), (692, 1158), (738, 1127), (616, 1158), (646, 1134), (614, 1145), (608, 1145), (600, 1127), (633, 1136), (554, 1128), (593, 1144), (572, 1125), (602, 1152), (588, 1160), (602, 1124), (677, 1145), (654, 1154), (575, 1131), (607, 1157), (601, 1141)]
         : compromised: 0.5185, honest: 0.5480
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=1.1541 ± 0.1486
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5131, honest: 0.5172
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.5781 ± 0.0626 | min=0.5128 max=0.7657
         : test loss mean=1.3585 ± 0.9721
         : individual accs = ['0.535965', '0.642487', '0.765750', '0.689119', '0.614638', '0.570306', '0.523144', '0.566105', '0.566901', '0.598404', '0.563811', '0.513778', '0.532118', '0.553448', '0.543594', '0.634934', '0.524263', '0.512821', '0.564391', '0.546889']
         : correct/total = [(611, 1140), (744, 1158), (863, 1127), (798, 1158), (697, 1134), (653, 1145), (599, 1145), (638, 1127), (644, 1136), (675, 1128), (645, 1144), (578, 1125), (613, 1152), (642, 1160), (611, 1124), (727, 1145), (605, 1154), (580, 1131), (653, 1157), (624, 1141)]
         : compromised: 0.5422, honest: 0.5871
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=1.1058 ± 0.2070
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5131, honest: 0.5172
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.7357 ± 0.0880 | min=0.5717 max=0.8687
         : test loss mean=0.9888 ± 0.8840
         : individual accs = ['0.714035', '0.814335', '0.842059', '0.868739', '0.791887', '0.702183', '0.606987', '0.687666', '0.647887', '0.847518', '0.571678', '0.752889', '0.781250', '0.820690', '0.639680', '0.742358', '0.686308', '0.853227', '0.724287', '0.618755']
         : correct/total = [(814, 1140), (943, 1158), (949, 1127), (1006, 1158), (898, 1134), (804, 1145), (695, 1145), (775, 1127), (736, 1136), (956, 1128), (654, 1144), (847, 1125), (900, 1152), (952, 1160), (719, 1124), (850, 1145), (792, 1154), (965, 1131), (838, 1157), (706, 1141)]
         : compromised: 0.7893, honest: 0.7223
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.5339 ± 0.0456 | min=0.4933 max=0.6836
         : test loss mean=0.8971 ± 0.1977
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.640071', '0.525350', '0.498667', '0.543403', '0.683621', '0.517794', '0.517031', '0.515598', '0.511936', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (722, 1128), (601, 1144), (561, 1125), (626, 1152), (793, 1160), (582, 1124), (592, 1145), (595, 1154), (579, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5633, honest: 0.5265
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.8637 ± 0.0475 | min=0.7275 max=0.9136
         : test loss mean=0.4059 ± 0.2467
         : individual accs = ['0.878070', '0.885147', '0.884650', '0.913644', '0.894180', '0.885590', '0.727511', '0.873114', '0.790493', '0.908688', '0.775350', '0.876444', '0.896701', '0.893103', '0.816726', '0.882096', '0.878683', '0.897436', '0.867761', '0.849255']
         : correct/total = [(1001, 1140), (1025, 1158), (997, 1127), (1058, 1158), (1014, 1134), (1014, 1145), (833, 1145), (984, 1127), (898, 1136), (1025, 1128), (887, 1144), (986, 1125), (1033, 1152), (1036, 1160), (918, 1124), (1010, 1145), (1014, 1154), (1015, 1131), (1004, 1157), (969, 1141)]
         : compromised: 0.8932, honest: 0.8564
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: directed_deviation, 20.0% compromised
Final accuracy - Compromised: 0.8932, Honest: 0.8564
Overall test accuracy: mean=0.8637 ± 0.0475

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.040s (4.0%)
  - Filtering time: 0.009s (0.9%)
  - Aggregation time: 0.953s (95.1%)
  - Total time: 1.003s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
