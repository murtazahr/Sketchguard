Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: fully, nodes: 20, edges: 190
Attack: Compromised 6/20 nodes: [5, 12, 13, 14, 17, 18]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8231 ± 0.0859
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5154, honest: 0.5168
         : coarse stats = ['Node 0: acc_rate=0.684', 'Node 1: acc_rate=0.684', 'Node 2: acc_rate=0.684']...
Round 002: test acc mean=0.5164 ± 0.0149 | min=0.4911 max=0.5625
         : test loss mean=0.7695 ± 0.0758
         : individual accs = ['0.528947', '0.508636', '0.495120', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (558, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5154, honest: 0.5169
         : coarse stats = ['Node 0: acc_rate=0.684', 'Node 1: acc_rate=0.684', 'Node 2: acc_rate=0.684']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5154, honest: 0.5168
         : coarse stats = ['Node 0: acc_rate=0.789', 'Node 1: acc_rate=0.789', 'Node 2: acc_rate=0.789']...
Round 004: test acc mean=0.5070 ± 0.0185 | min=0.4774 max=0.5482
         : test loss mean=64.5716 ± 15.6662
         : individual accs = ['0.513158', '0.503454', '0.477374', '0.509499', '0.500000', '0.513537', '0.533624', '0.508429', '0.538732', '0.501773', '0.513986', '0.480889', '0.488715', '0.486207', '0.516904', '0.489956', '0.488735', '0.548187', '0.506482', '0.519720']
         : correct/total = [(585, 1140), (583, 1158), (538, 1127), (590, 1158), (567, 1134), (588, 1145), (611, 1145), (573, 1127), (612, 1136), (566, 1128), (588, 1144), (541, 1125), (563, 1152), (564, 1160), (581, 1124), (561, 1145), (564, 1154), (620, 1131), (586, 1157), (593, 1141)]
         : compromised: 0.5100, honest: 0.5057
         : coarse stats = ['Node 0: acc_rate=0.842', 'Node 1: acc_rate=0.842', 'Node 2: acc_rate=0.842']...
Round 005: test acc mean=0.5142 ± 0.0173 | min=0.4856 max=0.5660
         : test loss mean=38.9879 ± 15.4082
         : individual accs = ['0.521930', '0.529361', '0.495120', '0.522453', '0.525573', '0.485590', '0.524017', '0.522626', '0.566021', '0.492908', '0.524476', '0.499556', '0.520833', '0.493103', '0.507117', '0.512664', '0.512998', '0.508400', '0.504754', '0.515337']
         : correct/total = [(595, 1140), (613, 1158), (558, 1127), (605, 1158), (596, 1134), (556, 1145), (600, 1145), (589, 1127), (643, 1136), (556, 1128), (600, 1144), (562, 1125), (600, 1152), (572, 1160), (570, 1124), (587, 1145), (592, 1154), (575, 1131), (584, 1157), (588, 1141)]
         : compromised: 0.5033, honest: 0.5189
         : coarse stats = ['Node 0: acc_rate=0.874', 'Node 1: acc_rate=0.874', 'Node 2: acc_rate=0.874']...
Round 006: test acc mean=0.4909 ± 0.0206 | min=0.4445 max=0.5293
         : test loss mean=33.1448 ± 25.0326
         : individual accs = ['0.478070', '0.508636', '0.506655', '0.468048', '0.478836', '0.502183', '0.478603', '0.497782', '0.444542', '0.529255', '0.480769', '0.500444', '0.474826', '0.493966', '0.505338', '0.475983', '0.482669', '0.513705', '0.526361', '0.471516']
         : correct/total = [(545, 1140), (589, 1158), (571, 1127), (542, 1158), (543, 1134), (575, 1145), (548, 1145), (561, 1127), (505, 1136), (597, 1128), (550, 1144), (563, 1125), (547, 1152), (573, 1160), (568, 1124), (545, 1145), (557, 1154), (581, 1131), (609, 1157), (538, 1141)]
         : compromised: 0.5027, honest: 0.4858
         : coarse stats = ['Node 0: acc_rate=0.895', 'Node 1: acc_rate=0.895', 'Node 2: acc_rate=0.877']...
Round 007: test acc mean=0.5546 ± 0.0359 | min=0.4931 max=0.6213
         : test loss mean=0.6949 ± 0.0289
         : individual accs = ['0.533333', '0.605354', '0.509317', '0.538860', '0.568783', '0.558952', '0.565939', '0.591837', '0.598592', '0.600177', '0.530594', '0.621333', '0.522569', '0.493103', '0.536477', '0.546725', '0.593588', '0.508400', '0.535869', '0.532866']
         : correct/total = [(608, 1140), (701, 1158), (574, 1127), (624, 1158), (645, 1134), (640, 1145), (648, 1145), (667, 1127), (680, 1136), (677, 1128), (607, 1144), (699, 1125), (602, 1152), (572, 1160), (603, 1124), (626, 1145), (685, 1154), (575, 1131), (620, 1157), (608, 1141)]
         : compromised: 0.5259, honest: 0.5669
         : coarse stats = ['Node 0: acc_rate=0.865', 'Node 1: acc_rate=0.865', 'Node 2: acc_rate=0.850']...
Round 008: test acc mean=0.6234 ± 0.0408 | min=0.5095 max=0.6664
         : test loss mean=0.6451 ± 0.0243
         : individual accs = ['0.620175', '0.651123', '0.560781', '0.665803', '0.638448', '0.576419', '0.666376', '0.645075', '0.664613', '0.650709', '0.633741', '0.656889', '0.642361', '0.509483', '0.591637', '0.636681', '0.629116', '0.564103', '0.624028', '0.640666']
         : correct/total = [(707, 1140), (754, 1158), (632, 1127), (771, 1158), (724, 1134), (660, 1145), (763, 1145), (727, 1127), (755, 1136), (734, 1128), (725, 1144), (739, 1125), (740, 1152), (591, 1160), (665, 1124), (729, 1145), (726, 1154), (638, 1131), (722, 1157), (731, 1141)]
         : compromised: 0.5847, honest: 0.6400
         : coarse stats = ['Node 0: acc_rate=0.842', 'Node 1: acc_rate=0.842', 'Node 2: acc_rate=0.829']...
Round 009: test acc mean=0.7160 ± 0.0235 | min=0.6664 max=0.7456
         : test loss mean=0.5678 ± 0.0219
         : individual accs = ['0.685965', '0.740069', '0.701863', '0.740933', '0.711640', '0.671616', '0.739738', '0.694765', '0.742958', '0.709220', '0.745629', '0.736889', '0.711806', '0.666379', '0.705516', '0.737991', '0.733969', '0.702918', '0.725151', '0.714286']
         : correct/total = [(782, 1140), (857, 1158), (791, 1127), (858, 1158), (807, 1134), (769, 1145), (847, 1145), (783, 1127), (844, 1136), (800, 1128), (853, 1144), (829, 1125), (820, 1152), (773, 1160), (793, 1124), (845, 1145), (847, 1154), (795, 1131), (839, 1157), (815, 1141)]
         : compromised: 0.6972, honest: 0.7240
         : coarse stats = ['Node 0: acc_rate=0.825', 'Node 1: acc_rate=0.825', 'Node 2: acc_rate=0.813']...
Round 010: test acc mean=0.7671 ± 0.0118 | min=0.7453 max=0.7858
         : test loss mean=0.4986 ± 0.0138
         : individual accs = ['0.747368', '0.779793', '0.745342', '0.777202', '0.754850', '0.761572', '0.779039', '0.745342', '0.766725', '0.769504', '0.779720', '0.785778', '0.762153', '0.773276', '0.763345', '0.771179', '0.780763', '0.764810', '0.762316', '0.771253']
         : correct/total = [(852, 1140), (903, 1158), (840, 1127), (900, 1158), (856, 1134), (872, 1145), (892, 1145), (840, 1127), (871, 1136), (868, 1128), (892, 1144), (884, 1125), (878, 1152), (897, 1160), (858, 1124), (883, 1145), (901, 1154), (865, 1131), (882, 1157), (880, 1141)]
         : compromised: 0.7646, honest: 0.7681
         : coarse stats = ['Node 0: acc_rate=0.811', 'Node 1: acc_rate=0.811', 'Node 2: acc_rate=0.800']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: fully, Aggregation: coarse
Attack: gaussian, 30.0% compromised
Final accuracy - Compromised: 0.7646, Honest: 0.7681
Overall test accuracy: mean=0.7671 ± 0.0118

=== COARSE SUMMARY ===
Node 0: acceptance=0.811
Node 1: acceptance=0.811
Node 2: acceptance=0.800
Node 3: acceptance=0.811
Node 4: acceptance=0.805
Node 5: acceptance=0.842
Node 6: acceptance=0.811
Node 7: acceptance=0.811
Node 8: acceptance=0.805
Node 9: acceptance=0.811
Node 10: acceptance=0.811
Node 11: acceptance=0.800
Node 12: acceptance=0.832
Node 13: acceptance=0.821
Node 14: acceptance=0.842
Node 15: acceptance=0.811
Node 16: acceptance=0.811
Node 17: acceptance=0.842
Node 18: acceptance=0.816
Node 19: acceptance=0.800

Performance Summary:
  - Sketching time: 0.044s (3.5%)
  - Filtering time: 0.013s (1.0%)
  - Aggregation time: 1.189s (95.4%)
  - Total time: 1.246s
  - Mean acceptance rate: 0.815

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
