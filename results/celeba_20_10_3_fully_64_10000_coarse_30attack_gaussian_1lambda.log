Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 4500 samples per client per epoch
Graph: fully, nodes: 20, edges: 190
Degree statistics: avg=19.00, min=19, max=19
Attack: Compromised 6/20 nodes: [5, 12, 13, 14, 17, 18]
Attack type: gaussian, lambda: 1.0
Model variant: baseline
Model parameters: 2,219,692
COARSE Node 0:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 2,219,692 parameters
  - Config: COARSEConfig(gamma=2, kappa=1, alpha=0.5, min_neighbors=1, sketch_size=1000, network_seed=987654321, attack_detection_window=5)
  - Sketch size: 1000
  - Compression ratio: 2219.7x
  - Complexity: O(d + N×k) = O(2,219,692 + 20×1000)
  - Theoretical speedup vs BALANCE: 19.8x
Initial test acc across nodes: mean=0.4978 ± 0.0208
Round 001: test acc mean=0.6928 ± 0.0320 | min=0.5873 max=0.7226
         : test loss mean=0.6809 ± 0.0034
         : individual accs = ['0.712281', '0.679620', '0.671695', '0.699482', '0.587302', '0.717904', '0.696070', '0.640639', '0.713028', '0.712766', '0.689685', '0.719111', '0.716146', '0.708621', '0.665480', '0.703930', '0.715771', '0.704686', '0.722558', '0.678352']
         : correct/total = [(812, 1140), (787, 1158), (757, 1127), (810, 1158), (666, 1134), (822, 1145), (797, 1145), (722, 1127), (810, 1136), (804, 1128), (789, 1144), (809, 1125), (825, 1152), (822, 1160), (748, 1124), (806, 1145), (826, 1154), (797, 1131), (836, 1157), (774, 1141)]
         : compromised: 0.7059, honest: 0.6871
         : coarse stats = ['Node 0: acc_rate=0.684', 'Node 1: acc_rate=0.684', 'Node 2: acc_rate=0.684']...
Round 002: test acc mean=0.6476 ± 0.0518 | min=0.5220 max=0.7101
         : test loss mean=0.6788 ± 0.0050
         : individual accs = ['0.647368', '0.655440', '0.691216', '0.653713', '0.522046', '0.553712', '0.661135', '0.658385', '0.633803', '0.651596', '0.691434', '0.650667', '0.710069', '0.654310', '0.532918', '0.680349', '0.697574', '0.627763', '0.693172', '0.685364']
         : correct/total = [(738, 1140), (759, 1158), (779, 1127), (757, 1158), (592, 1134), (634, 1145), (757, 1145), (742, 1127), (720, 1136), (735, 1128), (791, 1144), (732, 1125), (818, 1152), (759, 1160), (599, 1124), (779, 1145), (805, 1154), (710, 1131), (802, 1157), (782, 1141)]
         : compromised: 0.6287, honest: 0.6557
         : coarse stats = ['Node 0: acc_rate=0.684', 'Node 1: acc_rate=0.684', 'Node 2: acc_rate=0.684']...
Round 003: test acc mean=0.6414 ± 0.0474 | min=0.5178 max=0.7036
         : test loss mean=0.6669 ± 0.0085
         : individual accs = ['0.612281', '0.663212', '0.675244', '0.662349', '0.537919', '0.577293', '0.628821', '0.641526', '0.688380', '0.678191', '0.639860', '0.657778', '0.654514', '0.682759', '0.517794', '0.637555', '0.703640', '0.626879', '0.679343', '0.662577']
         : correct/total = [(698, 1140), (768, 1158), (761, 1127), (767, 1158), (610, 1134), (661, 1145), (720, 1145), (723, 1127), (782, 1136), (765, 1128), (732, 1144), (740, 1125), (754, 1152), (792, 1160), (582, 1124), (730, 1145), (812, 1154), (709, 1131), (786, 1157), (756, 1141)]
         : compromised: 0.6231, honest: 0.6492
         : coarse stats = ['Node 0: acc_rate=0.684', 'Node 1: acc_rate=0.684', 'Node 2: acc_rate=0.684']...
Round 004: test acc mean=0.6920 ± 0.0252 | min=0.6308 max=0.7316
         : test loss mean=0.6222 ± 0.0118
         : individual accs = ['0.688596', '0.694301', '0.702751', '0.702936', '0.663139', '0.685590', '0.699563', '0.666371', '0.708627', '0.703901', '0.715035', '0.731556', '0.710069', '0.706897', '0.630783', '0.654148', '0.731369', '0.700265', '0.682800', '0.661700']
         : correct/total = [(785, 1140), (804, 1158), (792, 1127), (814, 1158), (752, 1134), (785, 1145), (801, 1145), (751, 1127), (805, 1136), (794, 1128), (818, 1144), (823, 1125), (818, 1152), (820, 1160), (709, 1124), (749, 1145), (844, 1154), (792, 1131), (790, 1157), (755, 1141)]
         : compromised: 0.6861, honest: 0.6946
         : coarse stats = ['Node 0: acc_rate=0.684', 'Node 1: acc_rate=0.684', 'Node 2: acc_rate=0.684']...
Round 005: test acc mean=0.7491 ± 0.0184 | min=0.7174 max=0.7799
         : test loss mean=0.5392 ± 0.0183
         : individual accs = ['0.722807', '0.762522', '0.723159', '0.748705', '0.735450', '0.773799', '0.764192', '0.738243', '0.745599', '0.773936', '0.754371', '0.775111', '0.730903', '0.741379', '0.733096', '0.746725', '0.779896', '0.755084', '0.717373', '0.759860']
         : correct/total = [(824, 1140), (883, 1158), (815, 1127), (867, 1158), (834, 1134), (886, 1145), (875, 1145), (832, 1127), (847, 1136), (873, 1128), (863, 1144), (872, 1125), (842, 1152), (860, 1160), (824, 1124), (855, 1145), (900, 1154), (854, 1131), (830, 1157), (867, 1141)]
         : compromised: 0.7419, honest: 0.7522
         : coarse stats = ['Node 0: acc_rate=0.684', 'Node 1: acc_rate=0.684', 'Node 2: acc_rate=0.684']...
Round 006: test acc mean=0.7864 ± 0.0160 | min=0.7622 max=0.8133
         : test loss mean=0.4658 ± 0.0180
         : individual accs = ['0.771053', '0.805699', '0.805679', '0.788428', '0.783951', '0.800000', '0.775546', '0.775510', '0.787852', '0.806738', '0.812937', '0.813333', '0.790799', '0.779310', '0.766014', '0.774672', '0.774697', '0.762157', '0.764045', '0.789658']
         : correct/total = [(879, 1140), (933, 1158), (908, 1127), (913, 1158), (889, 1134), (916, 1145), (888, 1145), (874, 1127), (895, 1136), (910, 1128), (930, 1144), (915, 1125), (911, 1152), (904, 1160), (861, 1124), (887, 1145), (894, 1154), (862, 1131), (884, 1157), (901, 1141)]
         : compromised: 0.7771, honest: 0.7904
         : coarse stats = ['Node 0: acc_rate=0.684', 'Node 1: acc_rate=0.684', 'Node 2: acc_rate=0.684']...
Round 007: test acc mean=0.8269 ± 0.0154 | min=0.7952 max=0.8489
         : test loss mean=0.3933 ± 0.0179
         : individual accs = ['0.822807', '0.848877', '0.828749', '0.820380', '0.815697', '0.841048', '0.834934', '0.822538', '0.838028', '0.847518', '0.846154', '0.848000', '0.805556', '0.827586', '0.816726', '0.802620', '0.820624', '0.816092', '0.795160', '0.838738']
         : correct/total = [(938, 1140), (983, 1158), (934, 1127), (950, 1158), (925, 1134), (963, 1145), (956, 1145), (927, 1127), (952, 1136), (956, 1128), (968, 1144), (954, 1125), (928, 1152), (960, 1160), (918, 1124), (919, 1145), (947, 1154), (923, 1131), (920, 1157), (957, 1141)]
         : compromised: 0.8170, honest: 0.8311
         : coarse stats = ['Node 0: acc_rate=0.684', 'Node 1: acc_rate=0.684', 'Node 2: acc_rate=0.684']...
Round 008: test acc mean=0.8537 ± 0.0135 | min=0.8159 max=0.8748
         : test loss mean=0.3412 ± 0.0168
         : individual accs = ['0.840351', '0.874784', '0.855368', '0.846287', '0.847443', '0.868122', '0.859389', '0.852706', '0.849472', '0.863475', '0.865385', '0.872889', '0.849826', '0.860345', '0.860320', '0.836681', '0.859619', '0.839965', '0.815903', '0.856266']
         : correct/total = [(958, 1140), (1013, 1158), (964, 1127), (980, 1158), (961, 1134), (994, 1145), (984, 1145), (961, 1127), (965, 1136), (974, 1128), (990, 1144), (982, 1125), (979, 1152), (998, 1160), (967, 1124), (958, 1145), (992, 1154), (950, 1131), (944, 1157), (977, 1141)]
         : compromised: 0.8491, honest: 0.8557
         : coarse stats = ['Node 0: acc_rate=0.684', 'Node 1: acc_rate=0.684', 'Node 2: acc_rate=0.684']...
Round 009: test acc mean=0.8716 ± 0.0129 | min=0.8392 max=0.8903
         : test loss mean=0.3071 ± 0.0197
         : individual accs = ['0.870175', '0.890328', '0.863354', '0.876511', '0.861552', '0.882096', '0.888210', '0.876664', '0.867077', '0.878546', '0.882867', '0.888889', '0.868056', '0.869828', '0.872776', '0.851528', '0.873484', '0.853227', '0.839239', '0.878177']
         : correct/total = [(992, 1140), (1031, 1158), (973, 1127), (1015, 1158), (977, 1134), (1010, 1145), (1017, 1145), (988, 1127), (985, 1136), (991, 1128), (1010, 1144), (1000, 1125), (1000, 1152), (1009, 1160), (981, 1124), (975, 1145), (1008, 1154), (965, 1131), (971, 1157), (1002, 1141)]
         : compromised: 0.8642, honest: 0.8748
         : coarse stats = ['Node 0: acc_rate=0.684', 'Node 1: acc_rate=0.684', 'Node 2: acc_rate=0.684']...
Round 010: test acc mean=0.8829 ± 0.0098 | min=0.8600 max=0.8954
         : test loss mean=0.2838 ± 0.0155
         : individual accs = ['0.878070', '0.889465', '0.876664', '0.888601', '0.878307', '0.890830', '0.890830', '0.885537', '0.882042', '0.895390', '0.885490', '0.895111', '0.881944', '0.891379', '0.889680', '0.861135', '0.886482', '0.869142', '0.859983', '0.882559']
         : correct/total = [(1001, 1140), (1030, 1158), (988, 1127), (1029, 1158), (996, 1134), (1020, 1145), (1020, 1145), (998, 1127), (1002, 1136), (1010, 1128), (1013, 1144), (1007, 1125), (1016, 1152), (1034, 1160), (1000, 1124), (986, 1145), (1023, 1154), (983, 1131), (995, 1157), (1007, 1141)]
         : compromised: 0.8805, honest: 0.8840
         : coarse stats = ['Node 0: acc_rate=0.684', 'Node 1: acc_rate=0.684', 'Node 2: acc_rate=0.684']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: fully, Aggregation: coarse
Attack: gaussian, 30.0% compromised
Final accuracy - Compromised: 0.8805, Honest: 0.8840
Overall test accuracy: mean=0.8829 ± 0.0098

=== COARSE SUMMARY ===
Node 0: acceptance=0.684
Node 1: acceptance=0.684
Node 2: acceptance=0.684
Node 3: acceptance=0.684
Node 4: acceptance=0.684
Node 5: acceptance=0.737
Node 6: acceptance=0.684
Node 7: acceptance=0.684
Node 8: acceptance=0.684
Node 9: acceptance=0.684
Node 10: acceptance=0.684
Node 11: acceptance=0.684
Node 12: acceptance=0.737
Node 13: acceptance=0.737
Node 14: acceptance=0.737
Node 15: acceptance=0.684
Node 16: acceptance=0.684
Node 17: acceptance=0.737
Node 18: acceptance=0.737
Node 19: acceptance=0.684

=== PARALLEL EXECUTION TIME (realistic for distributed system) ===
  COMMUNICATION (max across nodes):
    - Sketch transfer: 0.000s (0.0%)
    - Model fetch (accepted): 0.000s (0.0%)
  COMPUTATION (max across nodes):
    - Sketching: 0.262s (90.8%)
    - Filtering: 0.001s (0.4%)
    - Aggregation: 0.025s (8.8%)
  TOTALS:
    - Total computation: 0.288s (100.0%)
    - Total communication: 0.000s (0.0%)
    - Total parallel time: 0.288s

=== PER-NODE AVERAGE TIME ===
  - Sketching: 0.179s
  - Filtering: 0.001s
  - Aggregation: 0.016s
  - Sketch transfer: 0.000s
  - Model fetch: 0.000s
  - Total per node: 0.196s

=== TOTAL COMPUTATIONAL WORK (sum across all nodes) ===
  - Total sketching: 3.579s
  - Total filtering: 0.017s
  - Total aggregation: 0.319s
  - Total sketch transfer: 0.000s
  - Total model fetch: 0.000s
  - Grand total: 3.915s
  - Mean acceptance rate: 0.700

COARSE Algorithm Properties:
  - Original dimension: 2,219,692
  - Sketch size: 1000
  - Compression ratio: 19.8x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
