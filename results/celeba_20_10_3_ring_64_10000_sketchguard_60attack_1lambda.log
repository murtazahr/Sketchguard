Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Projects/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Projects/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 4500 samples per client per epoch
Graph: ring, nodes: 20, edges: 20
Degree statistics: avg=2.00, min=2, max=2
Attack: Compromised 12/20 nodes: [1, 2, 3, 5, 8, 11, 12, 13, 14, 15, 17, 18]
Attack type: directed_deviation, lambda: 1.0
Model variant: baseline
Model parameters: 2,219,692
COARSE Node 0:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 2,219,692 parameters
  - Config: COARSEConfig(gamma=2, kappa=1, alpha=0.5, min_neighbors=1, sketch_size=1000, network_seed=987654321, attack_detection_window=5)
  - Sketch size: 1000
  - Compression ratio: 2219.7x
  - Complexity: O(d + N×k) = O(2,219,692 + 20×1000)
  - Theoretical speedup vs BALANCE: 19.8x
Initial test acc across nodes: mean=0.4978 ± 0.0208
Round 001: test acc mean=0.5863 ± 0.0782 | min=0.4685 max=0.7185
         : test loss mean=911.2151 ± 1542.1659
         : individual accs = ['0.578070', '0.670121', '0.468500', '0.643351', '0.481481', '0.550218', '0.555459', '0.520852', '0.711268', '0.676418', '0.718531', '0.670222', '0.520833', '0.513793', '0.513345', '0.632314', '0.484402', '0.583554', '0.655143', '0.577564']
         : correct/total = [(659, 1140), (776, 1158), (528, 1127), (745, 1158), (546, 1134), (630, 1145), (636, 1145), (587, 1127), (808, 1136), (763, 1128), (822, 1144), (754, 1125), (600, 1152), (596, 1160), (577, 1124), (724, 1145), (559, 1154), (660, 1131), (758, 1157), (659, 1141)]
         : compromised: 0.5944, honest: 0.5741
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.000']...
Round 002: test acc mean=0.6412 ± 0.1159 | min=0.4933 max=0.7858
         : test loss mean=nan ± nan
         : individual accs = ['0.742105', '0.734888', '0.493345', '0.528497', '0.522046', '0.703057', '0.742358', '0.716060', '0.734155', '0.776596', '0.785839', '0.752000', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.743302', '0.760736']
         : correct/total = [(846, 1140), (851, 1158), (556, 1127), (612, 1158), (592, 1134), (805, 1145), (850, 1145), (807, 1127), (834, 1136), (876, 1128), (899, 1144), (846, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (860, 1157), (868, 1141)]
         : compromised: 0.6052, honest: 0.6952
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.000']...
Round 003: test acc mean=0.6853 ± 0.1559 | min=0.4933 max=0.8776
         : test loss mean=nan ± nan
         : individual accs = ['0.835088', '0.816926', '0.493345', '0.528497', '0.522046', '0.802620', '0.803493', '0.803017', '0.786092', '0.865248', '0.877622', '0.853333', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.797753', '0.831727']
         : correct/total = [(952, 1140), (946, 1158), (556, 1127), (612, 1158), (592, 1134), (919, 1145), (920, 1145), (905, 1127), (893, 1136), (976, 1128), (1004, 1144), (960, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (923, 1157), (949, 1141)]
         : compromised: 0.6376, honest: 0.7567
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.000']...
Round 004: test acc mean=0.7089 ± 0.1760 | min=0.4933 max=0.8830
         : test loss mean=nan ± nan
         : individual accs = ['0.864912', '0.878238', '0.493345', '0.528497', '0.522046', '0.864629', '0.871616', '0.859805', '0.851232', '0.882979', '0.882867', '0.876444', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.845290', '0.868536']
         : correct/total = [(986, 1140), (1017, 1158), (556, 1127), (612, 1158), (592, 1134), (990, 1145), (998, 1145), (969, 1127), (967, 1136), (996, 1128), (1010, 1144), (986, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (978, 1157), (991, 1141)]
         : compromised: 0.6592, honest: 0.7835
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.000']...
Round 005: test acc mean=0.7093 ± 0.1771 | min=0.4933 max=0.9012
         : test loss mean=nan ± nan
         : individual accs = ['0.838596', '0.855786', '0.493345', '0.528497', '0.522046', '0.874236', '0.888210', '0.881100', '0.826585', '0.895390', '0.901224', '0.896000', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.835782', '0.860649']
         : correct/total = [(956, 1140), (991, 1158), (556, 1127), (612, 1158), (592, 1134), (1001, 1145), (1017, 1145), (993, 1127), (939, 1136), (1010, 1128), (1031, 1144), (1008, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (967, 1157), (982, 1141)]
         : compromised: 0.6569, honest: 0.7879
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.000']...
Round 006: test acc mean=0.7202 ± 0.1861 | min=0.4933 max=0.9066
         : test loss mean=nan ± nan
         : individual accs = ['0.890351', '0.890328', '0.493345', '0.528497', '0.522046', '0.895197', '0.906550', '0.886424', '0.870599', '0.886525', '0.891608', '0.896000', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.873812', '0.884312']
         : correct/total = [(1015, 1140), (1031, 1158), (556, 1127), (612, 1158), (592, 1134), (1025, 1145), (1038, 1145), (999, 1127), (989, 1136), (1000, 1128), (1020, 1144), (1008, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (1011, 1157), (1009, 1141)]
         : compromised: 0.6684, honest: 0.7979
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.000']...
Round 007: test acc mean=0.7259 ± 0.1913 | min=0.4933 max=0.9102
         : test loss mean=nan ± nan
         : individual accs = ['0.896491', '0.897237', '0.493345', '0.528497', '0.522046', '0.904803', '0.900437', '0.901508', '0.888204', '0.906028', '0.902972', '0.910222', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.881590', '0.896582']
         : correct/total = [(1022, 1140), (1039, 1158), (556, 1127), (612, 1158), (592, 1134), (1036, 1145), (1031, 1145), (1016, 1127), (1009, 1136), (1022, 1128), (1033, 1144), (1024, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (1020, 1157), (1023, 1141)]
         : compromised: 0.6730, honest: 0.8052
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.000']...
Round 008: test acc mean=0.7239 ± 0.1894 | min=0.4933 max=0.9111
         : test loss mean=nan ± nan
         : individual accs = ['0.892105', '0.895509', '0.493345', '0.528497', '0.522046', '0.900437', '0.898690', '0.901508', '0.889085', '0.895390', '0.895979', '0.911111', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.878997', '0.886065']
         : correct/total = [(1017, 1140), (1037, 1158), (556, 1127), (612, 1158), (592, 1134), (1031, 1145), (1029, 1145), (1016, 1127), (1010, 1136), (1010, 1128), (1025, 1144), (1025, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (1017, 1157), (1011, 1141)]
         : compromised: 0.6725, honest: 0.8009
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.000']...
Round 009: test acc mean=0.7256 ± 0.1911 | min=0.4933 max=0.9102
         : test loss mean=nan ± nan
         : individual accs = ['0.901754', '0.888601', '0.493345', '0.528497', '0.522046', '0.903057', '0.906550', '0.904170', '0.902289', '0.897163', '0.899476', '0.910222', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.871219', '0.895706']
         : correct/total = [(1028, 1140), (1029, 1158), (556, 1127), (612, 1158), (592, 1134), (1034, 1145), (1038, 1145), (1019, 1127), (1025, 1136), (1012, 1128), (1029, 1144), (1024, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (1008, 1157), (1022, 1141)]
         : compromised: 0.6725, honest: 0.8053
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.000']...
Round 010: test acc mean=0.7270 ± 0.1922 | min=0.4933 max=0.9093
         : test loss mean=nan ± nan
         : individual accs = ['0.900000', '0.905872', '0.493345', '0.528497', '0.522046', '0.895197', '0.895197', '0.905945', '0.900528', '0.899823', '0.906469', '0.909333', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.888505', '0.901840']
         : correct/total = [(1026, 1140), (1049, 1158), (556, 1127), (612, 1158), (592, 1134), (1025, 1145), (1025, 1145), (1021, 1127), (1023, 1136), (1015, 1128), (1037, 1144), (1023, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (1028, 1157), (1029, 1141)]
         : compromised: 0.6745, honest: 0.8059
         : sketchguard stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: ring, Aggregation: sketchguard
Attack: directed_deviation, 60.0% compromised
Final accuracy - Compromised: 0.6745, Honest: 0.8059
Overall test accuracy: mean=0.7270 ± 0.1922

=== COARSE SUMMARY ===
Node 0: acceptance=0.500
Node 1: acceptance=0.500
Node 2: acceptance=0.000
Node 3: acceptance=0.050
Node 4: acceptance=0.000
Node 5: acceptance=0.550
Node 6: acceptance=0.500
Node 7: acceptance=0.500
Node 8: acceptance=0.750
Node 9: acceptance=0.500
Node 10: acceptance=0.500
Node 11: acceptance=0.500
Node 12: acceptance=0.000
Node 13: acceptance=0.000
Node 14: acceptance=0.000
Node 15: acceptance=0.050
Node 16: acceptance=0.000
Node 17: acceptance=0.050
Node 18: acceptance=0.500
Node 19: acceptance=0.500

=== PARALLEL EXECUTION TIME (realistic for distributed system) ===
  COMMUNICATION (max across nodes):
    - Sketch transfer: 0.000s (0.0%)
    - Model fetch (accepted): 0.000s (0.0%)
  COMPUTATION (max across nodes):
    - Sketching: 0.391s (96.6%)
    - Filtering: 0.001s (0.2%)
    - Aggregation: 0.013s (3.2%)
  TOTALS:
    - Total computation: 0.405s (100.0%)
    - Total communication: 0.000s (0.0%)
    - Total parallel time: 0.405s

=== PER-NODE AVERAGE TIME ===
  - Sketching: 0.237s
  - Filtering: 0.000s
  - Aggregation: 0.006s
  - Sketch transfer: 0.000s
  - Model fetch: 0.000s
  - Total per node: 0.244s

=== TOTAL COMPUTATIONAL WORK (sum across all nodes) ===
  - Total sketching: 4.741s
  - Total filtering: 0.009s
  - Total aggregation: 0.123s
  - Total sketch transfer: 0.000s
  - Total model fetch: 0.000s
  - Grand total: 4.873s
  - Mean acceptance rate: 0.297

COARSE Algorithm Properties:
  - Original dimension: 2,219,692
  - Sketch size: 1000
  - Compression ratio: 19.8x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
