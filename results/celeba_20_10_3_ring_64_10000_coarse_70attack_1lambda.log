Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: ring, nodes: 20, edges: 20
Attack: Compromised 14/20 nodes: [1, 2, 3, 5, 6, 8, 11, 12, 13, 14, 15, 17, 18, 19]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5144 ± 0.0177 | min=0.4715 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.525043', '0.493345', '0.471503', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.515556', '0.522569', '0.506897', '0.517794', '0.501310', '0.515598', '0.507515', '0.522040', '0.518843']
         : correct/total = [(603, 1140), (608, 1158), (556, 1127), (546, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (580, 1125), (602, 1152), (588, 1160), (582, 1124), (574, 1145), (595, 1154), (574, 1131), (604, 1157), (592, 1141)]
         : compromised: 0.5143, honest: 0.5145
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.4999 ± 0.0239 | min=0.4632 max=0.5625
         : test loss mean=26.4425 ± 35.7013
         : individual accs = ['0.501754', '0.508636', '0.463177', '0.523316', '0.524691', '0.475109', '0.491703', '0.471162', '0.562500', '0.504433', '0.493007', '0.491556', '0.473958', '0.499138', '0.477758', '0.517031', '0.488735', '0.501326', '0.488332', '0.539877']
         : correct/total = [(572, 1140), (589, 1158), (522, 1127), (606, 1158), (595, 1134), (544, 1145), (563, 1145), (531, 1127), (639, 1136), (569, 1128), (564, 1144), (553, 1125), (546, 1152), (579, 1160), (537, 1124), (592, 1145), (564, 1154), (567, 1131), (565, 1157), (616, 1141)]
         : compromised: 0.5010, honest: 0.4973
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5190 ± 0.0214 | min=0.4911 max=0.5960
         : test loss mean=1.0295 ± 0.4941
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.542328', '0.514410', '0.521397', '0.503993', '0.595951', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (615, 1134), (589, 1145), (597, 1145), (568, 1127), (677, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5195, honest: 0.5179
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5311 ± 0.0540 | min=0.4694 max=0.7157
         : test loss mean=4.6647 ± 4.2226
         : individual accs = ['0.496491', '0.574266', '0.469388', '0.540587', '0.507937', '0.523144', '0.542358', '0.474712', '0.715669', '0.590426', '0.580420', '0.511111', '0.488715', '0.516379', '0.480427', '0.524891', '0.485269', '0.534041', '0.521175', '0.545136']
         : correct/total = [(566, 1140), (665, 1158), (529, 1127), (626, 1158), (576, 1134), (599, 1145), (621, 1145), (535, 1127), (813, 1136), (666, 1128), (664, 1144), (575, 1125), (563, 1152), (599, 1160), (540, 1124), (601, 1145), (560, 1154), (604, 1131), (603, 1157), (622, 1141)]
         : compromised: 0.5348, honest: 0.5225
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5307 ± 0.0701 | min=0.4911 max=0.8319
         : test loss mean=0.8641 ± 0.3016
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.538801', '0.514410', '0.521397', '0.503993', '0.831866', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (611, 1134), (589, 1145), (597, 1145), (568, 1127), (945, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5364, honest: 0.5173
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.5610 ± 0.0710 | min=0.4849 max=0.7931
         : test loss mean=nan ± nan
         : individual accs = ['0.519298', '0.592401', '0.503993', '0.615717', '0.540564', '0.522271', '0.535371', '0.503993', '0.793134', '0.603723', '0.614510', '0.502222', '0.497396', '0.511207', '0.484875', '0.577293', '0.528596', '0.634836', '0.521175', '0.617879']
         : correct/total = [(592, 1140), (686, 1158), (568, 1127), (713, 1158), (613, 1134), (598, 1145), (613, 1145), (568, 1127), (901, 1136), (681, 1128), (703, 1144), (565, 1125), (573, 1152), (593, 1160), (545, 1124), (661, 1145), (610, 1154), (718, 1131), (603, 1157), (705, 1141)]
         : compromised: 0.5650, honest: 0.5518
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.5313 ± 0.0717 | min=0.4911 max=0.8389
         : test loss mean=0.8663 ± 0.3086
         : individual accs = ['0.528947', '0.508636', '0.491571', '0.528497', '0.546737', '0.514410', '0.521397', '0.503993', '0.838908', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (554, 1127), (612, 1158), (620, 1134), (589, 1145), (597, 1145), (568, 1127), (953, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5368, honest: 0.5186
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.5718 ± 0.0768 | min=0.4862 max=0.8231
         : test loss mean=nan ± nan
         : individual accs = ['0.546491', '0.617444', '0.495120', '0.637306', '0.575838', '0.543231', '0.552838', '0.503993', '0.823063', '0.647163', '0.606643', '0.518222', '0.501736', '0.486207', '0.500000', '0.543231', '0.621317', '0.567639', '0.521175', '0.627520']
         : correct/total = [(623, 1140), (715, 1158), (558, 1127), (738, 1158), (653, 1134), (622, 1145), (633, 1145), (568, 1127), (935, 1136), (730, 1128), (694, 1144), (583, 1125), (578, 1152), (564, 1160), (562, 1124), (622, 1145), (717, 1154), (642, 1131), (603, 1157), (716, 1141)]
         : compromised: 0.5668, honest: 0.5836
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.5315 ± 0.0725 | min=0.4911 max=0.8424
         : test loss mean=0.8721 ± 0.2681
         : individual accs = ['0.528947', '0.508636', '0.492458', '0.528497', '0.546737', '0.514410', '0.521397', '0.503993', '0.842430', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (555, 1127), (612, 1158), (620, 1134), (589, 1145), (597, 1145), (568, 1127), (957, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5371, honest: 0.5186
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.5772 ± 0.0790 | min=0.4852 max=0.8319
         : test loss mean=5.0726 ± 4.9728
         : individual accs = ['0.534211', '0.596718', '0.496007', '0.626943', '0.608466', '0.530131', '0.558952', '0.523514', '0.831866', '0.669326', '0.658217', '0.532444', '0.485243', '0.494828', '0.509786', '0.569432', '0.600520', '0.582670', '0.518583', '0.615250']
         : correct/total = [(609, 1140), (691, 1158), (559, 1127), (726, 1158), (690, 1134), (607, 1145), (640, 1145), (590, 1127), (945, 1136), (755, 1128), (753, 1144), (599, 1125), (559, 1152), (574, 1160), (573, 1124), (652, 1145), (693, 1154), (659, 1131), (600, 1157), (702, 1141)]
         : compromised: 0.5678, honest: 0.5990
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: ring, Aggregation: coarse
Attack: directed_deviation, 70.0% compromised
Final accuracy - Compromised: 0.5678, Honest: 0.5990
Overall test accuracy: mean=0.5772 ± 0.0790

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.050s (18.5%)
  - Filtering time: 0.003s (1.2%)
  - Aggregation time: 0.218s (80.3%)
  - Total time: 0.271s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
