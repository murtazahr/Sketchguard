Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 126
Attack: Compromised 16/20 nodes: [1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
Attack type: gaussian, lambda: 1.0
BALANCE algorithm:
  - Model dimension: 30,758 parameters
  - Complexity: O(N×d) = O(20×30,758)
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8748 ± 0.0898
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5160, honest: 0.5176
Round 002: test acc mean=0.5395 ± 0.0877 | min=0.4911 max=0.9119
         : test loss mean=0.7612 ± 0.1457
         : individual accs = ['0.529825', '0.508636', '0.493345', '0.911917', '0.523810', '0.514410', '0.521397', '0.578527', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.517331', '0.508400', '0.522040', '0.517967']
         : correct/total = [(604, 1140), (589, 1158), (556, 1127), (1056, 1158), (594, 1134), (589, 1145), (597, 1145), (652, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (597, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5400, honest: 0.5374
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5160, honest: 0.5176
Round 004: test acc mean=0.4972 ± 0.0264 | min=0.4480 max=0.5553
         : test loss mean=809.6669 ± 697.4291
         : individual accs = ['0.456140', '0.487047', '0.492458', '0.494819', '0.498236', '0.448035', '0.521397', '0.533274', '0.502641', '0.455674', '0.476399', '0.501333', '0.529514', '0.493966', '0.482206', '0.482969', '0.515598', '0.555261', '0.499568', '0.517967']
         : correct/total = [(520, 1140), (564, 1158), (555, 1127), (573, 1158), (565, 1134), (513, 1145), (597, 1145), (601, 1127), (571, 1136), (514, 1128), (545, 1144), (564, 1125), (610, 1152), (573, 1160), (542, 1124), (553, 1145), (595, 1154), (628, 1131), (578, 1157), (591, 1141)]
         : compromised: 0.4963, honest: 0.5008
Round 005: test acc mean=0.5048 ± 0.0207 | min=0.4714 max=0.5599
         : test loss mean=232.3754 ± 199.0055
         : individual accs = ['0.524561', '0.512953', '0.486247', '0.471503', '0.512346', '0.499563', '0.506550', '0.503993', '0.559859', '0.507092', '0.474650', '0.497778', '0.471354', '0.518103', '0.517794', '0.510044', '0.519931', '0.491600', '0.523768', '0.487292']
         : correct/total = [(598, 1140), (594, 1158), (548, 1127), (546, 1158), (581, 1134), (572, 1145), (580, 1145), (568, 1127), (636, 1136), (572, 1128), (543, 1144), (560, 1125), (543, 1152), (601, 1160), (582, 1124), (584, 1145), (600, 1154), (556, 1131), (606, 1157), (556, 1141)]
         : compromised: 0.5023, honest: 0.5152
Round 006: test acc mean=0.5044 ± 0.0180 | min=0.4747 max=0.5380
         : test loss mean=631.8795 ± 830.5160
         : individual accs = ['0.528070', '0.506908', '0.494232', '0.496546', '0.500000', '0.537991', '0.510917', '0.502218', '0.477993', '0.486702', '0.474650', '0.534222', '0.528646', '0.502586', '0.509786', '0.517031', '0.488735', '0.498674', '0.478825', '0.513585']
         : correct/total = [(602, 1140), (587, 1158), (557, 1127), (575, 1158), (567, 1134), (616, 1145), (585, 1145), (566, 1127), (543, 1136), (549, 1128), (543, 1144), (601, 1125), (609, 1152), (583, 1160), (573, 1124), (592, 1145), (564, 1154), (564, 1131), (554, 1157), (586, 1141)]
         : compromised: 0.5043, honest: 0.5048
Round 007: test acc mean=0.5010 ± 0.0221 | min=0.4711 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.471053', '0.508636', '0.495120', '0.528497', '0.477954', '0.485590', '0.478603', '0.496007', '0.562500', '0.508865', '0.525350', '0.501333', '0.477431', '0.506897', '0.482206', '0.517031', '0.484402', '0.508400', '0.522040', '0.482033']
         : correct/total = [(537, 1140), (589, 1158), (558, 1127), (612, 1158), (542, 1134), (556, 1145), (548, 1145), (559, 1127), (639, 1136), (574, 1128), (601, 1144), (564, 1125), (550, 1152), (588, 1160), (542, 1124), (592, 1145), (559, 1154), (575, 1131), (604, 1157), (550, 1141)]
         : compromised: 0.5057, honest: 0.4824
Round 008: test acc mean=0.4963 ± 0.0277 | min=0.4375 max=0.5771
         : test loss mean=1.1659 ± 1.0174
         : individual accs = ['0.529825', '0.491364', '0.493345', '0.528497', '0.521164', '0.485590', '0.478603', '0.510204', '0.437500', '0.508865', '0.474650', '0.501333', '0.477431', '0.493103', '0.482206', '0.482969', '0.577123', '0.491600', '0.477960', '0.482033']
         : correct/total = [(604, 1140), (569, 1158), (556, 1127), (612, 1158), (591, 1134), (556, 1145), (548, 1145), (575, 1127), (497, 1136), (574, 1128), (543, 1144), (564, 1125), (550, 1152), (572, 1160), (542, 1124), (553, 1145), (666, 1154), (556, 1131), (553, 1157), (550, 1141)]
         : compromised: 0.4867, honest: 0.5346
Round 009: test acc mean=0.5340 ± 0.0502 | min=0.4786 max=0.6273
         : test loss mean=0.7347 ± 0.0776
         : individual accs = ['0.611404', '0.491364', '0.493345', '0.516408', '0.622575', '0.485590', '0.478603', '0.627329', '0.585387', '0.546986', '0.547203', '0.502222', '0.537326', '0.506897', '0.482206', '0.482969', '0.615251', '0.491600', '0.536733', '0.517967']
         : correct/total = [(697, 1140), (569, 1158), (556, 1127), (598, 1158), (706, 1134), (556, 1145), (548, 1145), (707, 1127), (665, 1136), (617, 1128), (626, 1144), (565, 1125), (619, 1152), (588, 1160), (542, 1124), (553, 1145), (710, 1154), (556, 1131), (621, 1157), (591, 1141)]
         : compromised: 0.5127, honest: 0.6191
Round 010: test acc mean=0.6743 ± 0.0681 | min=0.4914 max=0.7487
         : test loss mean=0.6074 ± 0.0839
         : individual accs = ['0.715789', '0.491364', '0.506655', '0.642487', '0.716049', '0.701310', '0.735371', '0.732919', '0.667254', '0.719858', '0.651224', '0.731556', '0.684028', '0.692241', '0.656584', '0.620087', '0.748700', '0.732980', '0.675886', '0.663453']
         : correct/total = [(816, 1140), (569, 1158), (571, 1127), (744, 1158), (812, 1134), (803, 1145), (842, 1145), (826, 1127), (758, 1136), (812, 1128), (745, 1144), (823, 1125), (788, 1152), (803, 1160), (738, 1124), (710, 1145), (864, 1154), (829, 1131), (782, 1157), (757, 1141)]
         : compromised: 0.6608, honest: 0.7284

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: balance
Attack: gaussian, 80.0% compromised
Final accuracy - Compromised: 0.6608, Honest: 0.7284
Overall test accuracy: mean=0.6743 ± 0.0681

=== BALANCE SUMMARY ===
Node 0: acceptance=0.487
Node 1: acceptance=0.473
Node 2: acceptance=0.450
Node 3: acceptance=0.475
Node 4: acceptance=0.564
Node 5: acceptance=0.460
Node 6: acceptance=0.486
Node 7: acceptance=0.486
Node 8: acceptance=0.520
Node 9: acceptance=0.554
Node 10: acceptance=0.533
Node 11: acceptance=0.514
Node 12: acceptance=0.542
Node 13: acceptance=0.531
Node 14: acceptance=0.507
Node 15: acceptance=0.509
Node 16: acceptance=0.492
Node 17: acceptance=0.600
Node 18: acceptance=0.506
Node 19: acceptance=0.487

Performance Summary:
  - Distance computation time: 1.975s (44.3%)
  - Filtering time: 2.115s (47.4%)
  - Aggregation time: 0.367s (8.2%)
  - Total time: 4.458s
  - Mean acceptance rate: 0.509

BALANCE Algorithm Properties:
  - Model dimension: 30,758
  - No compression: Full parameter comparison
  - Theoretical complexity: O(deg(i)×d)
  - Approach: Full parameter filtering + averaging
