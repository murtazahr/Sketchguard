Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: fully, nodes: 20, edges: 190
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8318 ± 0.0777
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.7721 ± 0.0689
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5185 ± 0.0159 | min=0.4911 max=0.5625
         : test loss mean=0.7025 ± 0.0643
         : individual accs = ['0.532456', '0.508636', '0.493345', '0.528497', '0.525573', '0.524891', '0.523144', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.532986', '0.506897', '0.517794', '0.517031', '0.528596', '0.508400', '0.522040', '0.518843']
         : correct/total = [(607, 1140), (589, 1158), (556, 1127), (612, 1158), (596, 1134), (601, 1145), (599, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (614, 1152), (588, 1160), (582, 1124), (592, 1145), (610, 1154), (575, 1131), (604, 1157), (592, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5309 ± 0.0234 | min=0.4911 max=0.5913
         : test loss mean=0.6485 ± 0.0348
         : individual accs = ['0.528947', '0.508636', '0.506655', '0.556131', '0.540564', '0.536245', '0.591266', '0.507542', '0.565141', '0.491135', '0.527098', '0.536889', '0.561632', '0.514655', '0.524911', '0.517031', '0.543328', '0.511052', '0.527226', '0.522349']
         : correct/total = [(603, 1140), (589, 1158), (571, 1127), (644, 1158), (613, 1134), (614, 1145), (677, 1145), (572, 1127), (642, 1136), (554, 1128), (603, 1144), (604, 1125), (647, 1152), (597, 1160), (590, 1124), (592, 1145), (627, 1154), (578, 1131), (610, 1157), (596, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5551 ± 0.0436 | min=0.4920 max=0.6513
         : test loss mean=0.6260 ± 0.0325
         : individual accs = ['0.528947', '0.517271', '0.651287', '0.560449', '0.565256', '0.604367', '0.636681', '0.517303', '0.580106', '0.492021', '0.529720', '0.542222', '0.636285', '0.525862', '0.532028', '0.543231', '0.537262', '0.510168', '0.549697', '0.541630']
         : correct/total = [(603, 1140), (599, 1158), (734, 1127), (649, 1158), (641, 1134), (692, 1145), (729, 1145), (583, 1127), (659, 1136), (555, 1128), (606, 1144), (610, 1125), (733, 1152), (610, 1160), (598, 1124), (622, 1145), (620, 1154), (577, 1131), (636, 1157), (618, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.6690 ± 0.0601 | min=0.5760 max=0.7995
         : test loss mean=0.5598 ± 0.0261
         : individual accs = ['0.666667', '0.575993', '0.696539', '0.742660', '0.622575', '0.715284', '0.682096', '0.691216', '0.731514', '0.594858', '0.607517', '0.616000', '0.799479', '0.710345', '0.617438', '0.715284', '0.644714', '0.580902', '0.640449', '0.729185']
         : correct/total = [(760, 1140), (667, 1158), (785, 1127), (860, 1158), (706, 1134), (819, 1145), (781, 1145), (779, 1127), (831, 1136), (671, 1128), (695, 1144), (693, 1125), (921, 1152), (824, 1160), (694, 1124), (819, 1145), (744, 1154), (657, 1131), (741, 1157), (832, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.7247 ± 0.0513 | min=0.6250 max=0.8124
         : test loss mean=0.5364 ± 0.0254
         : individual accs = ['0.699123', '0.693437', '0.714286', '0.764249', '0.744268', '0.733624', '0.710917', '0.751553', '0.790493', '0.625000', '0.665210', '0.812444', '0.795139', '0.727586', '0.647687', '0.642795', '0.697574', '0.749779', '0.749352', '0.779141']
         : correct/total = [(797, 1140), (803, 1158), (805, 1127), (885, 1158), (844, 1134), (840, 1145), (814, 1145), (847, 1127), (898, 1136), (705, 1128), (761, 1144), (914, 1125), (916, 1152), (844, 1160), (728, 1124), (736, 1145), (805, 1154), (848, 1131), (867, 1157), (889, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.7604 ± 0.0516 | min=0.6516 max=0.8329
         : test loss mean=0.5183 ± 0.0276
         : individual accs = ['0.714035', '0.722798', '0.758651', '0.790155', '0.802469', '0.776419', '0.793886', '0.814552', '0.802817', '0.651596', '0.727273', '0.832889', '0.824653', '0.778448', '0.794484', '0.662882', '0.710572', '0.805482', '0.713051', '0.730061']
         : correct/total = [(814, 1140), (837, 1158), (855, 1127), (915, 1158), (910, 1134), (889, 1145), (909, 1145), (918, 1127), (912, 1136), (735, 1128), (832, 1144), (937, 1125), (950, 1152), (903, 1160), (893, 1124), (759, 1145), (820, 1154), (911, 1131), (825, 1157), (833, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.7929 ± 0.0443 | min=0.6978 max=0.8729
         : test loss mean=0.4857 ± 0.0276
         : individual accs = ['0.762281', '0.751295', '0.822538', '0.850604', '0.799824', '0.826201', '0.815721', '0.797693', '0.744718', '0.767730', '0.770105', '0.872889', '0.866319', '0.841379', '0.776690', '0.697817', '0.733969', '0.794872', '0.778738', '0.787029']
         : correct/total = [(869, 1140), (870, 1158), (927, 1127), (985, 1158), (907, 1134), (946, 1145), (934, 1145), (899, 1127), (846, 1136), (866, 1128), (881, 1144), (982, 1125), (998, 1152), (976, 1160), (873, 1124), (799, 1145), (847, 1154), (899, 1131), (901, 1157), (898, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.8305 ± 0.0295 | min=0.7834 max=0.8984
         : test loss mean=0.4503 ± 0.0278
         : individual accs = ['0.803509', '0.786701', '0.850044', '0.852332', '0.836861', '0.853275', '0.839301', '0.814552', '0.813380', '0.788121', '0.844406', '0.885333', '0.898438', '0.831897', '0.831851', '0.783406', '0.807626', '0.838196', '0.814175', '0.836985']
         : correct/total = [(916, 1140), (911, 1158), (958, 1127), (987, 1158), (949, 1134), (977, 1145), (961, 1145), (918, 1127), (924, 1136), (889, 1128), (966, 1144), (996, 1125), (1035, 1152), (965, 1160), (935, 1124), (897, 1145), (932, 1154), (948, 1131), (942, 1157), (955, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: fully, Aggregation: coarse
Overall test accuracy: mean=0.8305 ± 0.0295

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.036s (2.5%)
  - Filtering time: 0.013s (0.9%)
  - Aggregation time: 1.429s (96.7%)
  - Total time: 1.478s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
