Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: fully, nodes: 20, edges: 190
Attack: Compromised 16/20 nodes: [1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
Attack type: gaussian, lambda: 1.0
BALANCE algorithm:
  - Model dimension: 30,758 parameters
  - Complexity: O(N×d) = O(20×30,758)
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8490 ± 0.0810
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5160, honest: 0.5176
Round 002: test acc mean=0.5181 ± 0.0153 | min=0.4911 max=0.5625
         : test loss mean=0.7793 ± 0.0716
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.523810', '0.514410', '0.521397', '0.535049', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.517331', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (594, 1134), (589, 1145), (597, 1145), (603, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (597, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5160, honest: 0.5263
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5160, honest: 0.5176
Round 004: test acc mean=0.5046 ± 0.0182 | min=0.4711 max=0.5484
         : test loss mean=539.5514 ± 365.3217
         : individual accs = ['0.471053', '0.507772', '0.496894', '0.528497', '0.522046', '0.500437', '0.478603', '0.503993', '0.548415', '0.495567', '0.524476', '0.498667', '0.483507', '0.493966', '0.496441', '0.494323', '0.515598', '0.492485', '0.522040', '0.517090']
         : correct/total = [(537, 1140), (588, 1158), (560, 1127), (612, 1158), (592, 1134), (573, 1145), (548, 1145), (568, 1127), (623, 1136), (559, 1128), (600, 1144), (561, 1125), (557, 1152), (573, 1160), (558, 1124), (566, 1145), (595, 1154), (557, 1131), (604, 1157), (590, 1141)]
         : compromised: 0.5049, honest: 0.5032
Round 005: test acc mean=0.5027 ± 0.0222 | min=0.4786 max=0.5634
         : test loss mean=176.3156 ± 122.1072
         : individual accs = ['0.496491', '0.496546', '0.545697', '0.487047', '0.483245', '0.496070', '0.478603', '0.503993', '0.563380', '0.510638', '0.488636', '0.526222', '0.480035', '0.501724', '0.517794', '0.482969', '0.483536', '0.508400', '0.519447', '0.482910']
         : correct/total = [(566, 1140), (575, 1158), (615, 1127), (564, 1158), (548, 1134), (568, 1145), (548, 1145), (568, 1127), (640, 1136), (576, 1128), (559, 1144), (592, 1125), (553, 1152), (582, 1160), (582, 1124), (553, 1145), (558, 1154), (575, 1131), (601, 1157), (551, 1141)]
         : compromised: 0.5054, honest: 0.4918
Round 006: test acc mean=0.4994 ± 0.0171 | min=0.4657 max=0.5251
         : test loss mean=254.3644 ± 242.8642
         : individual accs = ['0.499123', '0.492228', '0.506655', '0.474957', '0.515873', '0.485590', '0.493450', '0.508429', '0.465669', '0.491135', '0.523601', '0.501333', '0.470486', '0.505172', '0.517794', '0.482969', '0.525130', '0.511052', '0.521175', '0.495180']
         : correct/total = [(569, 1140), (570, 1158), (571, 1127), (550, 1158), (585, 1134), (556, 1145), (565, 1145), (573, 1127), (529, 1136), (554, 1128), (599, 1144), (564, 1125), (542, 1152), (586, 1160), (582, 1124), (553, 1145), (606, 1154), (578, 1131), (603, 1157), (565, 1141)]
         : compromised: 0.4962, honest: 0.5121
Round 007: test acc mean=0.4990 ± 0.0226 | min=0.4375 max=0.5289
         : test loss mean=1.2036 ± 0.7797
         : individual accs = ['0.528947', '0.508636', '0.506655', '0.528497', '0.477954', '0.514410', '0.478603', '0.519965', '0.437500', '0.491135', '0.474650', '0.501333', '0.522569', '0.506897', '0.482206', '0.517031', '0.515598', '0.508400', '0.477960', '0.482033']
         : correct/total = [(603, 1140), (589, 1158), (571, 1127), (612, 1158), (542, 1134), (589, 1145), (548, 1145), (586, 1127), (497, 1136), (554, 1128), (543, 1144), (564, 1125), (602, 1152), (588, 1160), (542, 1124), (592, 1145), (595, 1154), (575, 1131), (553, 1157), (550, 1141)]
         : compromised: 0.4962, honest: 0.5106
Round 008: test acc mean=0.5178 ± 0.0127 | min=0.5013 max=0.5625
         : test loss mean=0.7104 ± 0.0245
         : individual accs = ['0.523684', '0.508636', '0.506655', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.508865', '0.525350', '0.501333', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(597, 1140), (589, 1158), (571, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (574, 1128), (601, 1144), (564, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5181, honest: 0.5163
Round 009: test acc mean=0.5211 ± 0.0214 | min=0.4933 max=0.5773
         : test loss mean=0.6972 ± 0.0162
         : individual accs = ['0.529825', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.556332', '0.503993', '0.562500', '0.494681', '0.525350', '0.498667', '0.577257', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(604, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (637, 1145), (568, 1127), (639, 1136), (558, 1128), (601, 1144), (561, 1125), (665, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5219, honest: 0.5179
Round 010: test acc mean=0.5332 ± 0.0378 | min=0.4902 max=0.6254
         : test loss mean=0.6960 ± 0.0219
         : individual accs = ['0.546491', '0.568221', '0.493345', '0.528497', '0.522046', '0.514410', '0.621834', '0.503993', '0.562500', '0.490248', '0.525350', '0.498667', '0.573785', '0.506897', '0.625445', '0.517031', '0.515598', '0.508400', '0.522040', '0.518843']
         : correct/total = [(623, 1140), (658, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (712, 1145), (568, 1127), (639, 1136), (553, 1128), (601, 1144), (561, 1125), (661, 1152), (588, 1160), (703, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (592, 1141)]
         : compromised: 0.5360, honest: 0.5220

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: fully, Aggregation: balance
Attack: gaussian, 80.0% compromised
Final accuracy - Compromised: 0.5360, Honest: 0.5220
Overall test accuracy: mean=0.5332 ± 0.0378

=== BALANCE SUMMARY ===
Node 0: acceptance=0.489
Node 1: acceptance=0.516
Node 2: acceptance=0.516
Node 3: acceptance=0.526
Node 4: acceptance=0.484
Node 5: acceptance=0.521
Node 6: acceptance=0.521
Node 7: acceptance=0.489
Node 8: acceptance=0.511
Node 9: acceptance=0.516
Node 10: acceptance=0.516
Node 11: acceptance=0.521
Node 12: acceptance=0.521
Node 13: acceptance=0.511
Node 14: acceptance=0.521
Node 15: acceptance=0.516
Node 16: acceptance=0.489
Node 17: acceptance=0.526
Node 18: acceptance=0.516
Node 19: acceptance=0.521

Performance Summary:
  - Distance computation time: 3.014s (45.3%)
  - Filtering time: 3.162s (47.5%)
  - Aggregation time: 0.477s (7.2%)
  - Total time: 6.653s
  - Mean acceptance rate: 0.512

BALANCE Algorithm Properties:
  - Model dimension: 30,758
  - No compression: Full parameter comparison
  - Theoretical complexity: O(deg(i)×d)
  - Approach: Full parameter filtering + averaging
