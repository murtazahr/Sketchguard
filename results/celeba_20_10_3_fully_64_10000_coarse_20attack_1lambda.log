Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: fully, nodes: 20, edges: 190
Attack: Compromised 4/20 nodes: [5, 12, 13, 17]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=1.3729 ± 0.2644
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5131, honest: 0.5172
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5170 ± 0.0152 | min=0.4911 max=0.5625
         : test loss mean=2.3996 ± 0.9770
         : individual accs = ['0.527193', '0.510363', '0.492458', '0.532815', '0.522928', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.522530', '0.508400', '0.522904', '0.517967']
         : correct/total = [(601, 1140), (591, 1158), (555, 1127), (617, 1158), (593, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (603, 1154), (575, 1131), (605, 1157), (591, 1141)]
         : compromised: 0.5131, honest: 0.5179
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5094 ± 0.0192 | min=0.4375 max=0.5281
         : test loss mean=0.7226 ± 0.0385
         : individual accs = ['0.528070', '0.508636', '0.494232', '0.520725', '0.514991', '0.514410', '0.521397', '0.503993', '0.437500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(602, 1140), (589, 1158), (557, 1127), (603, 1158), (584, 1134), (589, 1145), (597, 1145), (568, 1127), (497, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5131, honest: 0.5084
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5552 ± 0.0457 | min=0.5071 max=0.6425
         : test loss mean=1.1581 ± 0.4125
         : individual accs = ['0.552632', '0.636442', '0.538598', '0.642487', '0.526455', '0.530131', '0.521397', '0.513753', '0.599472', '0.507092', '0.525350', '0.627556', '0.526042', '0.507759', '0.520463', '0.588646', '0.631716', '0.530504', '0.544512', '0.533742']
         : correct/total = [(630, 1140), (737, 1158), (607, 1127), (744, 1158), (597, 1134), (607, 1145), (597, 1145), (579, 1127), (681, 1136), (572, 1128), (601, 1144), (706, 1125), (606, 1152), (589, 1160), (585, 1124), (674, 1145), (729, 1154), (600, 1131), (630, 1157), (609, 1141)]
         : compromised: 0.5236, honest: 0.5631
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5149 ± 0.0114 | min=0.4911 max=0.5326
         : test loss mean=0.7586 ± 0.0506
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.532570', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (605, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5131, honest: 0.5153
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.7227 ± 0.0520 | min=0.6348 max=0.7945
         : test loss mean=0.6534 ± 0.1514
         : individual accs = ['0.755263', '0.791019', '0.775510', '0.794473', '0.636684', '0.792140', '0.686463', '0.686779', '0.714789', '0.775709', '0.659965', '0.669333', '0.742188', '0.657759', '0.778470', '0.724891', '0.733969', '0.634836', '0.707001', '0.736196']
         : correct/total = [(861, 1140), (916, 1158), (874, 1127), (920, 1158), (722, 1134), (907, 1145), (786, 1145), (774, 1127), (812, 1136), (875, 1128), (755, 1144), (753, 1125), (855, 1152), (763, 1160), (875, 1124), (830, 1145), (847, 1154), (718, 1131), (818, 1157), (840, 1141)]
         : compromised: 0.7067, honest: 0.7267
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.5193 ± 0.0207 | min=0.4911 max=0.5968
         : test loss mean=0.7031 ± 0.0453
         : individual accs = ['0.528947', '0.508636', '0.494232', '0.529361', '0.522046', '0.515284', '0.521397', '0.522626', '0.596831', '0.491135', '0.527098', '0.498667', '0.522569', '0.506897', '0.518683', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (557, 1127), (613, 1158), (592, 1134), (590, 1145), (597, 1145), (589, 1127), (678, 1136), (554, 1128), (603, 1144), (561, 1125), (602, 1152), (588, 1160), (583, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5133, honest: 0.5208
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.8369 ± 0.0360 | min=0.7433 max=0.8802
         : test loss mean=0.4126 ± 0.1144
         : individual accs = ['0.798246', '0.856649', '0.866016', '0.854922', '0.825397', '0.876856', '0.780786', '0.858030', '0.775528', '0.847518', '0.853147', '0.859556', '0.880208', '0.856034', '0.834520', '0.824454', '0.836222', '0.877984', '0.743302', '0.832603']
         : correct/total = [(910, 1140), (992, 1158), (976, 1127), (990, 1158), (936, 1134), (1004, 1145), (894, 1145), (967, 1127), (881, 1136), (956, 1128), (976, 1144), (967, 1125), (1014, 1152), (993, 1160), (938, 1124), (944, 1145), (965, 1154), (993, 1131), (860, 1157), (950, 1141)]
         : compromised: 0.8728, honest: 0.8279
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.5679 ± 0.0302 | min=0.5213 max=0.6206
         : test loss mean=0.6234 ± 0.0350
         : individual accs = ['0.538596', '0.594128', '0.553682', '0.562176', '0.544092', '0.541485', '0.557205', '0.608696', '0.604754', '0.521277', '0.620629', '0.576889', '0.580729', '0.588793', '0.583630', '0.528384', '0.548527', '0.547303', '0.620570', '0.535495']
         : correct/total = [(614, 1140), (688, 1158), (624, 1127), (651, 1158), (617, 1134), (620, 1145), (638, 1145), (686, 1127), (687, 1136), (588, 1128), (710, 1144), (649, 1125), (669, 1152), (683, 1160), (656, 1124), (605, 1145), (633, 1154), (619, 1131), (718, 1157), (611, 1141)]
         : compromised: 0.5646, honest: 0.5687
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.8738 ± 0.0138 | min=0.8376 max=0.8941
         : test loss mean=0.3396 ± 0.0436
         : individual accs = ['0.874561', '0.871330', '0.837622', '0.871330', '0.890653', '0.889956', '0.866376', '0.885537', '0.876761', '0.877660', '0.870629', '0.880000', '0.894097', '0.869828', '0.862100', '0.864629', '0.880416', '0.875332', '0.847018', '0.890447']
         : correct/total = [(997, 1140), (1009, 1158), (944, 1127), (1009, 1158), (1010, 1134), (1019, 1145), (992, 1145), (998, 1127), (996, 1136), (990, 1128), (996, 1144), (990, 1125), (1030, 1152), (1009, 1160), (969, 1124), (990, 1145), (1016, 1154), (990, 1131), (980, 1157), (1016, 1141)]
         : compromised: 0.8823, honest: 0.8717
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: fully, Aggregation: coarse
Attack: directed_deviation, 20.0% compromised
Final accuracy - Compromised: 0.8823, Honest: 0.8717
Overall test accuracy: mean=0.8738 ± 0.0138

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.041s (2.8%)
  - Filtering time: 0.013s (0.9%)
  - Aggregation time: 1.397s (96.3%)
  - Total time: 1.450s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
