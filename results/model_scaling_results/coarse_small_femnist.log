# Model Scaling Experiment
# Algorithm: coarse
# Model variant: small
# Dataset: femnist
# Timestamp: 2025-09-22T22:29:08.960257
# Device: CPU (forced for consistent performance)
# Command: python decentralized_fl_sim.py --dataset femnist --model-variant small --rounds 3 --local-epochs 1 --seed 42 --batch-size 32 --lr 0.01 --agg coarse --attack-percentage 0.5 --attack-type directed_deviation --verbose --graph ring --num-nodes 20
================================================================================

Device: cpu
Seed: 42
Loading 36 LEAF FEMNIST train files...
LEAF FEMNIST train: 3597 users, 734463 samples
Loading 36 LEAF FEMNIST test files...
LEAF FEMNIST test: 3597 users, 83388 samples
Found 3597 train users, 3597 test users, 3597 common users
User sample counts range: 525 (max) to 17 (min)
Distributed ALL 3597 users across 20 clients
Users per client: 179 (with 17 clients getting +1 user)
Train partition sizes: [37676, 37670, 37261, 34625, 36810, 35667, 37466, 36404, 36175, 36710, 37122, 37538, 35969, 37590, 36705, 36474, 36699, 37182, 36951, 35769]
Test partition sizes: [4275, 4276, 4227, 3941, 4171, 4051, 4253, 4138, 4112, 4169, 4218, 4252, 4082, 4263, 4169, 4143, 4173, 4221, 4187, 4067]
  Client 0: 37676 train samples, 62 unique classes
  Client 1: 37670 train samples, 62 unique classes
  Client 2: 37261 train samples, 62 unique classes
  Client 3: 34625 train samples, 62 unique classes
  Client 4: 36810 train samples, 62 unique classes
  Client 5: 35667 train samples, 62 unique classes
  Client 6: 37466 train samples, 62 unique classes
  Client 7: 36404 train samples, 62 unique classes
  Client 8: 36175 train samples, 62 unique classes
  Client 9: 36710 train samples, 62 unique classes
  Client 10: 37122 train samples, 62 unique classes
  Client 11: 37538 train samples, 62 unique classes
  Client 12: 35969 train samples, 62 unique classes
  Client 13: 37590 train samples, 62 unique classes
  Client 14: 36705 train samples, 62 unique classes
  Client 15: 36474 train samples, 62 unique classes
  Client 16: 36699 train samples, 62 unique classes
  Client 17: 37182 train samples, 62 unique classes
  Client 18: 36951 train samples, 62 unique classes
  Client 19: 35769 train samples, 62 unique classes
Graph: ring, nodes: 20, edges: 20
Degree statistics: avg=2.00, min=2, max=2
Attack: Compromised 10/20 nodes: [0, 1, 2, 3, 7, 8, 10, 11, 16, 17]
Attack type: directed_deviation, lambda: 1.0
Model variant: small
Model parameters: 848,382
COARSE Node 0:
  Model dim: 848,382 → Sketch size: 1000
  Compression ratio: 848.4x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 848,382 → Sketch size: 1000
  Compression ratio: 848.4x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 848,382 → Sketch size: 1000
  Compression ratio: 848.4x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 848,382 → Sketch size: 1000
  Compression ratio: 848.4x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 848,382 → Sketch size: 1000
  Compression ratio: 848.4x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 848,382 → Sketch size: 1000
  Compression ratio: 848.4x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 848,382 → Sketch size: 1000
  Compression ratio: 848.4x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 848,382 → Sketch size: 1000
  Compression ratio: 848.4x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 848,382 → Sketch size: 1000
  Compression ratio: 848.4x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 848,382 → Sketch size: 1000
  Compression ratio: 848.4x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 848,382 → Sketch size: 1000
  Compression ratio: 848.4x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 848,382 → Sketch size: 1000
  Compression ratio: 848.4x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 848,382 → Sketch size: 1000
  Compression ratio: 848.4x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 848,382 → Sketch size: 1000
  Compression ratio: 848.4x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 848,382 → Sketch size: 1000
  Compression ratio: 848.4x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 848,382 → Sketch size: 1000
  Compression ratio: 848.4x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 848,382 → Sketch size: 1000
  Compression ratio: 848.4x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 848,382 → Sketch size: 1000
  Compression ratio: 848.4x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 848,382 → Sketch size: 1000
  Compression ratio: 848.4x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 848,382 → Sketch size: 1000
  Compression ratio: 848.4x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 848,382 parameters
  - Sketch size: 1000
  - Compression ratio: 848.4x
  - Complexity: O(d + N×k) = O(848,382 + 20×1000)
  - Theoretical speedup vs BALANCE: 19.5x
Initial test acc across nodes: mean=0.0194 ± 0.0148
Round 001: test acc mean=0.4432 ± 0.1848 | min=0.0239 max=0.6296
         : test loss mean=475.8698 ± 1193.2083
         : individual accs = ['0.512749', '0.024088', '0.023894', '0.567622', '0.629585', '0.420884', '0.431225', '0.455776', '0.589251', '0.024226', '0.608345', '0.549389', '0.514699', '0.468684', '0.455745', '0.465605', '0.508986', '0.574508', '0.533079', '0.505532']
         : correct/total = [(2192, 4275), (103, 4276), (101, 4227), (2237, 3941), (2626, 4171), (1705, 4051), (1834, 4253), (1886, 4138), (2423, 4112), (101, 4169), (2566, 4218), (2336, 4252), (2101, 4082), (1998, 4263), (1900, 4169), (1929, 4143), (2124, 4173), (2425, 4221), (2232, 4187), (2056, 4067)]
         : compromised: 0.4415, honest: 0.4449
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.000', 'Node 2: acc_rate=0.000']...
Round 002: test acc mean=0.5884 ± 0.3261 | min=0.0040 max=0.8027
         : test loss mean=361594100.1169 ± 1546680564.5892
         : individual accs = ['0.753216', '0.034144', '0.035013', '0.774423', '0.788060', '0.802518', '0.796849', '0.715321', '0.005107', '0.047973', '0.004030', '0.768579', '0.781235', '0.789819', '0.794675', '0.795076', '0.760604', '0.721156', '0.802723', '0.797394']
         : correct/total = [(3220, 4275), (146, 4276), (148, 4227), (3052, 3941), (3287, 4171), (3251, 4051), (3389, 4253), (2960, 4138), (21, 4112), (200, 4169), (17, 4218), (3268, 4252), (3189, 4082), (3367, 4263), (3313, 4169), (3294, 4143), (3174, 4173), (3044, 4221), (3361, 4187), (3243, 4067)]
         : compromised: 0.4572, honest: 0.7196
         : coarse stats = ['Node 0: acc_rate=0.250', 'Node 1: acc_rate=0.250', 'Node 2: acc_rate=0.500']...
Round 003: test acc mean=0.6264 ± 0.3331 | min=0.0367 max=0.8398
         : test loss mean=53919.7285 ± 175523.6856
         : individual accs = ['0.815673', '0.051918', '0.057961', '0.799543', '0.839847', '0.828437', '0.824124', '0.805945', '0.049368', '0.036699', '0.052157', '0.810207', '0.811367', '0.821487', '0.817462', '0.811972', '0.807812', '0.825871', '0.828995', '0.830834']
         : correct/total = [(3487, 4275), (222, 4276), (245, 4227), (3151, 3941), (3503, 4171), (3356, 4051), (3505, 4253), (3335, 4138), (203, 4112), (153, 4169), (220, 4218), (3445, 4252), (3312, 4082), (3502, 4263), (3408, 4169), (3364, 4143), (3371, 4173), (3486, 4221), (3471, 4187), (3379, 4067)]
         : compromised: 0.5076, honest: 0.7451
         : coarse stats = ['Node 0: acc_rate=0.333', 'Node 1: acc_rate=0.167', 'Node 2: acc_rate=0.333']...

=== FINAL RESULTS ===
Dataset: femnist, Nodes: 20, Graph: ring, Aggregation: coarse
Attack: directed_deviation, 50.0% compromised
Final accuracy - Compromised: 0.5076, Honest: 0.7451
Overall test accuracy: mean=0.6264 ± 0.3331

=== COARSE SUMMARY ===
Node 0: acceptance=0.333
Node 1: acceptance=0.167
Node 2: acceptance=0.333
Node 3: acceptance=0.333
Node 4: acceptance=0.333
Node 5: acceptance=0.667
Node 6: acceptance=0.500
Node 7: acceptance=0.167
Node 8: acceptance=0.167
Node 9: acceptance=0.667
Node 10: acceptance=0.000
Node 11: acceptance=0.167
Node 12: acceptance=0.500
Node 13: acceptance=0.667
Node 14: acceptance=0.333
Node 15: acceptance=0.500
Node 16: acceptance=0.333
Node 17: acceptance=0.333
Node 18: acceptance=0.500
Node 19: acceptance=0.333

=== PARALLEL EXECUTION TIME (realistic for distributed system) ===
  COMMUNICATION (max across nodes):
    - Sketch transfer: 0.000s (0.0%)
    - Model fetch (accepted): 0.000s (0.0%)
  COMPUTATION (max across nodes):
    - Sketching: 0.037s (87.1%)
    - Filtering: 0.000s (0.8%)
    - Aggregation: 0.005s (12.1%)
  TOTALS:
    - Total computation: 0.042s (100.0%)
    - Total communication: 0.000s (0.0%)
    - Total parallel time: 0.043s

=== PER-NODE AVERAGE TIME ===
  - Sketching: 0.030s
  - Filtering: 0.000s
  - Aggregation: 0.003s
  - Sketch transfer: 0.000s
  - Model fetch: 0.000s
  - Total per node: 0.033s

=== TOTAL COMPUTATIONAL WORK (sum across all nodes) ===
  - Total sketching: 0.598s
  - Total filtering: 0.002s
  - Total aggregation: 0.051s
  - Total sketch transfer: 0.000s
  - Total model fetch: 0.000s
  - Grand total: 0.650s
  - Mean acceptance rate: 0.367

COARSE Algorithm Properties:
  - Original dimension: 848,382
  - Sketch size: 1000
  - Compression ratio: 19.5x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation


# Experiment completed successfully
