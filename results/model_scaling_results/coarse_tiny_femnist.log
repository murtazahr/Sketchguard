# Model Scaling Experiment
# Algorithm: coarse
# Model variant: tiny
# Dataset: femnist
# Timestamp: 2025-09-22T22:11:09.149818
# Device: CPU (forced for consistent performance)
# Command: python decentralized_fl_sim.py --dataset femnist --model-variant tiny --rounds 3 --local-epochs 1 --seed 42 --batch-size 32 --lr 0.01 --agg coarse --attack-percentage 0.5 --attack-type directed_deviation --verbose --graph ring --num-nodes 20
================================================================================

Device: cpu
Seed: 42
Loading 36 LEAF FEMNIST train files...
LEAF FEMNIST train: 3597 users, 734463 samples
Loading 36 LEAF FEMNIST test files...
LEAF FEMNIST test: 3597 users, 83388 samples
Found 3597 train users, 3597 test users, 3597 common users
User sample counts range: 525 (max) to 17 (min)
Distributed ALL 3597 users across 20 clients
Users per client: 179 (with 17 clients getting +1 user)
Train partition sizes: [37676, 37670, 37261, 34625, 36810, 35667, 37466, 36404, 36175, 36710, 37122, 37538, 35969, 37590, 36705, 36474, 36699, 37182, 36951, 35769]
Test partition sizes: [4275, 4276, 4227, 3941, 4171, 4051, 4253, 4138, 4112, 4169, 4218, 4252, 4082, 4263, 4169, 4143, 4173, 4221, 4187, 4067]
  Client 0: 37676 train samples, 62 unique classes
  Client 1: 37670 train samples, 62 unique classes
  Client 2: 37261 train samples, 62 unique classes
  Client 3: 34625 train samples, 62 unique classes
  Client 4: 36810 train samples, 62 unique classes
  Client 5: 35667 train samples, 62 unique classes
  Client 6: 37466 train samples, 62 unique classes
  Client 7: 36404 train samples, 62 unique classes
  Client 8: 36175 train samples, 62 unique classes
  Client 9: 36710 train samples, 62 unique classes
  Client 10: 37122 train samples, 62 unique classes
  Client 11: 37538 train samples, 62 unique classes
  Client 12: 35969 train samples, 62 unique classes
  Client 13: 37590 train samples, 62 unique classes
  Client 14: 36705 train samples, 62 unique classes
  Client 15: 36474 train samples, 62 unique classes
  Client 16: 36699 train samples, 62 unique classes
  Client 17: 37182 train samples, 62 unique classes
  Client 18: 36951 train samples, 62 unique classes
  Client 19: 35769 train samples, 62 unique classes
Graph: ring, nodes: 20, edges: 20
Degree statistics: avg=2.00, min=2, max=2
Attack: Compromised 10/20 nodes: [0, 1, 2, 3, 7, 8, 10, 11, 16, 17]
Attack type: directed_deviation, lambda: 1.0
Model variant: tiny
Model parameters: 220,318
COARSE Node 0:
  Model dim: 220,318 → Sketch size: 1000
  Compression ratio: 220.3x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 220,318 → Sketch size: 1000
  Compression ratio: 220.3x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 220,318 → Sketch size: 1000
  Compression ratio: 220.3x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 220,318 → Sketch size: 1000
  Compression ratio: 220.3x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 220,318 → Sketch size: 1000
  Compression ratio: 220.3x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 220,318 → Sketch size: 1000
  Compression ratio: 220.3x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 220,318 → Sketch size: 1000
  Compression ratio: 220.3x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 220,318 → Sketch size: 1000
  Compression ratio: 220.3x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 220,318 → Sketch size: 1000
  Compression ratio: 220.3x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 220,318 → Sketch size: 1000
  Compression ratio: 220.3x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 220,318 → Sketch size: 1000
  Compression ratio: 220.3x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 220,318 → Sketch size: 1000
  Compression ratio: 220.3x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 220,318 → Sketch size: 1000
  Compression ratio: 220.3x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 220,318 → Sketch size: 1000
  Compression ratio: 220.3x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 220,318 → Sketch size: 1000
  Compression ratio: 220.3x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 220,318 → Sketch size: 1000
  Compression ratio: 220.3x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 220,318 → Sketch size: 1000
  Compression ratio: 220.3x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 220,318 → Sketch size: 1000
  Compression ratio: 220.3x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 220,318 → Sketch size: 1000
  Compression ratio: 220.3x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 220,318 → Sketch size: 1000
  Compression ratio: 220.3x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 220,318 parameters
  - Sketch size: 1000
  - Compression ratio: 220.3x
  - Complexity: O(d + N×k) = O(220,318 + 20×1000)
  - Theoretical speedup vs BALANCE: 18.3x
Initial test acc across nodes: mean=0.0124 ± 0.0103
Round 001: test acc mean=0.3467 ± 0.1631 | min=0.0031 max=0.5500
         : test loss mean=191.2286 ± 462.1250
         : individual accs = ['0.395088', '0.013096', '0.017980', '0.207308', '0.436586', '0.549988', '0.399718', '0.510875', '0.387889', '0.003118', '0.230204', '0.438852', '0.371877', '0.443115', '0.404174', '0.468260', '0.481428', '0.499408', '0.338906', '0.336858']
         : correct/total = [(1689, 4275), (56, 4276), (76, 4227), (817, 3941), (1821, 4171), (2228, 4051), (1700, 4253), (2114, 4138), (1595, 4112), (13, 4169), (971, 4218), (1866, 4252), (1518, 4082), (1889, 4263), (1685, 4169), (1940, 4143), (2009, 4173), (2108, 4221), (1419, 4187), (1370, 4067)]
         : compromised: 0.3182, honest: 0.3753
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.000', 'Node 2: acc_rate=0.000']...
Round 002: test acc mean=0.5412 ± 0.3039 | min=0.0034 max=0.7843
         : test loss mean=1540542.6190 ± 4865970.9005
         : individual accs = ['0.658947', '0.047007', '0.051573', '0.673433', '0.769600', '0.761294', '0.764872', '0.627840', '0.003405', '0.017750', '0.004267', '0.612183', '0.742038', '0.769646', '0.770209', '0.585807', '0.735442', '0.661692', '0.784332', '0.783378']
         : correct/total = [(2817, 4275), (201, 4276), (218, 4227), (2654, 3941), (3210, 4171), (3084, 4051), (3253, 4253), (2598, 4138), (14, 4112), (74, 4169), (18, 4218), (2603, 4252), (3029, 4082), (3281, 4263), (3211, 4169), (2427, 4143), (3069, 4173), (2793, 4221), (3284, 4187), (3186, 4067)]
         : compromised: 0.4076, honest: 0.6749
         : coarse stats = ['Node 0: acc_rate=0.250', 'Node 1: acc_rate=0.000', 'Node 2: acc_rate=0.250']...
Round 003: test acc mean=0.6045 ± 0.3306 | min=0.0045 max=0.8243
         : test loss mean=242495.9673 ± 1056762.0518
         : individual accs = ['0.778947', '0.012862', '0.004495', '0.785334', '0.824263', '0.802024', '0.797555', '0.765829', '0.049368', '0.045574', '0.052157', '0.791392', '0.797893', '0.819611', '0.807148', '0.767560', '0.763240', '0.796020', '0.815381', '0.812638']
         : correct/total = [(3330, 4275), (55, 4276), (19, 4227), (3095, 3941), (3438, 4171), (3249, 4051), (3392, 4253), (3169, 4138), (203, 4112), (190, 4169), (220, 4218), (3365, 4252), (3257, 4082), (3494, 4263), (3365, 4169), (3180, 4143), (3185, 4173), (3360, 4221), (3414, 4187), (3305, 4067)]
         : compromised: 0.4800, honest: 0.7290
         : coarse stats = ['Node 0: acc_rate=0.333', 'Node 1: acc_rate=0.000', 'Node 2: acc_rate=0.167']...

=== FINAL RESULTS ===
Dataset: femnist, Nodes: 20, Graph: ring, Aggregation: coarse
Attack: directed_deviation, 50.0% compromised
Final accuracy - Compromised: 0.4800, Honest: 0.7290
Overall test accuracy: mean=0.6045 ± 0.3306

=== COARSE SUMMARY ===
Node 0: acceptance=0.333
Node 1: acceptance=0.000
Node 2: acceptance=0.167
Node 3: acceptance=0.000
Node 4: acceptance=0.500
Node 5: acceptance=1.000
Node 6: acceptance=0.500
Node 7: acceptance=0.333
Node 8: acceptance=0.000
Node 9: acceptance=0.667
Node 10: acceptance=0.167
Node 11: acceptance=0.167
Node 12: acceptance=0.500
Node 13: acceptance=1.000
Node 14: acceptance=0.500
Node 15: acceptance=0.167
Node 16: acceptance=0.333
Node 17: acceptance=0.167
Node 18: acceptance=0.500
Node 19: acceptance=0.500

=== PARALLEL EXECUTION TIME (realistic for distributed system) ===
  COMMUNICATION (max across nodes):
    - Sketch transfer: 0.000s (0.1%)
    - Model fetch (accepted): 0.000s (0.0%)
  COMPUTATION (max across nodes):
    - Sketching: 0.012s (79.6%)
    - Filtering: 0.000s (2.2%)
    - Aggregation: 0.003s (18.1%)
  TOTALS:
    - Total computation: 0.015s (99.9%)
    - Total communication: 0.000s (0.1%)
    - Total parallel time: 0.015s

=== PER-NODE AVERAGE TIME ===
  - Sketching: 0.008s
  - Filtering: 0.000s
  - Aggregation: 0.001s
  - Sketch transfer: 0.000s
  - Model fetch: 0.000s
  - Total per node: 0.010s

=== TOTAL COMPUTATIONAL WORK (sum across all nodes) ===
  - Total sketching: 0.161s
  - Total filtering: 0.002s
  - Total aggregation: 0.028s
  - Total sketch transfer: 0.000s
  - Total model fetch: 0.000s
  - Grand total: 0.191s
  - Mean acceptance rate: 0.375

COARSE Algorithm Properties:
  - Original dimension: 220,318
  - Sketch size: 1000
  - Compression ratio: 18.3x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation


# Experiment completed successfully
