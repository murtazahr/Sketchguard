# Model Scaling Experiment
# Algorithm: coarse
# Model variant: large
# Dataset: femnist
# Timestamp: 2025-09-22T23:17:15.350306
# Device: CPU (forced for consistent performance)
# Command: python decentralized_fl_sim.py --dataset femnist --model-variant large --rounds 3 --local-epochs 1 --seed 42 --batch-size 32 --lr 0.01 --agg coarse --attack-percentage 0.5 --attack-type directed_deviation --verbose --graph ring --num-nodes 20
================================================================================

Device: cpu
Seed: 42
Loading 36 LEAF FEMNIST train files...
LEAF FEMNIST train: 3597 users, 734463 samples
Loading 36 LEAF FEMNIST test files...
LEAF FEMNIST test: 3597 users, 83388 samples
Found 3597 train users, 3597 test users, 3597 common users
User sample counts range: 525 (max) to 17 (min)
Distributed ALL 3597 users across 20 clients
Users per client: 179 (with 17 clients getting +1 user)
Train partition sizes: [37676, 37670, 37261, 34625, 36810, 35667, 37466, 36404, 36175, 36710, 37122, 37538, 35969, 37590, 36705, 36474, 36699, 37182, 36951, 35769]
Test partition sizes: [4275, 4276, 4227, 3941, 4171, 4051, 4253, 4138, 4112, 4169, 4218, 4252, 4082, 4263, 4169, 4143, 4173, 4221, 4187, 4067]
  Client 0: 37676 train samples, 62 unique classes
  Client 1: 37670 train samples, 62 unique classes
  Client 2: 37261 train samples, 62 unique classes
  Client 3: 34625 train samples, 62 unique classes
  Client 4: 36810 train samples, 62 unique classes
  Client 5: 35667 train samples, 62 unique classes
  Client 6: 37466 train samples, 62 unique classes
  Client 7: 36404 train samples, 62 unique classes
  Client 8: 36175 train samples, 62 unique classes
  Client 9: 36710 train samples, 62 unique classes
  Client 10: 37122 train samples, 62 unique classes
  Client 11: 37538 train samples, 62 unique classes
  Client 12: 35969 train samples, 62 unique classes
  Client 13: 37590 train samples, 62 unique classes
  Client 14: 36705 train samples, 62 unique classes
  Client 15: 36474 train samples, 62 unique classes
  Client 16: 36699 train samples, 62 unique classes
  Client 17: 37182 train samples, 62 unique classes
  Client 18: 36951 train samples, 62 unique classes
  Client 19: 35769 train samples, 62 unique classes
Graph: ring, nodes: 20, edges: 20
Degree statistics: avg=2.00, min=2, max=2
Attack: Compromised 10/20 nodes: [0, 1, 2, 3, 7, 8, 10, 11, 16, 17]
Attack type: directed_deviation, lambda: 1.0
Model variant: large
Model parameters: 26,154,814
COARSE Node 0:
  Model dim: 26,154,814 → Sketch size: 1000
  Compression ratio: 26154.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 26,154,814 → Sketch size: 1000
  Compression ratio: 26154.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 26,154,814 → Sketch size: 1000
  Compression ratio: 26154.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 26,154,814 → Sketch size: 1000
  Compression ratio: 26154.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 26,154,814 → Sketch size: 1000
  Compression ratio: 26154.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 26,154,814 → Sketch size: 1000
  Compression ratio: 26154.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 26,154,814 → Sketch size: 1000
  Compression ratio: 26154.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 26,154,814 → Sketch size: 1000
  Compression ratio: 26154.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 26,154,814 → Sketch size: 1000
  Compression ratio: 26154.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 26,154,814 → Sketch size: 1000
  Compression ratio: 26154.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 26,154,814 → Sketch size: 1000
  Compression ratio: 26154.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 26,154,814 → Sketch size: 1000
  Compression ratio: 26154.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 26,154,814 → Sketch size: 1000
  Compression ratio: 26154.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 26,154,814 → Sketch size: 1000
  Compression ratio: 26154.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 26,154,814 → Sketch size: 1000
  Compression ratio: 26154.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 26,154,814 → Sketch size: 1000
  Compression ratio: 26154.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 26,154,814 → Sketch size: 1000
  Compression ratio: 26154.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 26,154,814 → Sketch size: 1000
  Compression ratio: 26154.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 26,154,814 → Sketch size: 1000
  Compression ratio: 26154.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 26,154,814 → Sketch size: 1000
  Compression ratio: 26154.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 26,154,814 parameters
  - Sketch size: 1000
  - Compression ratio: 26154.8x
  - Complexity: O(d + N×k) = O(26,154,814 + 20×1000)
  - Theoretical speedup vs BALANCE: 20.0x
Initial test acc across nodes: mean=0.0158 ± 0.0152
Round 001: test acc mean=0.5865 ± 0.2422 | min=0.0031 max=0.7252
         : test loss mean=7592.6186 ± 18163.9577
         : individual accs = ['0.724211', '0.028064', '0.015141', '0.680030', '0.712299', '0.725006', '0.700682', '0.686080', '0.664640', '0.003118', '0.725225', '0.700141', '0.592112', '0.607319', '0.694651', '0.680666', '0.710280', '0.693201', '0.694531', '0.691910']
         : correct/total = [(3096, 4275), (120, 4276), (64, 4227), (2680, 3941), (2971, 4171), (2937, 4051), (2980, 4253), (2839, 4138), (2733, 4112), (13, 4169), (3059, 4218), (2977, 4252), (2417, 4082), (2589, 4263), (2896, 4169), (2820, 4143), (2964, 4173), (2926, 4221), (2908, 4187), (2814, 4067)]
         : compromised: 0.5627, honest: 0.6102
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.000', 'Node 2: acc_rate=0.000']...
Round 002: test acc mean=0.6119 ± 0.3309 | min=0.0032 max=0.8286
         : test loss mean=nan ± nan
         : individual accs = ['0.803041', '0.045136', '0.051573', '0.791931', '0.828578', '0.809183', '0.799201', '0.798212', '0.003161', '0.049652', '0.047179', '0.791157', '0.813082', '0.811635', '0.770209', '0.789042', '0.800144', '0.804786', '0.817530', '0.813622']
         : correct/total = [(3433, 4275), (193, 4276), (218, 4227), (3121, 3941), (3456, 4171), (3278, 4051), (3399, 4253), (3303, 4138), (13, 4112), (207, 4169), (199, 4218), (3364, 4252), (3319, 4082), (3460, 4263), (3211, 4169), (3269, 4143), (3339, 4173), (3397, 4221), (3423, 4187), (3309, 4067)]
         : compromised: 0.4936, honest: 0.7302
         : coarse stats = ['Node 0: acc_rate=0.250', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.250']...
Round 003: test acc mean=0.5959 ± 0.3587 | min=0.0461 max=0.8494
         : test loss mean=nan ± nan
         : individual accs = ['0.826667', '0.047007', '0.046132', '0.049734', '0.849437', '0.833868', '0.829767', '0.824070', '0.049368', '0.049652', '0.047179', '0.824318', '0.823126', '0.841192', '0.832814', '0.810041', '0.823388', '0.837005', '0.835921', '0.837964']
         : correct/total = [(3534, 4275), (201, 4276), (195, 4227), (196, 3941), (3543, 4171), (3378, 4051), (3529, 4253), (3410, 4138), (203, 4112), (207, 4169), (199, 4218), (3505, 4252), (3360, 4082), (3586, 4263), (3472, 4169), (3356, 4143), (3436, 4173), (3533, 4221), (3500, 4187), (3408, 4067)]
         : compromised: 0.4375, honest: 0.7544
         : coarse stats = ['Node 0: acc_rate=0.333', 'Node 1: acc_rate=0.333', 'Node 2: acc_rate=0.167']...

=== FINAL RESULTS ===
Dataset: femnist, Nodes: 20, Graph: ring, Aggregation: coarse
Attack: directed_deviation, 50.0% compromised
Final accuracy - Compromised: 0.4375, Honest: 0.7544
Overall test accuracy: mean=0.5959 ± 0.3587

=== COARSE SUMMARY ===
Node 0: acceptance=0.333
Node 1: acceptance=0.333
Node 2: acceptance=0.167
Node 3: acceptance=0.000
Node 4: acceptance=0.333
Node 5: acceptance=1.000
Node 6: acceptance=0.500
Node 7: acceptance=0.167
Node 8: acceptance=0.167
Node 9: acceptance=0.000
Node 10: acceptance=0.167
Node 11: acceptance=0.500
Node 12: acceptance=0.500
Node 13: acceptance=0.500
Node 14: acceptance=0.333
Node 15: acceptance=0.167
Node 16: acceptance=0.333
Node 17: acceptance=0.333
Node 18: acceptance=0.500
Node 19: acceptance=0.500

=== PARALLEL EXECUTION TIME (realistic for distributed system) ===
  COMMUNICATION (max across nodes):
    - Sketch transfer: 0.000s (0.0%)
    - Model fetch (accepted): 0.000s (0.0%)
  COMPUTATION (max across nodes):
    - Sketching: 1.546s (84.9%)
    - Filtering: 0.000s (0.0%)
    - Aggregation: 0.274s (15.1%)
  TOTALS:
    - Total computation: 1.821s (100.0%)
    - Total communication: 0.000s (0.0%)
    - Total parallel time: 1.821s

=== PER-NODE AVERAGE TIME ===
  - Sketching: 1.224s
  - Filtering: 0.000s
  - Aggregation: 0.203s
  - Sketch transfer: 0.000s
  - Model fetch: 0.000s
  - Total per node: 1.427s

=== TOTAL COMPUTATIONAL WORK (sum across all nodes) ===
  - Total sketching: 24.478s
  - Total filtering: 0.005s
  - Total aggregation: 4.056s
  - Total sketch transfer: 0.000s
  - Total model fetch: 0.000s
  - Grand total: 28.539s
  - Mean acceptance rate: 0.342

COARSE Algorithm Properties:
  - Original dimension: 26,154,814
  - Sketch size: 1000
  - Compression ratio: 20.0x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation


# Experiment completed successfully
