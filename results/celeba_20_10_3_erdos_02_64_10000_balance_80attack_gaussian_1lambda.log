Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
Attack: Compromised 16/20 nodes: [1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
Attack type: gaussian, lambda: 1.0
BALANCE algorithm:
  - Model dimension: 30,758 parameters
  - Complexity: O(N×d) = O(20×30,758)
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522928', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (593, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5160, honest: 0.5179
Round 002: test acc mean=0.7415 ± 0.1807 | min=0.4758 max=0.9184
         : test loss mean=40.1840 ± 87.0021
         : individual accs = ['0.911404', '0.508636', '0.876664', '0.475820', '0.909171', '0.913537', '0.868996', '0.918367', '0.775528', '0.766844', '0.891608', '0.498667', '0.522569', '0.506897', '0.820285', '0.894323', '0.917678', '0.508400', '0.853068', '0.491674']
         : correct/total = [(1039, 1140), (589, 1158), (988, 1127), (551, 1158), (1031, 1134), (1046, 1145), (995, 1145), (1035, 1127), (881, 1136), (865, 1128), (1020, 1144), (561, 1125), (602, 1152), (588, 1160), (922, 1124), (1024, 1145), (1059, 1154), (575, 1131), (987, 1157), (561, 1141)]
         : compromised: 0.6983, honest: 0.9142
Round 003: test acc mean=0.5168 ± 0.0146 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.509333', '0.522569', '0.505172', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (573, 1125), (602, 1152), (586, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5166, honest: 0.5176
Round 004: test acc mean=0.5058 ± 0.0208 | min=0.4773 max=0.5625
         : test loss mean=5299.4863 ± 10691.6424
         : individual accs = ['0.521930', '0.498273', '0.515528', '0.481002', '0.525573', '0.512664', '0.503930', '0.492458', '0.562500', '0.508865', '0.477273', '0.488000', '0.525174', '0.494828', '0.517794', '0.487336', '0.483536', '0.526967', '0.479689', '0.513585']
         : correct/total = [(595, 1140), (577, 1158), (581, 1127), (557, 1158), (596, 1134), (587, 1145), (577, 1145), (555, 1127), (639, 1136), (574, 1128), (546, 1144), (549, 1125), (605, 1152), (574, 1160), (582, 1124), (558, 1145), (558, 1154), (596, 1131), (555, 1157), (586, 1141)]
         : compromised: 0.5058, honest: 0.5059
Round 005: test acc mean=0.5027 ± 0.0181 | min=0.4685 max=0.5246
         : test loss mean=1514.0804 ± 1792.0430
         : individual accs = ['0.471053', '0.520725', '0.493345', '0.493092', '0.521164', '0.517031', '0.517031', '0.522626', '0.524648', '0.507979', '0.508741', '0.500444', '0.476562', '0.493103', '0.509786', '0.518777', '0.498267', '0.473917', '0.468453', '0.517967']
         : correct/total = [(537, 1140), (603, 1158), (556, 1127), (571, 1158), (591, 1134), (592, 1145), (592, 1145), (589, 1127), (596, 1136), (573, 1128), (582, 1144), (563, 1125), (549, 1152), (572, 1160), (573, 1124), (594, 1145), (575, 1154), (536, 1131), (542, 1157), (591, 1141)]
         : compromised: 0.5026, honest: 0.5033
Round 006: test acc mean=0.5001 ± 0.0248 | min=0.4454 max=0.5338
         : test loss mean=6235.0299 ± 12022.9104
         : individual accs = ['0.512281', '0.515544', '0.496007', '0.531088', '0.526455', '0.467249', '0.500437', '0.505768', '0.445423', '0.523936', '0.525350', '0.466667', '0.501736', '0.506897', '0.533808', '0.459389', '0.483536', '0.501326', '0.480553', '0.518843']
         : correct/total = [(584, 1140), (597, 1158), (559, 1127), (615, 1158), (597, 1134), (535, 1145), (573, 1145), (570, 1127), (506, 1136), (591, 1128), (601, 1144), (525, 1125), (578, 1152), (588, 1160), (600, 1124), (526, 1145), (558, 1154), (567, 1131), (556, 1157), (592, 1141)]
         : compromised: 0.4984, honest: 0.5070
Round 007: test acc mean=0.4946 ± 0.0230 | min=0.4375 max=0.5302
         : test loss mean=390080.3547 ± 1042087.9861
         : individual accs = ['0.471053', '0.491364', '0.506655', '0.460276', '0.522046', '0.485590', '0.479476', '0.503993', '0.437500', '0.508865', '0.474650', '0.501333', '0.477431', '0.507759', '0.517794', '0.517031', '0.484402', '0.491600', '0.522040', '0.530237']
         : correct/total = [(537, 1140), (569, 1158), (571, 1127), (533, 1158), (592, 1134), (556, 1145), (549, 1145), (568, 1127), (497, 1136), (574, 1128), (543, 1144), (564, 1125), (550, 1152), (589, 1160), (582, 1124), (592, 1145), (559, 1154), (556, 1131), (604, 1157), (605, 1141)]
         : compromised: 0.4944, honest: 0.4954
Round 008: test acc mean=0.5047 ± 0.0301 | min=0.4375 max=0.5658
         : test loss mean=nan ± nan
         : individual accs = ['0.565789', '0.491364', '0.506655', '0.527634', '0.522928', '0.514410', '0.521397', '0.503106', '0.437500', '0.508865', '0.474650', '0.512889', '0.522569', '0.507759', '0.482206', '0.448908', '0.553726', '0.491600', '0.522040', '0.478528']
         : correct/total = [(645, 1140), (569, 1158), (571, 1127), (611, 1158), (593, 1134), (589, 1145), (597, 1145), (567, 1127), (497, 1136), (574, 1128), (543, 1144), (577, 1125), (602, 1152), (589, 1160), (542, 1124), (514, 1145), (639, 1154), (556, 1131), (604, 1157), (546, 1141)]
         : compromised: 0.4968, honest: 0.5364
Round 009: test acc mean=0.5085 ± 0.0290 | min=0.4384 max=0.5667
         : test loss mean=nan ± nan
         : individual accs = ['0.566667', '0.508636', '0.508429', '0.516408', '0.522928', '0.514410', '0.478603', '0.503106', '0.438380', '0.491135', '0.487762', '0.501333', '0.477431', '0.506897', '0.532918', '0.543231', '0.564991', '0.508400', '0.513397', '0.484663']
         : correct/total = [(646, 1140), (589, 1158), (573, 1127), (598, 1158), (593, 1134), (589, 1145), (548, 1145), (567, 1127), (498, 1136), (554, 1128), (558, 1144), (564, 1125), (550, 1152), (588, 1160), (599, 1124), (622, 1145), (652, 1154), (575, 1131), (594, 1157), (553, 1141)]
         : compromised: 0.5008, honest: 0.5394
Round 010: test acc mean=0.5193 ± 0.0345 | min=0.4604 max=0.5763
         : test loss mean=838.4443 ± 1735.7617
         : individual accs = ['0.576316', '0.491364', '0.564330', '0.477547', '0.522928', '0.485590', '0.478603', '0.503106', '0.566901', '0.554965', '0.525350', '0.460444', '0.522569', '0.496552', '0.557829', '0.482969', '0.569324', '0.508400', '0.521175', '0.520596']
         : correct/total = [(657, 1140), (569, 1158), (636, 1127), (553, 1158), (593, 1134), (556, 1145), (548, 1145), (567, 1127), (644, 1136), (626, 1128), (601, 1144), (518, 1125), (602, 1152), (576, 1160), (627, 1124), (553, 1145), (657, 1154), (575, 1131), (603, 1157), (594, 1141)]
         : compromised: 0.5134, honest: 0.5429

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: balance
Attack: gaussian, 80.0% compromised
Final accuracy - Compromised: 0.5134, Honest: 0.5429
Overall test accuracy: mean=0.5193 ± 0.0345

=== BALANCE SUMMARY ===
Node 0: acceptance=0.483
Node 1: acceptance=0.450
Node 2: acceptance=0.520
Node 3: acceptance=0.500
Node 4: acceptance=0.550
Node 5: acceptance=0.440
Node 6: acceptance=0.460
Node 7: acceptance=0.500
Node 8: acceptance=0.700
Node 9: acceptance=0.600
Node 10: acceptance=0.500
Node 11: acceptance=0.500
Node 12: acceptance=0.457
Node 13: acceptance=0.500
Node 14: acceptance=0.457
Node 15: acceptance=0.433
Node 16: acceptance=0.520
Node 17: acceptance=0.460
Node 18: acceptance=0.500
Node 19: acceptance=0.500

Performance Summary:
  - Distance computation time: 0.759s (39.8%)
  - Filtering time: 0.892s (46.8%)
  - Aggregation time: 0.257s (13.5%)
  - Total time: 1.907s
  - Mean acceptance rate: 0.502

BALANCE Algorithm Properties:
  - Model dimension: 30,758
  - No compression: Full parameter comparison
  - Theoretical complexity: O(deg(i)×d)
  - Approach: Full parameter filtering + averaging
