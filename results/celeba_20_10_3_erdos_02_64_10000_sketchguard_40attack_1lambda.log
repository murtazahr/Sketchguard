Device: cpu
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 4500 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
Degree statistics: avg=4.80, min=2, max=7
Attack: Compromised 8/20 nodes: [1, 5, 11, 12, 13, 14, 17, 18]
Attack type: directed_deviation, lambda: 1.0
Model variant: baseline
Model parameters: 2,219,692
COARSE Node 0:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 2,219,692 parameters
  - Config: COARSEConfig(gamma=2, kappa=1, alpha=0.5, min_neighbors=1, sketch_size=1000, network_seed=987654321, attack_detection_window=5)
  - Sketch size: 1000
  - Compression ratio: 2219.7x
  - Complexity: O(d + N×k) = O(2,219,692 + 20×1000)
  - Theoretical speedup vs BALANCE: 19.8x
Initial test acc across nodes: mean=0.4978 ± 0.0207
Round 001: test acc mean=0.6458 ± 0.0583 | min=0.5197 max=0.7158
         : test loss mean=0.6795 ± 0.0054
         : individual accs = ['0.707895', '0.677029', '0.535936', '0.699482', '0.573192', '0.588646', '0.655895', '0.626442', '0.635563', '0.701241', '0.594406', '0.693333', '0.704861', '0.664655', '0.642349', '0.655022', '0.715771', '0.608311', '0.715644', '0.519720']
         : correct/total = [(807, 1140), (784, 1158), (604, 1127), (810, 1158), (650, 1134), (674, 1145), (751, 1145), (706, 1127), (722, 1136), (791, 1128), (680, 1144), (780, 1125), (812, 1152), (771, 1160), (722, 1124), (750, 1145), (826, 1154), (688, 1131), (828, 1157), (593, 1141)]
         : compromised: 0.6619, honest: 0.6350
         : sketchguard stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=0.833', 'Node 2: acc_rate=0.400']...
Round 002: test acc mean=0.6925 ± 0.0282 | min=0.6495 max=0.7444
         : test loss mean=0.6415 ± 0.0302
         : individual accs = ['0.676316', '0.676166', '0.670807', '0.714162', '0.664903', '0.737118', '0.704803', '0.699201', '0.734155', '0.713652', '0.714161', '0.654222', '0.703125', '0.655172', '0.649466', '0.692576', '0.744367', '0.660477', '0.703544', '0.680982']
         : correct/total = [(771, 1140), (783, 1158), (756, 1127), (827, 1158), (754, 1134), (844, 1145), (807, 1145), (788, 1127), (834, 1136), (805, 1128), (817, 1144), (736, 1125), (810, 1152), (760, 1160), (730, 1124), (793, 1145), (859, 1154), (747, 1131), (814, 1157), (777, 1141)]
         : compromised: 0.6799, honest: 0.7008
         : sketchguard stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=0.833', 'Node 2: acc_rate=0.400']...
Round 003: test acc mean=0.7563 ± 0.0412 | min=0.6667 max=0.8276
         : test loss mean=0.5658 ± 0.0598
         : individual accs = ['0.765789', '0.703800', '0.739130', '0.771157', '0.787478', '0.824454', '0.759825', '0.750665', '0.808979', '0.785461', '0.770979', '0.774222', '0.666667', '0.756034', '0.698399', '0.758952', '0.827556', '0.694960', '0.741573', '0.740578']
         : correct/total = [(873, 1140), (815, 1158), (833, 1127), (893, 1158), (893, 1134), (944, 1145), (870, 1145), (846, 1127), (919, 1136), (886, 1128), (882, 1144), (871, 1125), (768, 1152), (877, 1160), (785, 1124), (869, 1145), (955, 1154), (786, 1131), (858, 1157), (845, 1141)]
         : compromised: 0.7325, honest: 0.7722
         : sketchguard stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=0.722', 'Node 2: acc_rate=0.400']...
Round 004: test acc mean=0.8047 ± 0.0326 | min=0.7169 max=0.8611
         : test loss mean=0.4744 ± 0.0689
         : individual accs = ['0.820175', '0.752159', '0.716948', '0.810881', '0.835097', '0.861135', '0.797380', '0.826974', '0.839789', '0.817376', '0.833042', '0.811556', '0.779514', '0.818103', '0.763345', '0.813100', '0.818891', '0.783378', '0.784788', '0.809816']
         : correct/total = [(935, 1140), (871, 1158), (808, 1127), (939, 1158), (947, 1134), (986, 1145), (913, 1145), (932, 1127), (954, 1136), (922, 1128), (953, 1144), (913, 1125), (898, 1152), (949, 1160), (858, 1124), (931, 1145), (945, 1154), (886, 1131), (908, 1157), (924, 1141)]
         : compromised: 0.7942, honest: 0.8116
         : sketchguard stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=0.667', 'Node 2: acc_rate=0.400']...
Round 005: test acc mean=0.8413 ± 0.0258 | min=0.7817 max=0.8787
         : test loss mean=0.3999 ± 0.0567
         : individual accs = ['0.855263', '0.837651', '0.781721', '0.859240', '0.859788', '0.836681', '0.848908', '0.856256', '0.865317', '0.867021', '0.863636', '0.848000', '0.791667', '0.840517', '0.791815', '0.835808', '0.878683', '0.832007', '0.824546', '0.851884']
         : correct/total = [(975, 1140), (970, 1158), (881, 1127), (995, 1158), (975, 1134), (958, 1145), (972, 1145), (965, 1127), (983, 1136), (978, 1128), (988, 1144), (954, 1125), (912, 1152), (975, 1160), (890, 1124), (957, 1145), (1014, 1154), (941, 1131), (954, 1157), (972, 1141)]
         : compromised: 0.8254, honest: 0.8520
         : sketchguard stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=0.667', 'Node 2: acc_rate=0.400']...
Round 006: test acc mean=0.8626 ± 0.0187 | min=0.8283 max=0.8908
         : test loss mean=0.3423 ± 0.0412
         : individual accs = ['0.872807', '0.842832', '0.834960', '0.872193', '0.869489', '0.890830', '0.868122', '0.867791', '0.878521', '0.870567', '0.883741', '0.874667', '0.854167', '0.863793', '0.828292', '0.829694', '0.883016', '0.858532', '0.832325', '0.874671']
         : correct/total = [(995, 1140), (976, 1158), (941, 1127), (1010, 1158), (986, 1134), (1020, 1145), (994, 1145), (978, 1127), (998, 1136), (982, 1128), (1011, 1144), (984, 1125), (984, 1152), (1002, 1160), (931, 1124), (950, 1145), (1019, 1154), (971, 1131), (963, 1157), (998, 1141)]
         : compromised: 0.8557, honest: 0.8671
         : sketchguard stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=0.667', 'Node 2: acc_rate=0.400']...
Round 007: test acc mean=0.8695 ± 0.0186 | min=0.8262 max=0.8945
         : test loss mean=0.3176 ± 0.0365
         : individual accs = ['0.878070', '0.878238', '0.831411', '0.879965', '0.880071', '0.894323', '0.875109', '0.881988', '0.883803', '0.894504', '0.863636', '0.870222', '0.842882', '0.874138', '0.848754', '0.826201', '0.888215', '0.870027', '0.866897', '0.862401']
         : correct/total = [(1001, 1140), (1017, 1158), (937, 1127), (1019, 1158), (998, 1134), (1024, 1145), (1002, 1145), (994, 1127), (1004, 1136), (1009, 1128), (988, 1144), (979, 1125), (971, 1152), (1014, 1160), (954, 1124), (946, 1145), (1025, 1154), (984, 1131), (1003, 1157), (984, 1141)]
         : compromised: 0.8682, honest: 0.8704
         : sketchguard stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=0.667', 'Node 2: acc_rate=0.400']...
Round 008: test acc mean=0.8764 ± 0.0139 | min=0.8367 max=0.8926
         : test loss mean=0.2990 ± 0.0271
         : individual accs = ['0.886842', '0.882556', '0.836735', '0.879965', '0.881834', '0.892576', '0.872489', '0.889973', '0.878521', '0.885638', '0.867133', '0.892444', '0.868056', '0.868966', '0.887011', '0.850655', '0.889081', '0.873563', '0.878997', '0.865031']
         : correct/total = [(1011, 1140), (1022, 1158), (943, 1127), (1019, 1158), (1000, 1134), (1022, 1145), (999, 1145), (1003, 1127), (998, 1136), (999, 1128), (992, 1144), (1004, 1125), (1000, 1152), (1008, 1160), (997, 1124), (974, 1145), (1026, 1154), (988, 1131), (1017, 1157), (987, 1141)]
         : compromised: 0.8805, honest: 0.8737
         : sketchguard stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=0.667', 'Node 2: acc_rate=0.400']...
Round 009: test acc mean=0.8826 ± 0.0172 | min=0.8474 max=0.9053
         : test loss mean=0.2834 ± 0.0284
         : individual accs = ['0.905263', '0.890328', '0.847382', '0.899827', '0.885362', '0.903057', '0.888210', '0.896185', '0.891725', '0.891844', '0.885490', '0.898667', '0.858507', '0.886207', '0.865658', '0.853275', '0.894281', '0.869142', '0.856525', '0.884312']
         : correct/total = [(1032, 1140), (1031, 1158), (955, 1127), (1042, 1158), (1004, 1134), (1034, 1145), (1017, 1145), (1010, 1127), (1013, 1136), (1006, 1128), (1013, 1144), (1011, 1125), (989, 1152), (1028, 1160), (973, 1124), (977, 1145), (1032, 1154), (983, 1131), (991, 1157), (1009, 1141)]
         : compromised: 0.8785, honest: 0.8853
         : sketchguard stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=0.667', 'Node 2: acc_rate=0.400']...
Round 010: test acc mean=0.8897 ± 0.0095 | min=0.8660 max=0.9022
         : test loss mean=0.2701 ± 0.0209
         : individual accs = ['0.895614', '0.889465', '0.866016', '0.898964', '0.885362', '0.902183', '0.892576', '0.900621', '0.897007', '0.901596', '0.884615', '0.891556', '0.891493', '0.894828', '0.895018', '0.876856', '0.893414', '0.876216', '0.883319', '0.877301']
         : correct/total = [(1021, 1140), (1030, 1158), (976, 1127), (1041, 1158), (1004, 1134), (1033, 1145), (1022, 1145), (1015, 1127), (1019, 1136), (1017, 1128), (1012, 1144), (1003, 1125), (1027, 1152), (1038, 1160), (1006, 1124), (1004, 1145), (1031, 1154), (991, 1131), (1022, 1157), (1001, 1141)]
         : compromised: 0.8905, honest: 0.8892
         : sketchguard stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=0.667', 'Node 2: acc_rate=0.400']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: sketchguard
Attack: directed_deviation, 40.0% compromised
Final accuracy - Compromised: 0.8905, Honest: 0.8892
Overall test accuracy: mean=0.8897 ± 0.0095

=== COARSE SUMMARY ===
Node 0: acceptance=0.833
Node 1: acceptance=0.667
Node 2: acceptance=0.400
Node 3: acceptance=0.500
Node 4: acceptance=0.250
Node 5: acceptance=0.200
Node 6: acceptance=0.600
Node 7: acceptance=0.600
Node 8: acceptance=0.500
Node 9: acceptance=0.667
Node 10: acceptance=0.500
Node 11: acceptance=0.357
Node 12: acceptance=0.700
Node 13: acceptance=0.500
Node 14: acceptance=0.429
Node 15: acceptance=0.333
Node 16: acceptance=0.200
Node 17: acceptance=0.480
Node 18: acceptance=0.550
Node 19: acceptance=1.000

=== PARALLEL EXECUTION TIME (realistic for distributed system) ===
  COMMUNICATION (max across nodes):
    - Sketch transfer: 0.000s (0.0%)
    - Model fetch (accepted): 0.000s (0.0%)
  COMPUTATION (max across nodes):
    - Sketching: 0.312s (94.9%)
    - Filtering: 0.001s (0.4%)
    - Aggregation: 0.015s (4.7%)
  TOTALS:
    - Total computation: 0.328s (100.0%)
    - Total communication: 0.000s (0.0%)
    - Total parallel time: 0.328s

=== PER-NODE AVERAGE TIME ===
  - Sketching: 0.234s
  - Filtering: 0.001s
  - Aggregation: 0.008s
  - Sketch transfer: 0.000s
  - Model fetch: 0.000s
  - Total per node: 0.243s

=== TOTAL COMPUTATIONAL WORK (sum across all nodes) ===
  - Total sketching: 4.683s
  - Total filtering: 0.010s
  - Total aggregation: 0.164s
  - Total sketch transfer: 0.000s
  - Total model fetch: 0.000s
  - Grand total: 4.858s
  - Mean acceptance rate: 0.513

COARSE Algorithm Properties:
  - Original dimension: 2,219,692
  - Sketch size: 1000
  - Compression ratio: 19.8x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
