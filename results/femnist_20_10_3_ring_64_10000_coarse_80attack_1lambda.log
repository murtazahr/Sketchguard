Device: cuda
Seed: 987654321
Loading 36 LEAF FEMNIST train files...
LEAF FEMNIST train: 3597 users, 734463 samples
Loading 36 LEAF FEMNIST test files...
LEAF FEMNIST test: 3597 users, 83388 samples
Found 3597 train users, 3597 test users, 3597 common users
User sample counts range: 525 (max) to 17 (min)
Distributed ALL 3597 users across 20 clients
Users per client: 179 (with 17 clients getting +1 user)
Train partition sizes: [36360, 37070, 35957, 38262, 36024, 37732, 36921, 38328, 36867, 37683, 36507, 36915, 36007, 37001, 35681, 35453, 36585, 36801, 35964, 36345]
Test partition sizes: [4128, 4203, 4081, 4333, 4091, 4287, 4193, 4349, 4191, 4277, 4143, 4193, 4093, 4197, 4052, 4029, 4153, 4183, 4084, 4128]
  Client 0: 36360 train samples, 62 unique classes
  Client 1: 37070 train samples, 62 unique classes
  Client 2: 35957 train samples, 62 unique classes
  Client 3: 38262 train samples, 62 unique classes
  Client 4: 36024 train samples, 62 unique classes
  Client 5: 37732 train samples, 62 unique classes
  Client 6: 36921 train samples, 62 unique classes
  Client 7: 38328 train samples, 62 unique classes
  Client 8: 36867 train samples, 62 unique classes
  Client 9: 37683 train samples, 62 unique classes
  Client 10: 36507 train samples, 62 unique classes
  Client 11: 36915 train samples, 62 unique classes
  Client 12: 36007 train samples, 62 unique classes
  Client 13: 37001 train samples, 62 unique classes
  Client 14: 35681 train samples, 62 unique classes
  Client 15: 35453 train samples, 62 unique classes
  Client 16: 36585 train samples, 62 unique classes
  Client 17: 36801 train samples, 62 unique classes
  Client 18: 35964 train samples, 62 unique classes
  Client 19: 36345 train samples, 62 unique classes
Will sample 10000 samples per client per epoch
Graph: ring, nodes: 20, edges: 20
Attack: Compromised 16/20 nodes: [1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 6,603,710 parameters
  - Sketch size: 1000
  - Compression ratio: 6603.7x
  - Complexity: O(d + N×k) = O(6,603,710 + 20×1000)
  - Theoretical speedup vs BALANCE: 19.9x
Initial test acc across nodes: mean=0.0162 ± 0.0138
Round 001: test acc mean=0.1844 ± 0.2089 | min=0.0036 max=0.4755
         : test loss mean=11018.3688 ± 10118.1227
         : individual accs = ['0.006783', '0.447537', '0.010292', '0.435726', '0.044243', '0.441801', '0.451944', '0.046447', '0.460511', '0.004442', '0.013034', '0.003577', '0.013926', '0.008816', '0.017275', '0.455944', '0.007705', '0.475496', '0.007591', '0.334787']
         : correct/total = [(28, 4128), (1881, 4203), (42, 4081), (1888, 4333), (181, 4091), (1894, 4287), (1895, 4193), (202, 4349), (1930, 4191), (19, 4277), (54, 4143), (15, 4193), (57, 4093), (37, 4197), (70, 4052), (1837, 4029), (32, 4153), (1989, 4183), (31, 4084), (1382, 4128)]
         : compromised: 0.2239, honest: 0.0263
         : coarse stats = ['Node 0: acc_rate=0.000', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.000']...
Round 002: test acc mean=0.0502 ± 0.0043 | min=0.0415 max=0.0597
         : test loss mean=nan ± nan
         : individual accs = ['0.049419', '0.048775', '0.049743', '0.046619', '0.045710', '0.052484', '0.041498', '0.046907', '0.057266', '0.050736', '0.048033', '0.048891', '0.047398', '0.047653', '0.054788', '0.054604', '0.047436', '0.051159', '0.059745', '0.054990']
         : correct/total = [(204, 4128), (205, 4203), (203, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (204, 4349), (240, 4191), (217, 4277), (199, 4143), (205, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (197, 4153), (214, 4183), (244, 4084), (227, 4128)]
         : compromised: 0.0509, honest: 0.0474
         : coarse stats = ['Node 0: acc_rate=0.000', 'Node 1: acc_rate=0.250', 'Node 2: acc_rate=0.000']...
Round 003: test acc mean=0.0491 ± 0.0040 | min=0.0415 max=0.0579
         : test loss mean=nan ± nan
         : individual accs = ['0.049419', '0.048775', '0.049743', '0.046619', '0.045710', '0.052484', '0.041498', '0.046447', '0.044619', '0.050736', '0.048033', '0.048891', '0.047398', '0.047653', '0.054788', '0.054604', '0.045750', '0.057853', '0.045544', '0.054990']
         : correct/total = [(204, 4128), (205, 4203), (203, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (202, 4349), (187, 4191), (217, 4277), (199, 4143), (205, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (190, 4153), (242, 4183), (186, 4084), (227, 4128)]
         : compromised: 0.0496, honest: 0.0468
         : coarse stats = ['Node 0: acc_rate=0.000', 'Node 1: acc_rate=0.167', 'Node 2: acc_rate=0.000']...
Round 004: test acc mean=0.0492 ± 0.0036 | min=0.0415 max=0.0550
         : test loss mean=nan ± nan
         : individual accs = ['0.049419', '0.048775', '0.049743', '0.046619', '0.045710', '0.052484', '0.041498', '0.046447', '0.053686', '0.050736', '0.048033', '0.048891', '0.047398', '0.047653', '0.054788', '0.054604', '0.045750', '0.052116', '0.045544', '0.054990']
         : correct/total = [(204, 4128), (205, 4203), (203, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (202, 4349), (225, 4191), (217, 4277), (199, 4143), (205, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (190, 4153), (218, 4183), (186, 4084), (227, 4128)]
         : compromised: 0.0498, honest: 0.0468
         : coarse stats = ['Node 0: acc_rate=0.000', 'Node 1: acc_rate=0.125', 'Node 2: acc_rate=0.000']...
Round 005: test acc mean=0.0488 ± 0.0035 | min=0.0415 max=0.0550
         : test loss mean=nan ± nan
         : individual accs = ['0.049419', '0.048775', '0.049743', '0.046619', '0.045710', '0.052484', '0.041498', '0.046907', '0.044619', '0.050736', '0.048033', '0.048891', '0.047398', '0.047653', '0.054788', '0.054604', '0.045750', '0.052116', '0.045544', '0.054990']
         : correct/total = [(204, 4128), (205, 4203), (203, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (204, 4349), (187, 4191), (217, 4277), (199, 4143), (205, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (190, 4153), (218, 4183), (186, 4084), (227, 4128)]
         : compromised: 0.0493, honest: 0.0469
         : coarse stats = ['Node 0: acc_rate=0.000', 'Node 1: acc_rate=0.100', 'Node 2: acc_rate=0.000']...
Round 006: test acc mean=0.0493 ± 0.0042 | min=0.0415 max=0.0597
         : test loss mean=nan ± nan
         : individual accs = ['0.049419', '0.048775', '0.049743', '0.046619', '0.045710', '0.052484', '0.041498', '0.046907', '0.044619', '0.050736', '0.048033', '0.048891', '0.047398', '0.047653', '0.054788', '0.054604', '0.045750', '0.047574', '0.059745', '0.054990']
         : correct/total = [(204, 4128), (205, 4203), (203, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (204, 4349), (187, 4191), (217, 4277), (199, 4143), (205, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (190, 4153), (199, 4183), (244, 4084), (227, 4128)]
         : compromised: 0.0499, honest: 0.0469
         : coarse stats = ['Node 0: acc_rate=0.000', 'Node 1: acc_rate=0.083', 'Node 2: acc_rate=0.000']...
Round 007: test acc mean=0.0495 ± 0.0042 | min=0.0415 max=0.0597
         : test loss mean=nan ± nan
         : individual accs = ['0.049419', '0.048775', '0.049743', '0.046619', '0.045710', '0.052484', '0.041498', '0.046907', '0.044619', '0.050736', '0.048033', '0.048891', '0.047398', '0.047653', '0.054788', '0.054604', '0.045750', '0.051159', '0.059745', '0.054990']
         : correct/total = [(204, 4128), (205, 4203), (203, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (204, 4349), (187, 4191), (217, 4277), (199, 4143), (205, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (190, 4153), (214, 4183), (244, 4084), (227, 4128)]
         : compromised: 0.0501, honest: 0.0469
         : coarse stats = ['Node 0: acc_rate=0.000', 'Node 1: acc_rate=0.071', 'Node 2: acc_rate=0.000']...
Round 008: test acc mean=0.0496 ± 0.0041 | min=0.0415 max=0.0597
         : test loss mean=nan ± nan
         : individual accs = ['0.049419', '0.048775', '0.049743', '0.046619', '0.045710', '0.052484', '0.041498', '0.050126', '0.044619', '0.050736', '0.048033', '0.048891', '0.047398', '0.047653', '0.054788', '0.054604', '0.045750', '0.051159', '0.059745', '0.054990']
         : correct/total = [(204, 4128), (205, 4203), (203, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (218, 4349), (187, 4191), (217, 4277), (199, 4143), (205, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (190, 4153), (214, 4183), (244, 4084), (227, 4128)]
         : compromised: 0.0501, honest: 0.0478
         : coarse stats = ['Node 0: acc_rate=0.000', 'Node 1: acc_rate=0.062', 'Node 2: acc_rate=0.000']...
Round 009: test acc mean=0.0502 ± 0.0039 | min=0.0415 max=0.0579
         : test loss mean=nan ± nan
         : individual accs = ['0.049419', '0.048775', '0.049743', '0.046619', '0.045710', '0.052484', '0.041498', '0.046907', '0.051062', '0.050736', '0.048033', '0.048891', '0.047398', '0.047653', '0.054788', '0.054604', '0.050566', '0.057853', '0.055583', '0.054990']
         : correct/total = [(204, 4128), (205, 4203), (203, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (204, 4349), (214, 4191), (217, 4277), (199, 4143), (205, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (210, 4153), (242, 4183), (227, 4084), (227, 4128)]
         : compromised: 0.0507, honest: 0.0482
         : coarse stats = ['Node 0: acc_rate=0.000', 'Node 1: acc_rate=0.056', 'Node 2: acc_rate=0.000']...
Round 010: test acc mean=0.0501 ± 0.0039 | min=0.0415 max=0.0597
         : test loss mean=nan ± nan
         : individual accs = ['0.049419', '0.048775', '0.049743', '0.046619', '0.045710', '0.052484', '0.041498', '0.050126', '0.052732', '0.050736', '0.048033', '0.048891', '0.047398', '0.047653', '0.054788', '0.054604', '0.049362', '0.049247', '0.059745', '0.054990']
         : correct/total = [(204, 4128), (205, 4203), (203, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (218, 4349), (221, 4191), (217, 4277), (199, 4143), (205, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (205, 4153), (206, 4183), (244, 4084), (227, 4128)]
         : compromised: 0.0505, honest: 0.0487
         : coarse stats = ['Node 0: acc_rate=0.000', 'Node 1: acc_rate=0.050', 'Node 2: acc_rate=0.000']...

=== FINAL RESULTS ===
Dataset: femnist, Nodes: 20, Graph: ring, Aggregation: coarse
Attack: directed_deviation, 80.0% compromised
Final accuracy - Compromised: 0.0505, Honest: 0.0487
Overall test accuracy: mean=0.0501 ± 0.0039

=== COARSE SUMMARY ===
Node 0: acceptance=0.000
Node 1: acceptance=0.050
Node 2: acceptance=0.000
Node 3: acceptance=0.050
Node 4: acceptance=0.000
Node 5: acceptance=0.050
Node 6: acceptance=0.050
Node 7: acceptance=0.900
Node 8: acceptance=0.450
Node 9: acceptance=0.000
Node 10: acceptance=0.000
Node 11: acceptance=0.000
Node 12: acceptance=0.000
Node 13: acceptance=0.000
Node 14: acceptance=0.000
Node 15: acceptance=0.050
Node 16: acceptance=0.900
Node 17: acceptance=0.450
Node 18: acceptance=0.400
Node 19: acceptance=0.050

Performance Summary:
  - Sketching time: 20.727s (98.8%)
  - Filtering time: 0.016s (0.1%)
  - Aggregation time: 0.246s (1.2%)
  - Total time: 20.989s
  - Mean acceptance rate: 0.170

COARSE Algorithm Properties:
  - Original dimension: 6,603,710
  - Sketch size: 1000
  - Compression ratio: 19.9x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
