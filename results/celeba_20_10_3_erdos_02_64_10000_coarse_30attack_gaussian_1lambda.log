Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 4500 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
Degree statistics: avg=4.80, min=2, max=7
Attack: Compromised 6/20 nodes: [5, 12, 13, 14, 17, 18]
Attack type: gaussian, lambda: 1.0
Model variant: baseline
Model parameters: 2,219,692
COARSE Node 0:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 2,219,692 parameters
  - Config: COARSEConfig(gamma=2, kappa=1, alpha=0.5, min_neighbors=1, sketch_size=1000, network_seed=987654321, attack_detection_window=5)
  - Sketch size: 1000
  - Compression ratio: 2219.7x
  - Complexity: O(d + N×k) = O(2,219,692 + 20×1000)
  - Theoretical speedup vs BALANCE: 19.8x
Initial test acc across nodes: mean=0.4978 ± 0.0208
Round 001: test acc mean=0.6457 ± 0.0584 | min=0.5197 max=0.7200
         : test loss mean=0.6806 ± 0.0042
         : individual accs = ['0.706140', '0.674439', '0.600710', '0.704663', '0.537919', '0.530131', '0.658515', '0.624667', '0.636444', '0.682624', '0.664336', '0.696000', '0.706597', '0.658621', '0.641459', '0.655895', '0.686308', '0.609195', '0.719965', '0.519720']
         : correct/total = [(805, 1140), (781, 1158), (677, 1127), (816, 1158), (610, 1134), (607, 1145), (754, 1145), (704, 1127), (723, 1136), (770, 1128), (760, 1144), (783, 1125), (814, 1152), (764, 1160), (721, 1124), (751, 1145), (792, 1154), (689, 1131), (833, 1157), (593, 1141)]
         : compromised: 0.6443, honest: 0.6463
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=0.600']...
Round 002: test acc mean=0.6722 ± 0.0378 | min=0.5694 max=0.7342
         : test loss mean=0.6579 ± 0.0213
         : individual accs = ['0.669298', '0.666667', '0.685892', '0.674439', '0.601411', '0.569432', '0.678603', '0.665484', '0.734155', '0.698582', '0.708042', '0.689778', '0.698785', '0.639655', '0.648577', '0.654148', '0.723570', '0.658709', '0.706137', '0.673094']
         : correct/total = [(763, 1140), (772, 1158), (773, 1127), (781, 1158), (682, 1134), (652, 1145), (777, 1145), (750, 1127), (834, 1136), (788, 1128), (810, 1144), (776, 1125), (805, 1152), (742, 1160), (729, 1124), (749, 1145), (835, 1154), (745, 1131), (817, 1157), (768, 1141)]
         : compromised: 0.6535, honest: 0.6802
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=0.600']...
Round 003: test acc mean=0.7206 ± 0.0366 | min=0.6508 max=0.7958
         : test loss mean=0.6110 ± 0.0395
         : individual accs = ['0.737719', '0.703800', '0.716060', '0.764249', '0.650794', '0.720524', '0.740611', '0.680568', '0.795775', '0.768617', '0.763112', '0.764444', '0.671007', '0.718103', '0.690391', '0.715284', '0.706239', '0.676393', '0.710458', '0.718668']
         : correct/total = [(841, 1140), (815, 1158), (807, 1127), (885, 1158), (738, 1134), (825, 1145), (848, 1145), (767, 1127), (904, 1136), (867, 1128), (873, 1144), (860, 1125), (773, 1152), (833, 1160), (776, 1124), (819, 1145), (815, 1154), (765, 1131), (822, 1157), (820, 1141)]
         : compromised: 0.6978, honest: 0.7304
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=0.600']...
Round 004: test acc mean=0.7767 ± 0.0296 | min=0.7148 max=0.8248
         : test loss mean=0.5362 ± 0.0488
         : individual accs = ['0.774561', '0.749568', '0.765750', '0.808290', '0.753968', '0.801747', '0.751965', '0.783496', '0.824824', '0.821809', '0.812937', '0.817778', '0.741319', '0.790517', '0.755338', '0.772926', '0.759965', '0.754200', '0.714780', '0.779141']
         : correct/total = [(883, 1140), (868, 1158), (863, 1127), (936, 1158), (855, 1134), (918, 1145), (861, 1145), (883, 1127), (937, 1136), (927, 1128), (930, 1144), (920, 1125), (854, 1152), (917, 1160), (849, 1124), (885, 1145), (877, 1154), (853, 1131), (827, 1157), (889, 1141)]
         : compromised: 0.7597, honest: 0.7841
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=0.600']...
Round 005: test acc mean=0.8062 ± 0.0303 | min=0.7445 max=0.8652
         : test loss mean=0.4610 ± 0.0510
         : individual accs = ['0.820175', '0.801382', '0.744454', '0.845423', '0.792769', '0.761572', '0.813974', '0.811003', '0.849472', '0.865248', '0.840035', '0.828444', '0.771701', '0.807759', '0.782918', '0.799127', '0.819757', '0.789567', '0.770095', '0.808940']
         : correct/total = [(935, 1140), (928, 1158), (839, 1127), (979, 1158), (899, 1134), (872, 1145), (932, 1145), (914, 1127), (965, 1136), (976, 1128), (961, 1144), (932, 1125), (889, 1152), (937, 1160), (880, 1124), (915, 1145), (946, 1154), (893, 1131), (891, 1157), (923, 1141)]
         : compromised: 0.7806, honest: 0.8172
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=0.600']...
Round 006: test acc mean=0.8423 ± 0.0237 | min=0.7857 max=0.8785
         : test loss mean=0.3934 ± 0.0379
         : individual accs = ['0.842982', '0.846287', '0.808341', '0.860967', '0.831570', '0.860262', '0.844541', '0.845608', '0.872359', '0.853723', '0.878497', '0.869333', '0.828993', '0.862069', '0.807829', '0.818341', '0.850087', '0.823165', '0.785653', '0.856266']
         : correct/total = [(961, 1140), (980, 1158), (911, 1127), (997, 1158), (943, 1134), (985, 1145), (967, 1145), (953, 1127), (991, 1136), (963, 1128), (1005, 1144), (978, 1125), (955, 1152), (1000, 1160), (908, 1124), (937, 1145), (981, 1154), (931, 1131), (909, 1157), (977, 1141)]
         : compromised: 0.8280, honest: 0.8485
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=0.600']...
Round 007: test acc mean=0.8571 ± 0.0176 | min=0.8262 max=0.8786
         : test loss mean=0.3520 ± 0.0323
         : individual accs = ['0.863158', '0.868739', '0.829636', '0.870466', '0.853616', '0.878603', '0.862009', '0.864241', '0.870599', '0.876773', '0.854895', '0.877333', '0.841146', '0.872414', '0.843416', '0.826201', '0.875217', '0.826702', '0.831461', '0.854514']
         : correct/total = [(984, 1140), (1006, 1158), (935, 1127), (1008, 1158), (968, 1134), (1006, 1145), (987, 1145), (974, 1127), (989, 1136), (989, 1128), (978, 1144), (987, 1125), (969, 1152), (1012, 1160), (948, 1124), (946, 1145), (1010, 1154), (935, 1131), (962, 1157), (975, 1141)]
         : compromised: 0.8490, honest: 0.8605
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=0.600']...
Round 008: test acc mean=0.8711 ± 0.0096 | min=0.8527 max=0.8870
         : test loss mean=0.3185 ± 0.0174
         : individual accs = ['0.873684', '0.884283', '0.852706', '0.866149', '0.864198', '0.883843', '0.881223', '0.879326', '0.875000', '0.875000', '0.857517', '0.874667', '0.864583', '0.876724', '0.887011', '0.864629', '0.876083', '0.862069', '0.856525', '0.866784']
         : correct/total = [(996, 1140), (1024, 1158), (961, 1127), (1003, 1158), (980, 1134), (1012, 1145), (1009, 1145), (991, 1127), (994, 1136), (987, 1128), (981, 1144), (984, 1125), (996, 1152), (1017, 1160), (997, 1124), (990, 1145), (1011, 1154), (975, 1131), (991, 1157), (989, 1141)]
         : compromised: 0.8718, honest: 0.8708
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=0.600']...
Round 009: test acc mean=0.8789 ± 0.0161 | min=0.8358 max=0.8939
         : test loss mean=0.2951 ± 0.0256
         : individual accs = ['0.893860', '0.886010', '0.863354', '0.887737', '0.880071', '0.889956', '0.887336', '0.887311', '0.885563', '0.888298', '0.888112', '0.892444', '0.870660', '0.886207', '0.877224', '0.868122', '0.883016', '0.837312', '0.835782', '0.888694']
         : correct/total = [(1019, 1140), (1026, 1158), (973, 1127), (1028, 1158), (998, 1134), (1019, 1145), (1016, 1145), (1000, 1127), (1006, 1136), (1002, 1128), (1016, 1144), (1004, 1125), (1003, 1152), (1028, 1160), (986, 1124), (994, 1145), (1019, 1154), (947, 1131), (967, 1157), (1014, 1141)]
         : compromised: 0.8662, honest: 0.8843
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=0.600']...
Round 010: test acc mean=0.8877 ± 0.0098 | min=0.8626 max=0.8991
         : test loss mean=0.2763 ± 0.0164
         : individual accs = ['0.899123', '0.894646', '0.870453', '0.895509', '0.882716', '0.897817', '0.882969', '0.894410', '0.893486', '0.898050', '0.882867', '0.896000', '0.891493', '0.892241', '0.893238', '0.875109', '0.885615', '0.877100', '0.862576', '0.887818']
         : correct/total = [(1025, 1140), (1036, 1158), (981, 1127), (1037, 1158), (1001, 1134), (1028, 1145), (1011, 1145), (1008, 1127), (1015, 1136), (1013, 1128), (1010, 1144), (1008, 1125), (1027, 1152), (1035, 1160), (1004, 1124), (1002, 1145), (1022, 1154), (992, 1131), (998, 1157), (1013, 1141)]
         : compromised: 0.8857, honest: 0.8885
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=0.600']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: gaussian, 30.0% compromised
Final accuracy - Compromised: 0.8857, Honest: 0.8885
Overall test accuracy: mean=0.8877 ± 0.0098

=== COARSE SUMMARY ===
Node 0: acceptance=0.833
Node 1: acceptance=1.000
Node 2: acceptance=0.600
Node 3: acceptance=0.750
Node 4: acceptance=0.500
Node 5: acceptance=0.400
Node 6: acceptance=0.800
Node 7: acceptance=0.600
Node 8: acceptance=0.500
Node 9: acceptance=1.000
Node 10: acceptance=0.750
Node 11: acceptance=0.571
Node 12: acceptance=0.714
Node 13: acceptance=0.750
Node 14: acceptance=0.429
Node 15: acceptance=0.500
Node 16: acceptance=0.400
Node 17: acceptance=0.600
Node 18: acceptance=0.900
Node 19: acceptance=1.000

=== PARALLEL EXECUTION TIME (realistic for distributed system) ===
  COMMUNICATION (max across nodes):
    - Sketch transfer: 0.000s (0.0%)
    - Model fetch (accepted): 0.000s (0.0%)
  COMPUTATION (max across nodes):
    - Sketching: 0.259s (94.2%)
    - Filtering: 0.001s (0.3%)
    - Aggregation: 0.015s (5.5%)
  TOTALS:
    - Total computation: 0.275s (100.0%)
    - Total communication: 0.000s (0.0%)
    - Total parallel time: 0.275s

=== PER-NODE AVERAGE TIME ===
  - Sketching: 0.184s
  - Filtering: 0.000s
  - Aggregation: 0.007s
  - Sketch transfer: 0.000s
  - Model fetch: 0.000s
  - Total per node: 0.191s

=== TOTAL COMPUTATIONAL WORK (sum across all nodes) ===
  - Total sketching: 3.682s
  - Total filtering: 0.009s
  - Total aggregation: 0.132s
  - Total sketch transfer: 0.000s
  - Total model fetch: 0.000s
  - Grand total: 3.823s
  - Mean acceptance rate: 0.680

COARSE Algorithm Properties:
  - Original dimension: 2,219,692
  - Sketch size: 1000
  - Compression ratio: 19.8x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
