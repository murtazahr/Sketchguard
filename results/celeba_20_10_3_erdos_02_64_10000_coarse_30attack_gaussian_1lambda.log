Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
Attack: Compromised 6/20 nodes: [5, 12, 13, 14, 17, 18]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8754 ± 0.1082
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5154, honest: 0.5168
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=0.600']...
Round 002: test acc mean=0.5378 ± 0.0743 | min=0.4911 max=0.8539
         : test loss mean=0.7183 ± 0.1247
         : individual accs = ['0.541228', '0.512090', '0.539485', '0.529361', '0.523810', '0.514410', '0.521397', '0.569654', '0.853873', '0.491135', '0.531469', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.518843']
         : correct/total = [(617, 1140), (593, 1158), (608, 1127), (613, 1158), (594, 1134), (589, 1145), (597, 1145), (642, 1127), (970, 1136), (554, 1128), (608, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (592, 1141)]
         : compromised: 0.5154, honest: 0.5474
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=0.600']...
Round 003: test acc mean=0.5302 ± 0.0344 | min=0.4933 max=0.6372
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.604491', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.553191', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.637160']
         : correct/total = [(603, 1140), (700, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (624, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (727, 1141)]
         : compromised: 0.5154, honest: 0.5366
         : coarse stats = ['Node 0: acc_rate=0.889', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=0.733']...
Round 004: test acc mean=0.5015 ± 0.0259 | min=0.4404 max=0.5519
         : test loss mean=5243.2238 ± 9064.5037
         : individual accs = ['0.499123', '0.494819', '0.493345', '0.440415', '0.506173', '0.483843', '0.488210', '0.479148', '0.551937', '0.546099', '0.508741', '0.493333', '0.515625', '0.505172', '0.483986', '0.482969', '0.479203', '0.518126', '0.547105', '0.513585']
         : correct/total = [(569, 1140), (573, 1158), (556, 1127), (510, 1158), (574, 1134), (554, 1145), (559, 1145), (540, 1127), (627, 1136), (616, 1128), (582, 1144), (555, 1125), (594, 1152), (586, 1160), (544, 1124), (553, 1145), (553, 1154), (586, 1131), (633, 1157), (586, 1141)]
         : compromised: 0.5090, honest: 0.4984
         : coarse stats = ['Node 0: acc_rate=0.792', 'Node 1: acc_rate=0.750', 'Node 2: acc_rate=0.800']...
Round 005: test acc mean=0.5064 ± 0.0213 | min=0.4747 max=0.5590
         : test loss mean=533.5483 ± 1130.7403
         : individual accs = ['0.522807', '0.508636', '0.493345', '0.535406', '0.497354', '0.486463', '0.531004', '0.503993', '0.558979', '0.491135', '0.474650', '0.520889', '0.484375', '0.510345', '0.516014', '0.528384', '0.504333', '0.500442', '0.477960', '0.482033']
         : correct/total = [(596, 1140), (589, 1158), (556, 1127), (620, 1158), (564, 1134), (557, 1145), (608, 1145), (568, 1127), (635, 1136), (554, 1128), (543, 1144), (586, 1125), (558, 1152), (592, 1160), (580, 1124), (605, 1145), (582, 1154), (566, 1131), (553, 1157), (550, 1141)]
         : compromised: 0.4959, honest: 0.5109
         : coarse stats = ['Node 0: acc_rate=0.767', 'Node 1: acc_rate=0.600', 'Node 2: acc_rate=0.840']...
Round 006: test acc mean=0.4998 ± 0.0195 | min=0.4401 max=0.5347
         : test loss mean=930.9604 ± 1919.2094
         : individual accs = ['0.509649', '0.508636', '0.506655', '0.493955', '0.478836', '0.491703', '0.499563', '0.504880', '0.440141', '0.490248', '0.517483', '0.498667', '0.534722', '0.498276', '0.517794', '0.517031', '0.484402', '0.498674', '0.522040', '0.482033']
         : correct/total = [(581, 1140), (589, 1158), (571, 1127), (572, 1158), (543, 1134), (563, 1145), (572, 1145), (569, 1127), (500, 1136), (553, 1128), (592, 1144), (561, 1125), (616, 1152), (578, 1160), (582, 1124), (592, 1145), (559, 1154), (564, 1131), (604, 1157), (550, 1141)]
         : compromised: 0.5105, honest: 0.4952
         : coarse stats = ['Node 0: acc_rate=0.750', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.867']...
Round 007: test acc mean=0.5006 ± 0.0221 | min=0.4747 max=0.5625
         : test loss mean=1.1184 ± 0.5725
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.477954', '0.514410', '0.478603', '0.496007', '0.562500', '0.491135', '0.474650', '0.498667', '0.520833', '0.493103', '0.482206', '0.482969', '0.484402', '0.491600', '0.522040', '0.482033']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (542, 1134), (589, 1145), (548, 1145), (559, 1127), (639, 1136), (554, 1128), (543, 1144), (561, 1125), (600, 1152), (572, 1160), (542, 1124), (553, 1145), (559, 1154), (556, 1131), (604, 1157), (550, 1141)]
         : compromised: 0.5040, honest: 0.4992
         : coarse stats = ['Node 0: acc_rate=0.690', 'Node 1: acc_rate=0.429', 'Node 2: acc_rate=0.829']...
Round 008: test acc mean=0.5054 ± 0.0238 | min=0.4774 max=0.5625
         : test loss mean=0.7965 ± 0.2131
         : individual accs = ['0.528947', '0.508636', '0.506655', '0.528497', '0.477954', '0.485590', '0.521397', '0.496007', '0.562500', '0.491135', '0.551573', '0.498667', '0.477431', '0.493103', '0.482206', '0.517031', '0.484402', '0.491600', '0.522040', '0.482033']
         : correct/total = [(603, 1140), (589, 1158), (571, 1127), (612, 1158), (542, 1134), (556, 1145), (597, 1145), (559, 1127), (639, 1136), (554, 1128), (631, 1144), (561, 1125), (550, 1152), (572, 1160), (542, 1124), (592, 1145), (559, 1154), (556, 1131), (604, 1157), (550, 1141)]
         : compromised: 0.4920, honest: 0.5111
         : coarse stats = ['Node 0: acc_rate=0.646', 'Node 1: acc_rate=0.396', 'Node 2: acc_rate=0.800']...
Round 009: test acc mean=0.4986 ± 0.0221 | min=0.4711 max=0.5625
         : test loss mean=0.7626 ± 0.1539
         : individual accs = ['0.471053', '0.491364', '0.506655', '0.528497', '0.477954', '0.485590', '0.521397', '0.496007', '0.562500', '0.491135', '0.474650', '0.501333', '0.477431', '0.506897', '0.482206', '0.517031', '0.484402', '0.491600', '0.522040', '0.482033']
         : correct/total = [(537, 1140), (569, 1158), (571, 1127), (612, 1158), (542, 1134), (556, 1145), (597, 1145), (559, 1127), (639, 1136), (554, 1128), (543, 1144), (564, 1125), (550, 1152), (588, 1160), (542, 1124), (592, 1145), (559, 1154), (556, 1131), (604, 1157), (550, 1141)]
         : compromised: 0.4943, honest: 0.5004
         : coarse stats = ['Node 0: acc_rate=0.648', 'Node 1: acc_rate=0.463', 'Node 2: acc_rate=0.778']...
Round 010: test acc mean=0.5092 ± 0.0202 | min=0.4755 max=0.5625
         : test loss mean=0.7121 ± 0.0447
         : individual accs = ['0.528947', '0.491364', '0.506655', '0.528497', '0.522046', '0.514410', '0.521397', '0.496007', '0.562500', '0.491135', '0.475524', '0.501333', '0.522569', '0.506897', '0.517794', '0.517031', '0.483536', '0.491600', '0.522040', '0.482033']
         : correct/total = [(603, 1140), (569, 1158), (571, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (559, 1127), (639, 1136), (554, 1128), (544, 1144), (564, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (558, 1154), (556, 1131), (604, 1157), (550, 1141)]
         : compromised: 0.5126, honest: 0.5077
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.517', 'Node 2: acc_rate=0.760']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: gaussian, 30.0% compromised
Final accuracy - Compromised: 0.5126, Honest: 0.5077
Overall test accuracy: mean=0.5092 ± 0.0202

=== COARSE SUMMARY ===
Node 0: acceptance=0.667
Node 1: acceptance=0.517
Node 2: acceptance=0.760
Node 3: acceptance=0.800
Node 4: acceptance=0.700
Node 5: acceptance=0.640
Node 6: acceptance=0.800
Node 7: acceptance=0.720
Node 8: acceptance=0.650
Node 9: acceptance=0.533
Node 10: acceptance=0.725
Node 11: acceptance=0.714
Node 12: acceptance=0.729
Node 13: acceptance=0.800
Node 14: acceptance=0.629
Node 15: acceptance=0.683
Node 16: acceptance=0.640
Node 17: acceptance=0.660
Node 18: acceptance=0.500
Node 19: acceptance=0.600

Performance Summary:
  - Sketching time: 0.045s (11.9%)
  - Filtering time: 0.005s (1.3%)
  - Aggregation time: 0.332s (86.8%)
  - Total time: 0.382s
  - Mean acceptance rate: 0.673

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
