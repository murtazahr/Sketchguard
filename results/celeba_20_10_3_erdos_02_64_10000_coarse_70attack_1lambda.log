Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
Attack: Compromised 14/20 nodes: [1, 2, 3, 5, 6, 8, 11, 12, 13, 14, 15, 17, 18, 19]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5098 ± 0.0190 | min=0.4763 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.476316', '0.493092', '0.493345', '0.528497', '0.522046', '0.490830', '0.521397', '0.495120', '0.562500', '0.491135', '0.525350', '0.498667', '0.521701', '0.506897', '0.516014', '0.517031', '0.515598', '0.508400', '0.522040', '0.489921']
         : correct/total = [(543, 1140), (571, 1158), (556, 1127), (612, 1158), (592, 1134), (562, 1145), (597, 1145), (558, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (601, 1152), (588, 1160), (580, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (559, 1141)]
         : compromised: 0.5122, honest: 0.5043
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5020 ± 0.0167 | min=0.4642 max=0.5436
         : test loss mean=22.6390 ± 16.5689
         : individual accs = ['0.502632', '0.500000', '0.524401', '0.516408', '0.497354', '0.498690', '0.504803', '0.510204', '0.474472', '0.507979', '0.464161', '0.512889', '0.487847', '0.503448', '0.543594', '0.495197', '0.482669', '0.507515', '0.507347', '0.497809']
         : correct/total = [(573, 1140), (579, 1158), (591, 1127), (598, 1158), (564, 1134), (571, 1145), (578, 1145), (575, 1127), (539, 1136), (573, 1128), (531, 1144), (577, 1125), (562, 1152), (584, 1160), (611, 1124), (567, 1145), (557, 1154), (574, 1131), (587, 1157), (568, 1141)]
         : compromised: 0.5053, honest: 0.4942
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=1.4905 ± 0.3857
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5172, honest: 0.5145
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5562 ± 0.0269 | min=0.5142 max=0.6137
         : test loss mean=7.0389 ± 2.8982
         : individual accs = ['0.541228', '0.552677', '0.523514', '0.536269', '0.562610', '0.532751', '0.577293', '0.608696', '0.559859', '0.514184', '0.589161', '0.581333', '0.613715', '0.561207', '0.539146', '0.572926', '0.534662', '0.526083', '0.543647', '0.552147']
         : correct/total = [(617, 1140), (640, 1158), (590, 1127), (621, 1158), (638, 1134), (610, 1145), (661, 1145), (686, 1127), (636, 1136), (580, 1128), (674, 1144), (654, 1125), (707, 1152), (651, 1160), (606, 1124), (656, 1145), (617, 1154), (595, 1131), (629, 1157), (630, 1141)]
         : compromised: 0.5552, honest: 0.5584
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=1.0569 ± 0.2462
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5172, honest: 0.5145
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.5773 ± 0.0410 | min=0.5027 max=0.6442
         : test loss mean=10.6831 ± 5.3668
         : individual accs = ['0.558772', '0.575993', '0.642413', '0.553541', '0.630511', '0.611354', '0.543231', '0.633540', '0.566901', '0.502660', '0.644231', '0.617778', '0.595486', '0.567241', '0.570285', '0.544978', '0.533795', '0.518126', '0.542783', '0.593339']
         : correct/total = [(637, 1140), (667, 1158), (724, 1127), (641, 1158), (715, 1134), (700, 1145), (622, 1145), (714, 1127), (644, 1136), (567, 1128), (737, 1144), (695, 1125), (686, 1152), (658, 1160), (641, 1124), (624, 1145), (616, 1154), (586, 1131), (628, 1157), (677, 1141)]
         : compromised: 0.5745, honest: 0.5839
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.9715 ± 0.2375
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5172, honest: 0.5145
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.6044 ± 0.0415 | min=0.5124 max=0.6832
         : test loss mean=9.5145 ± 4.1106
         : individual accs = ['0.565789', '0.622625', '0.683230', '0.608808', '0.675485', '0.614847', '0.556332', '0.602484', '0.580106', '0.512411', '0.659965', '0.648889', '0.617188', '0.606897', '0.582740', '0.570306', '0.609185', '0.606543', '0.550562', '0.614373']
         : correct/total = [(645, 1140), (721, 1158), (770, 1127), (705, 1158), (766, 1134), (704, 1145), (637, 1145), (679, 1127), (659, 1136), (578, 1128), (755, 1144), (730, 1125), (711, 1152), (704, 1160), (655, 1124), (653, 1145), (703, 1154), (686, 1131), (637, 1157), (701, 1141)]
         : compromised: 0.6045, honest: 0.6042
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.9561 ± 0.2209
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5172, honest: 0.5145
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.6317 ± 0.0460 | min=0.5656 max=0.7125
         : test loss mean=7.8438 ± 3.8461
         : individual accs = ['0.565789', '0.632988', '0.712511', '0.662349', '0.683422', '0.666376', '0.575546', '0.630878', '0.573063', '0.565603', '0.699301', '0.640889', '0.637153', '0.630172', '0.639680', '0.571179', '0.649047', '0.641026', '0.570441', '0.687117']
         : correct/total = [(645, 1140), (733, 1158), (803, 1127), (767, 1158), (775, 1134), (763, 1145), (659, 1145), (711, 1127), (651, 1136), (638, 1128), (800, 1144), (721, 1125), (734, 1152), (731, 1160), (719, 1124), (654, 1145), (749, 1154), (725, 1131), (660, 1157), (784, 1141)]
         : compromised: 0.6315, honest: 0.6323
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: directed_deviation, 70.0% compromised
Final accuracy - Compromised: 0.6315, Honest: 0.6323
Overall test accuracy: mean=0.6317 ± 0.0460

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.051s (11.1%)
  - Filtering time: 0.005s (1.0%)
  - Aggregation time: 0.406s (87.9%)
  - Total time: 0.462s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
