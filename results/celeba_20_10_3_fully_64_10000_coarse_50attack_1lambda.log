Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: fully, nodes: 20, edges: 190
Attack: Compromised 10/20 nodes: [1, 2, 5, 11, 12, 13, 14, 15, 17, 18]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5119 ± 0.0158 | min=0.4894 max=0.5607
         : test loss mean=2.1807 ± 0.7026
         : individual accs = ['0.528070', '0.509499', '0.493345', '0.529361', '0.513228', '0.492576', '0.525764', '0.503993', '0.560739', '0.489362', '0.515734', '0.501333', '0.516493', '0.506897', '0.516904', '0.517031', '0.496534', '0.508400', '0.505618', '0.506573']
         : correct/total = [(602, 1140), (590, 1158), (556, 1127), (613, 1158), (582, 1134), (564, 1145), (602, 1145), (568, 1127), (637, 1136), (552, 1128), (590, 1144), (564, 1125), (595, 1152), (588, 1160), (581, 1124), (592, 1145), (573, 1154), (575, 1131), (585, 1157), (578, 1141)]
         : compromised: 0.5068, honest: 0.5169
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5050 ± 0.0206 | min=0.4619 max=0.5563
         : test loss mean=32.1572 ± 10.5003
         : individual accs = ['0.511404', '0.502591', '0.484472', '0.509499', '0.497354', '0.544105', '0.505677', '0.496894', '0.556338', '0.461879', '0.528846', '0.500444', '0.514757', '0.512931', '0.511566', '0.482096', '0.493934', '0.488948', '0.503889', '0.491674']
         : correct/total = [(583, 1140), (582, 1158), (546, 1127), (590, 1158), (564, 1134), (623, 1145), (579, 1145), (560, 1127), (632, 1136), (521, 1128), (605, 1144), (563, 1125), (593, 1152), (595, 1160), (575, 1124), (552, 1145), (570, 1154), (553, 1131), (583, 1157), (561, 1141)]
         : compromised: 0.5046, honest: 0.5054
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.4979 ± 0.0220 | min=0.4375 max=0.5395
         : test loss mean=0.7023 ± 0.0121
         : individual accs = ['0.539474', '0.491364', '0.493345', '0.471503', '0.497354', '0.485590', '0.510917', '0.503993', '0.437500', '0.508865', '0.473776', '0.501333', '0.522569', '0.493103', '0.482206', '0.517031', '0.515598', '0.508400', '0.522040', '0.482033']
         : correct/total = [(615, 1140), (569, 1158), (556, 1127), (546, 1158), (564, 1134), (556, 1145), (585, 1145), (568, 1127), (497, 1136), (574, 1128), (542, 1144), (564, 1125), (602, 1152), (572, 1160), (542, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (550, 1141)]
         : compromised: 0.5017, honest: 0.4941
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5369 ± 0.0231 | min=0.4920 max=0.5822
         : test loss mean=11.9537 ± 3.1864
         : individual accs = ['0.571053', '0.515544', '0.506655', '0.542314', '0.549383', '0.563319', '0.532751', '0.519965', '0.563380', '0.492021', '0.582168', '0.525333', '0.539931', '0.556034', '0.516904', '0.529258', '0.521664', '0.521662', '0.562662', '0.525855']
         : correct/total = [(651, 1140), (597, 1158), (571, 1127), (628, 1158), (623, 1134), (645, 1145), (610, 1145), (586, 1127), (640, 1136), (555, 1128), (666, 1144), (591, 1125), (622, 1152), (645, 1160), (581, 1124), (606, 1145), (602, 1154), (590, 1131), (651, 1157), (600, 1141)]
         : compromised: 0.5337, honest: 0.5401
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.7054 ± 0.0130
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5110, honest: 0.5217
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.6441 ± 0.0289 | min=0.5727 max=0.6966
         : test loss mean=4.7852 ± 1.2242
         : individual accs = ['0.681579', '0.597582', '0.648625', '0.678756', '0.696649', '0.651528', '0.635808', '0.615794', '0.659331', '0.572695', '0.654720', '0.668444', '0.650174', '0.623276', '0.661922', '0.654148', '0.642114', '0.641910', '0.637857', '0.609115']
         : correct/total = [(777, 1140), (692, 1158), (731, 1127), (786, 1158), (790, 1134), (746, 1145), (728, 1145), (694, 1127), (749, 1136), (646, 1128), (749, 1144), (752, 1125), (749, 1152), (723, 1160), (744, 1124), (749, 1145), (741, 1154), (726, 1131), (738, 1157), (695, 1141)]
         : compromised: 0.6435, honest: 0.6447
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.6996 ± 0.0093
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.529361', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (613, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5110, honest: 0.5218
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.7132 ± 0.0314 | min=0.6719 max=0.7825
         : test loss mean=3.2784 ± 0.8307
         : individual accs = ['0.740351', '0.705527', '0.713398', '0.754750', '0.723986', '0.782533', '0.694323', '0.686779', '0.746479', '0.686170', '0.694930', '0.741333', '0.671875', '0.694828', '0.766014', '0.677729', '0.703640', '0.716180', '0.687122', '0.675723']
         : correct/total = [(844, 1140), (817, 1158), (804, 1127), (874, 1158), (821, 1134), (896, 1145), (795, 1145), (774, 1127), (848, 1136), (774, 1128), (795, 1144), (834, 1125), (774, 1152), (806, 1160), (861, 1124), (776, 1145), (812, 1154), (810, 1131), (795, 1157), (771, 1141)]
         : compromised: 0.7157, honest: 0.7107
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.7000 ± 0.0112
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5110, honest: 0.5217
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.7320 ± 0.0328 | min=0.6646 max=0.7822
         : test loss mean=2.8463 ± 0.7919
         : individual accs = ['0.735965', '0.742660', '0.721384', '0.759067', '0.753968', '0.775546', '0.680349', '0.664596', '0.732394', '0.723404', '0.757867', '0.782222', '0.692708', '0.670690', '0.776690', '0.720524', '0.729636', '0.745358', '0.732930', '0.741455']
         : correct/total = [(839, 1140), (860, 1158), (813, 1127), (879, 1158), (855, 1134), (888, 1145), (779, 1145), (749, 1127), (832, 1136), (816, 1128), (867, 1144), (880, 1125), (798, 1152), (778, 1160), (873, 1124), (825, 1145), (842, 1154), (843, 1131), (848, 1157), (846, 1141)]
         : compromised: 0.7361, honest: 0.7279
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: fully, Aggregation: coarse
Attack: directed_deviation, 50.0% compromised
Final accuracy - Compromised: 0.7361, Honest: 0.7279
Overall test accuracy: mean=0.7320 ± 0.0328

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.049s (3.4%)
  - Filtering time: 0.013s (0.9%)
  - Aggregation time: 1.381s (95.7%)
  - Total time: 1.443s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
