Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: ring, nodes: 20, edges: 20
Attack: Compromised 10/20 nodes: [1, 2, 5, 11, 12, 13, 14, 15, 17, 18]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5153 ± 0.0176 | min=0.4777 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.525907', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.494222', '0.522569', '0.506897', '0.517794', '0.523144', '0.515598', '0.508400', '0.522040', '0.477651']
         : correct/total = [(603, 1140), (609, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (556, 1125), (602, 1152), (588, 1160), (582, 1124), (599, 1145), (595, 1154), (575, 1131), (604, 1157), (545, 1141)]
         : compromised: 0.5129, honest: 0.5177
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5130 ± 0.0215 | min=0.4821 max=0.5659
         : test loss mean=11.2203 ± 18.2752
         : individual accs = ['0.524561', '0.508636', '0.527950', '0.529361', '0.510582', '0.565939', '0.510917', '0.503993', '0.563380', '0.491135', '0.498252', '0.491556', '0.502604', '0.491379', '0.501779', '0.482096', '0.512998', '0.498674', '0.522040', '0.521472']
         : correct/total = [(598, 1140), (589, 1158), (595, 1127), (613, 1158), (579, 1134), (648, 1145), (585, 1145), (568, 1127), (640, 1136), (554, 1128), (570, 1144), (553, 1125), (579, 1152), (570, 1160), (564, 1124), (552, 1145), (592, 1154), (564, 1131), (604, 1157), (595, 1141)]
         : compromised: 0.5093, honest: 0.5167
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5231 ± 0.0323 | min=0.4911 max=0.6472
         : test loss mean=1.0934 ± 0.5330
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.526455', '0.647162', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.504310', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (597, 1134), (741, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (585, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5240, honest: 0.5222
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5973 ± 0.1016 | min=0.5156 max=0.8646
         : test loss mean=2.8715 ± 3.6497
         : individual accs = ['0.536842', '0.561313', '0.575865', '0.688256', '0.673721', '0.864629', '0.567686', '0.858030', '0.562500', '0.678191', '0.544580', '0.544000', '0.522569', '0.527586', '0.519573', '0.563319', '0.515598', '0.557029', '0.567848', '0.516214']
         : correct/total = [(612, 1140), (650, 1158), (649, 1127), (797, 1158), (764, 1134), (990, 1145), (650, 1145), (967, 1127), (639, 1136), (765, 1128), (623, 1144), (612, 1125), (602, 1152), (612, 1160), (584, 1124), (645, 1145), (595, 1154), (630, 1131), (657, 1157), (589, 1141)]
         : compromised: 0.5804, honest: 0.6142
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5568 ± 0.0905 | min=0.4933 max=0.8620
         : test loss mean=0.9605 ± 0.4420
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.862009', '0.521397', '0.649512', '0.664613', '0.705674', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (987, 1145), (597, 1145), (732, 1127), (755, 1136), (796, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5457, honest: 0.5680
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.6498 ± 0.1151 | min=0.5095 max=0.8908
         : test loss mean=3.0786 ± 3.4574
         : individual accs = ['0.657895', '0.556131', '0.522626', '0.740933', '0.738095', '0.890830', '0.547598', '0.875776', '0.699824', '0.822695', '0.562063', '0.660444', '0.529514', '0.509483', '0.516904', '0.695197', '0.552860', '0.648099', '0.641314', '0.627520']
         : correct/total = [(750, 1140), (644, 1158), (589, 1127), (858, 1158), (837, 1134), (1020, 1145), (627, 1145), (987, 1127), (795, 1136), (928, 1128), (643, 1144), (743, 1125), (610, 1152), (591, 1160), (581, 1124), (796, 1145), (638, 1154), (733, 1131), (742, 1157), (716, 1141)]
         : compromised: 0.6171, honest: 0.6825
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.5761 ± 0.1228 | min=0.4933 max=0.8865
         : test loss mean=0.9438 ± 0.5491
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.886463', '0.521397', '0.744454', '0.835387', '0.800532', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (1015, 1145), (597, 1145), (839, 1127), (949, 1136), (903, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5482, honest: 0.6040
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.6689 ± 0.1216 | min=0.4960 max=0.8961
         : test loss mean=nan ± nan
         : individual accs = ['0.709649', '0.576857', '0.496007', '0.769430', '0.756614', '0.896070', '0.521397', '0.873114', '0.796655', '0.843972', '0.593531', '0.579556', '0.559896', '0.520690', '0.546263', '0.703930', '0.596187', '0.673740', '0.626621', '0.737949']
         : correct/total = [(809, 1140), (668, 1158), (559, 1127), (891, 1158), (858, 1134), (1026, 1145), (597, 1145), (984, 1127), (905, 1136), (952, 1128), (679, 1144), (652, 1125), (645, 1152), (604, 1160), (614, 1124), (806, 1145), (688, 1154), (762, 1131), (725, 1157), (842, 1141)]
         : compromised: 0.6180, honest: 0.7198
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.5795 ± 0.1291 | min=0.4933 max=0.8821
         : test loss mean=0.9182 ± 0.4954
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.882096', '0.521397', '0.763088', '0.869718', '0.820035', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (1010, 1145), (597, 1145), (860, 1127), (988, 1136), (925, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5477, honest: 0.6113
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.6826 ± 0.1265 | min=0.4987 max=0.8978
         : test loss mean=2.4683 ± 2.4546
         : individual accs = ['0.750000', '0.530225', '0.498669', '0.778929', '0.794533', '0.897817', '0.528384', '0.854481', '0.813380', '0.865248', '0.612762', '0.662222', '0.509549', '0.534483', '0.578292', '0.743231', '0.627383', '0.687887', '0.616249', '0.768624']
         : correct/total = [(855, 1140), (614, 1158), (562, 1127), (902, 1158), (901, 1134), (1028, 1145), (605, 1145), (963, 1127), (924, 1136), (976, 1128), (701, 1144), (745, 1125), (587, 1152), (620, 1160), (650, 1124), (851, 1145), (724, 1154), (778, 1131), (713, 1157), (877, 1141)]
         : compromised: 0.6259, honest: 0.7394
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: ring, Aggregation: coarse
Attack: directed_deviation, 50.0% compromised
Final accuracy - Compromised: 0.6259, Honest: 0.7394
Overall test accuracy: mean=0.6826 ± 0.1265

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.048s (17.3%)
  - Filtering time: 0.003s (1.2%)
  - Aggregation time: 0.225s (81.5%)
  - Total time: 0.276s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
