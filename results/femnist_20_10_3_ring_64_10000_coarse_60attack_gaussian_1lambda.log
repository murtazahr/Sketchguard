Device: cuda
Seed: 987654321
Loading 36 LEAF FEMNIST train files...
LEAF FEMNIST train: 3597 users, 734463 samples
Loading 36 LEAF FEMNIST test files...
LEAF FEMNIST test: 3597 users, 83388 samples
Found 3597 train users, 3597 test users, 3597 common users
User sample counts range: 525 (max) to 17 (min)
Distributed ALL 3597 users across 20 clients
Users per client: 179 (with 17 clients getting +1 user)
Train partition sizes: [36360, 37070, 35957, 38262, 36024, 37732, 36921, 38328, 36867, 37683, 36507, 36915, 36007, 37001, 35681, 35453, 36585, 36801, 35964, 36345]
Test partition sizes: [4128, 4203, 4081, 4333, 4091, 4287, 4193, 4349, 4191, 4277, 4143, 4193, 4093, 4197, 4052, 4029, 4153, 4183, 4084, 4128]
  Client 0: 36360 train samples, 62 unique classes
  Client 1: 37070 train samples, 62 unique classes
  Client 2: 35957 train samples, 62 unique classes
  Client 3: 38262 train samples, 62 unique classes
  Client 4: 36024 train samples, 62 unique classes
  Client 5: 37732 train samples, 62 unique classes
  Client 6: 36921 train samples, 62 unique classes
  Client 7: 38328 train samples, 62 unique classes
  Client 8: 36867 train samples, 62 unique classes
  Client 9: 37683 train samples, 62 unique classes
  Client 10: 36507 train samples, 62 unique classes
  Client 11: 36915 train samples, 62 unique classes
  Client 12: 36007 train samples, 62 unique classes
  Client 13: 37001 train samples, 62 unique classes
  Client 14: 35681 train samples, 62 unique classes
  Client 15: 35453 train samples, 62 unique classes
  Client 16: 36585 train samples, 62 unique classes
  Client 17: 36801 train samples, 62 unique classes
  Client 18: 35964 train samples, 62 unique classes
  Client 19: 36345 train samples, 62 unique classes
Will sample 10000 samples per client per epoch
Graph: ring, nodes: 20, edges: 20
Attack: Compromised 12/20 nodes: [1, 2, 3, 5, 8, 11, 12, 13, 14, 15, 17, 18]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 6,603,710 parameters
  - Sketch size: 1000
  - Compression ratio: 6603.7x
  - Complexity: O(d + N×k) = O(6,603,710 + 20×1000)
  - Theoretical speedup vs BALANCE: 19.9x
Initial test acc across nodes: mean=0.0162 ± 0.0138
Round 001: test acc mean=0.3058 ± 0.1887 | min=0.0051 max=0.4815
         : test loss mean=268385098.8631 ± 417259125.7541
         : individual accs = ['0.347626', '0.447537', '0.012497', '0.435726', '0.006111', '0.431537', '0.451944', '0.457117', '0.402529', '0.457330', '0.444364', '0.481517', '0.005131', '0.019061', '0.053801', '0.455944', '0.050807', '0.475496', '0.344515', '0.334787']
         : correct/total = [(1435, 4128), (1881, 4203), (51, 4081), (1888, 4333), (25, 4091), (1850, 4287), (1895, 4193), (1988, 4349), (1687, 4191), (1956, 4277), (1841, 4143), (2019, 4193), (21, 4093), (80, 4197), (218, 4052), (1837, 4029), (211, 4153), (1989, 4183), (1407, 4084), (1382, 4128)]
         : compromised: 0.2971, honest: 0.3188
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.000']...
Round 002: test acc mean=0.4143 ± 0.3355 | min=0.0148 max=0.7517
         : test loss mean=nan ± nan
         : individual accs = ['0.739099', '0.722103', '0.045577', '0.014770', '0.045710', '0.638908', '0.751729', '0.750747', '0.673586', '0.742343', '0.729182', '0.720487', '0.047398', '0.047653', '0.054788', '0.047406', '0.047436', '0.049247', '0.695642', '0.721899']
         : correct/total = [(3051, 4128), (3035, 4203), (186, 4081), (64, 4333), (187, 4091), (2739, 4287), (3152, 4193), (3265, 4349), (2823, 4191), (3175, 4277), (3021, 4143), (3021, 4193), (194, 4093), (200, 4197), (222, 4052), (191, 4029), (197, 4153), (206, 4183), (2841, 4084), (2980, 4128)]
         : compromised: 0.3131, honest: 0.5660
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.500']...
Round 003: test acc mean=0.4523 ± 0.3651 | min=0.0456 max=0.8002
         : test loss mean=nan ± nan
         : individual accs = ['0.794089', '0.790388', '0.045577', '0.049850', '0.045710', '0.780033', '0.795612', '0.800184', '0.716297', '0.798457', '0.781559', '0.789172', '0.047398', '0.047653', '0.054788', '0.054604', '0.047436', '0.049247', '0.778404', '0.780281']
         : correct/total = [(3278, 4128), (3322, 4203), (186, 4081), (216, 4333), (187, 4091), (3344, 4287), (3336, 4193), (3480, 4349), (3002, 4191), (3415, 4277), (3238, 4143), (3309, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (197, 4153), (206, 4183), (3179, 4084), (3221, 4128)]
         : compromised: 0.3503, honest: 0.6054
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.667']...
Round 004: test acc mean=0.4677 ± 0.3787 | min=0.0456 max=0.8256
         : test loss mean=nan ± nan
         : individual accs = ['0.810804', '0.816798', '0.045577', '0.049850', '0.045710', '0.812456', '0.824231', '0.814670', '0.774994', '0.825579', '0.805696', '0.804913', '0.047398', '0.047653', '0.054788', '0.054604', '0.047436', '0.049247', '0.816601', '0.804021']
         : correct/total = [(3347, 4128), (3433, 4203), (186, 4081), (216, 4333), (187, 4091), (3483, 4287), (3456, 4193), (3543, 4349), (3248, 4191), (3531, 4277), (3338, 4143), (3375, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (197, 4153), (206, 4183), (3335, 4084), (3319, 4128)]
         : compromised: 0.3646, honest: 0.6223
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.750']...
Round 005: test acc mean=0.4745 ± 0.3848 | min=0.0456 max=0.8340
         : test loss mean=nan ± nan
         : individual accs = ['0.822917', '0.824887', '0.045577', '0.049850', '0.045710', '0.818521', '0.834009', '0.827087', '0.801479', '0.832827', '0.820661', '0.821130', '0.047398', '0.047653', '0.054788', '0.054604', '0.047436', '0.049247', '0.826151', '0.817345']
         : correct/total = [(3397, 4128), (3467, 4203), (186, 4081), (216, 4333), (187, 4091), (3509, 4287), (3497, 4193), (3597, 4349), (3359, 4191), (3562, 4277), (3400, 4143), (3443, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (197, 4153), (206, 4183), (3374, 4084), (3374, 4128)]
         : compromised: 0.3701, honest: 0.6310
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.800']...
Round 006: test acc mean=0.4804 ± 0.3886 | min=0.0457 max=0.8429
         : test loss mean=nan ± nan
         : individual accs = ['0.825824', '0.831787', '0.061505', '0.049850', '0.045710', '0.833450', '0.837825', '0.840883', '0.818659', '0.842881', '0.822351', '0.835202', '0.047398', '0.047653', '0.054788', '0.054604', '0.047436', '0.049247', '0.833252', '0.828488']
         : correct/total = [(3409, 4128), (3496, 4203), (251, 4081), (216, 4333), (187, 4091), (3573, 4287), (3513, 4193), (3657, 4349), (3431, 4191), (3605, 4277), (3407, 4143), (3502, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (197, 4153), (206, 4183), (3403, 4084), (3420, 4128)]
         : compromised: 0.3764, honest: 0.6364
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.833']...
Round 007: test acc mean=0.4842 ± 0.3920 | min=0.0457 max=0.8457
         : test loss mean=nan ± nan
         : individual accs = ['0.829457', '0.844873', '0.061505', '0.049850', '0.045710', '0.838115', '0.844741', '0.841573', '0.822000', '0.845686', '0.838523', '0.841164', '0.047398', '0.047653', '0.054788', '0.054604', '0.047436', '0.049247', '0.843291', '0.836967']
         : correct/total = [(3424, 4128), (3551, 4203), (251, 4081), (216, 4333), (187, 4091), (3593, 4287), (3542, 4193), (3660, 4349), (3445, 4191), (3617, 4277), (3474, 4143), (3527, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (197, 4153), (206, 4183), (3444, 4084), (3455, 4128)]
         : compromised: 0.3795, honest: 0.6413
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.714']...
Round 008: test acc mean=0.4821 ± 0.3938 | min=0.0249 max=0.8522
         : test loss mean=nan ± nan
         : individual accs = ['0.826066', '0.838449', '0.049253', '0.024925', '0.045710', '0.843947', '0.845934', '0.837204', '0.831782', '0.852233', '0.836109', '0.844026', '0.047398', '0.047653', '0.054788', '0.054604', '0.047436', '0.049247', '0.839618', '0.825097']
         : correct/total = [(3410, 4128), (3524, 4203), (201, 4081), (108, 4333), (187, 4091), (3618, 4287), (3547, 4193), (3641, 4349), (3486, 4191), (3645, 4277), (3464, 4143), (3539, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (197, 4153), (206, 4183), (3429, 4084), (3406, 4128)]
         : compromised: 0.3771, honest: 0.6395
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.625']...
Round 009: test acc mean=0.4869 ± 0.3982 | min=0.0249 max=0.8560
         : test loss mean=nan ± nan
         : individual accs = ['0.840843', '0.847728', '0.049253', '0.024925', '0.045710', '0.846979', '0.855950', '0.850540', '0.853018', '0.852934', '0.838040', '0.841879', '0.047398', '0.047653', '0.054788', '0.054604', '0.047436', '0.049247', '0.848188', '0.841328']
         : correct/total = [(3471, 4128), (3563, 4203), (201, 4081), (108, 4333), (187, 4091), (3631, 4287), (3589, 4193), (3699, 4349), (3575, 4191), (3648, 4277), (3472, 4143), (3530, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (197, 4153), (206, 4183), (3464, 4084), (3473, 4128)]
         : compromised: 0.3805, honest: 0.6466
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.556']...
Round 010: test acc mean=0.4882 ± 0.3993 | min=0.0249 max=0.8566
         : test loss mean=nan ± nan
         : individual accs = ['0.844234', '0.856293', '0.049253', '0.024925', '0.045710', '0.847446', '0.856189', '0.853070', '0.856597', '0.855974', '0.841419', '0.844503', '0.047398', '0.047653', '0.054788', '0.054604', '0.047436', '0.049247', '0.848188', '0.838663']
         : correct/total = [(3485, 4128), (3599, 4203), (201, 4081), (108, 4333), (187, 4091), (3633, 4287), (3590, 4193), (3710, 4349), (3590, 4191), (3661, 4277), (3486, 4143), (3541, 4193), (194, 4093), (200, 4197), (222, 4052), (220, 4029), (197, 4153), (206, 4183), (3464, 4084), (3462, 4128)]
         : compromised: 0.3817, honest: 0.6478
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.500']...

=== FINAL RESULTS ===
Dataset: femnist, Nodes: 20, Graph: ring, Aggregation: coarse
Attack: gaussian, 60.0% compromised
Final accuracy - Compromised: 0.3817, Honest: 0.6478
Overall test accuracy: mean=0.4882 ± 0.3993

=== COARSE SUMMARY ===
Node 0: acceptance=0.500
Node 1: acceptance=0.500
Node 2: acceptance=0.500
Node 3: acceptance=0.250
Node 4: acceptance=0.000
Node 5: acceptance=0.550
Node 6: acceptance=0.500
Node 7: acceptance=0.500
Node 8: acceptance=0.850
Node 9: acceptance=0.500
Node 10: acceptance=0.500
Node 11: acceptance=0.500
Node 12: acceptance=0.000
Node 13: acceptance=0.000
Node 14: acceptance=0.000
Node 15: acceptance=0.050
Node 16: acceptance=0.000
Node 17: acceptance=0.050
Node 18: acceptance=0.500
Node 19: acceptance=0.500

Performance Summary:
  - Sketching time: 18.674s (98.8%)
  - Filtering time: 0.013s (0.1%)
  - Aggregation time: 0.218s (1.2%)
  - Total time: 18.906s
  - Mean acceptance rate: 0.337

COARSE Algorithm Properties:
  - Original dimension: 6,603,710
  - Sketch size: 1000
  - Compression ratio: 19.9x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
