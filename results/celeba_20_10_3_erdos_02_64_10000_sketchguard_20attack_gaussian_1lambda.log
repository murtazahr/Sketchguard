Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 4500 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
Degree statistics: avg=4.80, min=2, max=7
Attack: Compromised 4/20 nodes: [5, 12, 13, 17]
Attack type: gaussian, lambda: 1.0
Model variant: baseline
Model parameters: 2,219,692
COARSE Node 0:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 2,219,692 parameters
  - Config: COARSEConfig(gamma=2, kappa=1, alpha=0.5, min_neighbors=1, sketch_size=1000, network_seed=987654321, attack_detection_window=5)
  - Sketch size: 1000
  - Compression ratio: 2219.7x
  - Complexity: O(d + N×k) = O(2,219,692 + 20×1000)
  - Theoretical speedup vs BALANCE: 19.8x
Initial test acc across nodes: mean=0.4978 ± 0.0208
Round 001: test acc mean=0.6583 ± 0.0494 | min=0.5197 max=0.7200
         : test loss mean=0.6810 ± 0.0038
         : individual accs = ['0.706140', '0.674439', '0.621118', '0.704663', '0.567901', '0.613100', '0.658515', '0.624667', '0.634683', '0.682624', '0.664336', '0.695111', '0.707465', '0.700862', '0.641459', '0.671616', '0.692374', '0.665782', '0.719965', '0.519720']
         : correct/total = [(805, 1140), (781, 1158), (700, 1127), (816, 1158), (644, 1134), (702, 1145), (754, 1145), (704, 1127), (721, 1136), (770, 1128), (760, 1144), (782, 1125), (815, 1152), (813, 1160), (721, 1124), (769, 1145), (799, 1154), (753, 1131), (833, 1157), (593, 1141)]
         : compromised: 0.6718, honest: 0.6550
         : sketchguard stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.6627 ± 0.0527 | min=0.5170 max=0.7333
         : test loss mean=0.6639 ± 0.0131
         : individual accs = ['0.652632', '0.663212', '0.681455', '0.674439', '0.543210', '0.517031', '0.682096', '0.667258', '0.733275', '0.702128', '0.701049', '0.684444', '0.693576', '0.595690', '0.667260', '0.674236', '0.705373', '0.640141', '0.713915', '0.660824']
         : correct/total = [(744, 1140), (768, 1158), (768, 1127), (781, 1158), (616, 1134), (592, 1145), (781, 1145), (752, 1127), (833, 1136), (792, 1128), (802, 1144), (770, 1125), (799, 1152), (691, 1160), (750, 1124), (772, 1145), (814, 1154), (724, 1131), (826, 1157), (754, 1141)]
         : compromised: 0.6116, honest: 0.6754
         : sketchguard stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.7117 ± 0.0464 | min=0.6076 max=0.7826
         : test loss mean=0.6255 ± 0.0319
         : individual accs = ['0.702632', '0.688256', '0.723159', '0.760794', '0.607584', '0.639301', '0.743231', '0.693878', '0.782570', '0.758865', '0.752622', '0.751111', '0.653646', '0.713793', '0.709075', '0.721397', '0.728769', '0.634836', '0.759723', '0.708151']
         : correct/total = [(801, 1140), (797, 1158), (815, 1127), (881, 1158), (689, 1134), (732, 1145), (851, 1145), (782, 1127), (889, 1136), (856, 1128), (861, 1144), (845, 1125), (753, 1152), (828, 1160), (797, 1124), (826, 1145), (841, 1154), (718, 1131), (879, 1157), (808, 1141)]
         : compromised: 0.6604, honest: 0.7245
         : sketchguard stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.7650 ± 0.0346 | min=0.7144 max=0.8327
         : test loss mean=0.5586 ± 0.0491
         : individual accs = ['0.725439', '0.729706', '0.750665', '0.800518', '0.730159', '0.723144', '0.742358', '0.771961', '0.832746', '0.820035', '0.810315', '0.791111', '0.724826', '0.748276', '0.772242', '0.767686', '0.766031', '0.714412', '0.798617', '0.779141']
         : correct/total = [(827, 1140), (845, 1158), (846, 1127), (927, 1158), (828, 1134), (828, 1145), (850, 1145), (870, 1127), (946, 1136), (925, 1128), (927, 1144), (890, 1125), (835, 1152), (868, 1160), (868, 1124), (879, 1145), (884, 1154), (808, 1131), (924, 1157), (889, 1141)]
         : compromised: 0.7277, honest: 0.7743
         : sketchguard stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.8050 ± 0.0326 | min=0.7223 max=0.8590
         : test loss mean=0.4804 ± 0.0502
         : individual accs = ['0.800000', '0.787565', '0.722272', '0.841105', '0.791887', '0.772926', '0.809607', '0.793256', '0.856514', '0.859043', '0.847902', '0.824889', '0.763889', '0.808621', '0.791815', '0.806987', '0.811958', '0.770115', '0.824546', '0.814198']
         : correct/total = [(912, 1140), (912, 1158), (814, 1127), (974, 1158), (898, 1134), (885, 1145), (927, 1145), (894, 1127), (973, 1136), (969, 1128), (970, 1144), (928, 1125), (880, 1152), (938, 1160), (890, 1124), (924, 1145), (937, 1154), (871, 1131), (954, 1157), (929, 1141)]
         : compromised: 0.7789, honest: 0.8115
         : sketchguard stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.8316 ± 0.0262 | min=0.7604 max=0.8759
         : test loss mean=0.4135 ± 0.0365
         : individual accs = ['0.828947', '0.835924', '0.810115', '0.854922', '0.829806', '0.848908', '0.840175', '0.838509', '0.870599', '0.844858', '0.875874', '0.845333', '0.820312', '0.794828', '0.799822', '0.812227', '0.838821', '0.760389', '0.829732', '0.851884']
         : correct/total = [(945, 1140), (968, 1158), (913, 1127), (990, 1158), (941, 1134), (972, 1145), (962, 1145), (945, 1127), (989, 1136), (953, 1128), (1002, 1144), (951, 1125), (945, 1152), (922, 1160), (899, 1124), (930, 1145), (968, 1154), (860, 1131), (960, 1157), (972, 1141)]
         : compromised: 0.8061, honest: 0.8380
         : sketchguard stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.8521 ± 0.0145 | min=0.8253 max=0.8760
         : test loss mean=0.3613 ± 0.0247
         : individual accs = ['0.848246', '0.867012', '0.833185', '0.864421', '0.843915', '0.875983', '0.857642', '0.848270', '0.860915', '0.875887', '0.847902', '0.869333', '0.836806', '0.856897', '0.839858', '0.825328', '0.863951', '0.829355', '0.850475', '0.846626']
         : correct/total = [(967, 1140), (1004, 1158), (939, 1127), (1001, 1158), (957, 1134), (1003, 1145), (982, 1145), (956, 1127), (978, 1136), (988, 1128), (970, 1144), (978, 1125), (964, 1152), (994, 1160), (944, 1124), (945, 1145), (997, 1154), (938, 1131), (984, 1157), (966, 1141)]
         : compromised: 0.8498, honest: 0.8527
         : sketchguard stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.8679 ± 0.0101 | min=0.8479 max=0.8873
         : test loss mean=0.3250 ± 0.0144
         : individual accs = ['0.865789', '0.881693', '0.863354', '0.867012', '0.865079', '0.887336', '0.882096', '0.866903', '0.875000', '0.862589', '0.854021', '0.870222', '0.863715', '0.862931', '0.883452', '0.858515', '0.876083', '0.847922', '0.866033', '0.858019']
         : correct/total = [(987, 1140), (1021, 1158), (973, 1127), (1004, 1158), (981, 1134), (1016, 1145), (1010, 1145), (977, 1127), (994, 1136), (973, 1128), (977, 1144), (979, 1125), (995, 1152), (1001, 1160), (993, 1124), (983, 1145), (1011, 1154), (959, 1131), (1002, 1157), (979, 1141)]
         : compromised: 0.8655, honest: 0.8685
         : sketchguard stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.8724 ± 0.0140 | min=0.8418 max=0.8873
         : test loss mean=0.3054 ± 0.0240
         : individual accs = ['0.883333', '0.886874', '0.844720', '0.886874', '0.865961', '0.887336', '0.881223', '0.874002', '0.883803', '0.885638', '0.875874', '0.880000', '0.869792', '0.872414', '0.871886', '0.861135', '0.880416', '0.844385', '0.841832', '0.870289']
         : correct/total = [(1007, 1140), (1027, 1158), (952, 1127), (1027, 1158), (982, 1134), (1016, 1145), (1009, 1145), (985, 1127), (1004, 1136), (999, 1128), (1002, 1144), (990, 1125), (1002, 1152), (1012, 1160), (980, 1124), (986, 1145), (1016, 1154), (955, 1131), (974, 1157), (993, 1141)]
         : compromised: 0.8685, honest: 0.8734
         : sketchguard stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.8820 ± 0.0103 | min=0.8607 max=0.8963
         : test loss mean=0.2841 ± 0.0144
         : individual accs = ['0.893860', '0.891192', '0.860692', '0.890328', '0.881834', '0.882969', '0.875983', '0.881100', '0.889085', '0.896277', '0.875000', '0.892444', '0.882812', '0.893966', '0.890569', '0.867249', '0.884749', '0.874447', '0.864304', '0.871166']
         : correct/total = [(1019, 1140), (1032, 1158), (970, 1127), (1031, 1158), (1000, 1134), (1011, 1145), (1003, 1145), (993, 1127), (1010, 1136), (1011, 1128), (1001, 1144), (1004, 1125), (1017, 1152), (1037, 1160), (1001, 1124), (993, 1145), (1021, 1154), (989, 1131), (1000, 1157), (994, 1141)]
         : compromised: 0.8835, honest: 0.8816
         : sketchguard stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: sketchguard
Attack: gaussian, 20.0% compromised
Final accuracy - Compromised: 0.8835, Honest: 0.8816
Overall test accuracy: mean=0.8820 ± 0.0103

=== COARSE SUMMARY ===
Node 0: acceptance=0.833
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=0.750
Node 4: acceptance=0.750
Node 5: acceptance=0.600
Node 6: acceptance=0.800
Node 7: acceptance=0.600
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=0.750
Node 11: acceptance=0.714
Node 12: acceptance=0.857
Node 13: acceptance=1.000
Node 14: acceptance=0.429
Node 15: acceptance=0.667
Node 16: acceptance=0.600
Node 17: acceptance=0.800
Node 18: acceptance=1.000
Node 19: acceptance=1.000

=== PARALLEL EXECUTION TIME (realistic for distributed system) ===
  COMMUNICATION (max across nodes):
    - Sketch transfer: 0.000s (0.0%)
    - Model fetch (accepted): 0.000s (0.0%)
  COMPUTATION (max across nodes):
    - Sketching: 0.269s (93.8%)
    - Filtering: 0.001s (0.3%)
    - Aggregation: 0.017s (5.9%)
  TOTALS:
    - Total computation: 0.287s (100.0%)
    - Total communication: 0.000s (0.0%)
    - Total parallel time: 0.287s

=== PER-NODE AVERAGE TIME ===
  - Sketching: 0.172s
  - Filtering: 0.000s
  - Aggregation: 0.007s
  - Sketch transfer: 0.000s
  - Model fetch: 0.000s
  - Total per node: 0.180s

=== TOTAL COMPUTATIONAL WORK (sum across all nodes) ===
  - Total sketching: 3.440s
  - Total filtering: 0.008s
  - Total aggregation: 0.144s
  - Total sketch transfer: 0.000s
  - Total model fetch: 0.000s
  - Grand total: 3.592s
  - Mean acceptance rate: 0.807

COARSE Algorithm Properties:
  - Original dimension: 2,219,692
  - Sketch size: 1000
  - Compression ratio: 19.8x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
