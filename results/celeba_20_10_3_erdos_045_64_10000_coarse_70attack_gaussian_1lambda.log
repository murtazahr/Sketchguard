Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 99
Attack: Compromised 14/20 nodes: [1, 2, 3, 5, 6, 8, 11, 12, 13, 14, 15, 17, 18, 19]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8693 ± 0.0890
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.507759', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (589, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5172, honest: 0.5145
         : coarse stats = ['Node 0: acc_rate=0.333', 'Node 1: acc_rate=0.400', 'Node 2: acc_rate=0.375']...
Round 002: test acc mean=0.5478 ± 0.0999 | min=0.4911 max=0.8500
         : test loss mean=0.7543 ± 0.1487
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.510204', '0.841549', '0.491135', '0.525350', '0.498667', '0.522569', '0.850000', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (575, 1127), (956, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (986, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5616, honest: 0.5155
         : coarse stats = ['Node 0: acc_rate=0.333', 'Node 1: acc_rate=0.400', 'Node 2: acc_rate=0.375']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5172, honest: 0.5145
         : coarse stats = ['Node 0: acc_rate=0.556', 'Node 1: acc_rate=0.600', 'Node 2: acc_rate=0.542']...
Round 004: test acc mean=0.5010 ± 0.0185 | min=0.4731 max=0.5387
         : test loss mean=1553.2961 ± 2829.0794
         : individual accs = ['0.528070', '0.485320', '0.487134', '0.531088', '0.477072', '0.484716', '0.520524', '0.498669', '0.538732', '0.506206', '0.486888', '0.498667', '0.473090', '0.488793', '0.488434', '0.516157', '0.515598', '0.508400', '0.503889', '0.482910']
         : correct/total = [(602, 1140), (562, 1158), (549, 1127), (615, 1158), (541, 1134), (555, 1145), (596, 1145), (562, 1127), (612, 1136), (571, 1128), (557, 1144), (561, 1125), (545, 1152), (567, 1160), (549, 1124), (591, 1145), (595, 1154), (575, 1131), (583, 1157), (551, 1141)]
         : compromised: 0.5006, honest: 0.5021
         : coarse stats = ['Node 0: acc_rate=0.604', 'Node 1: acc_rate=0.675', 'Node 2: acc_rate=0.656']...
Round 005: test acc mean=0.5108 ± 0.0181 | min=0.4786 max=0.5625
         : test loss mean=689.2556 ± 934.3966
         : individual accs = ['0.507895', '0.495682', '0.494232', '0.528497', '0.521164', '0.515284', '0.478603', '0.498669', '0.562500', '0.493794', '0.532343', '0.502222', '0.517361', '0.508621', '0.517794', '0.488210', '0.523397', '0.500442', '0.511668', '0.517967']
         : correct/total = [(579, 1140), (574, 1158), (557, 1127), (612, 1158), (591, 1134), (590, 1145), (548, 1145), (562, 1127), (639, 1136), (557, 1128), (609, 1144), (565, 1125), (596, 1152), (590, 1160), (582, 1124), (559, 1145), (604, 1154), (566, 1131), (592, 1157), (591, 1141)]
         : compromised: 0.5099, honest: 0.5129
         : coarse stats = ['Node 0: acc_rate=0.683', 'Node 1: acc_rate=0.720', 'Node 2: acc_rate=0.725']...
Round 006: test acc mean=0.4990 ± 0.0210 | min=0.4384 max=0.5344
         : test loss mean=517.2333 ± 427.7317
         : individual accs = ['0.507895', '0.484456', '0.505768', '0.529361', '0.534392', '0.498690', '0.480349', '0.490683', '0.438380', '0.508865', '0.477273', '0.489778', '0.489583', '0.503448', '0.516904', '0.516157', '0.483536', '0.493369', '0.518583', '0.511832']
         : correct/total = [(579, 1140), (561, 1158), (570, 1127), (613, 1158), (606, 1134), (571, 1145), (550, 1145), (553, 1127), (498, 1136), (574, 1128), (546, 1144), (551, 1125), (564, 1152), (584, 1160), (581, 1124), (591, 1145), (558, 1154), (558, 1131), (600, 1157), (584, 1141)]
         : compromised: 0.4983, honest: 0.5004
         : coarse stats = ['Node 0: acc_rate=0.708', 'Node 1: acc_rate=0.750', 'Node 2: acc_rate=0.771']...
Round 007: test acc mean=0.5014 ± 0.0220 | min=0.4393 max=0.5289
         : test loss mean=1.2726 ± 0.5625
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.471503', '0.522046', '0.485590', '0.521397', '0.503993', '0.439261', '0.491135', '0.474650', '0.510222', '0.522569', '0.506897', '0.517794', '0.482969', '0.515598', '0.491600', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (546, 1158), (592, 1134), (556, 1145), (597, 1145), (568, 1127), (499, 1136), (554, 1128), (543, 1144), (574, 1125), (602, 1152), (588, 1160), (582, 1124), (553, 1145), (595, 1154), (556, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.4994, honest: 0.5061
         : coarse stats = ['Node 0: acc_rate=0.655', 'Node 1: acc_rate=0.700', 'Node 2: acc_rate=0.714']...
Round 008: test acc mean=0.5131 ± 0.0201 | min=0.4375 max=0.5377
         : test loss mean=0.7358 ± 0.0738
         : individual accs = ['0.524561', '0.508636', '0.537711', '0.528497', '0.522046', '0.516157', '0.521397', '0.503993', '0.437500', '0.496454', '0.525350', '0.498667', '0.527778', '0.506897', '0.519573', '0.517031', '0.520797', '0.508400', '0.522904', '0.517967']
         : correct/total = [(598, 1140), (589, 1158), (606, 1127), (612, 1158), (592, 1134), (591, 1145), (597, 1145), (568, 1127), (497, 1136), (560, 1128), (601, 1144), (561, 1125), (608, 1152), (588, 1160), (584, 1124), (592, 1145), (601, 1154), (575, 1131), (605, 1157), (591, 1141)]
         : compromised: 0.5121, honest: 0.5155
         : coarse stats = ['Node 0: acc_rate=0.615', 'Node 1: acc_rate=0.663', 'Node 2: acc_rate=0.672']...
Round 009: test acc mean=0.5256 ± 0.0169 | min=0.4969 max=0.5647
         : test loss mean=0.6925 ± 0.0053
         : individual accs = ['0.540351', '0.502591', '0.511091', '0.528497', '0.537919', '0.513537', '0.524017', '0.508429', '0.525528', '0.554965', '0.525350', '0.496889', '0.537326', '0.564655', '0.518683', '0.529258', '0.544194', '0.508400', '0.522040', '0.517967']
         : correct/total = [(616, 1140), (582, 1158), (576, 1127), (612, 1158), (610, 1134), (588, 1145), (600, 1145), (573, 1127), (597, 1136), (626, 1128), (601, 1144), (559, 1125), (619, 1152), (655, 1160), (583, 1124), (606, 1145), (628, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5215, honest: 0.5352
         : coarse stats = ['Node 0: acc_rate=0.583', 'Node 1: acc_rate=0.633', 'Node 2: acc_rate=0.639']...
Round 010: test acc mean=0.5206 ± 0.0185 | min=0.4929 max=0.5625
         : test loss mean=0.6920 ± 0.0036
         : individual accs = ['0.528070', '0.500000', '0.493345', '0.527634', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.492908', '0.526224', '0.498667', '0.545139', '0.507759', '0.540925', '0.520524', '0.547660', '0.508400', '0.531547', '0.517967']
         : correct/total = [(602, 1140), (579, 1158), (556, 1127), (611, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (556, 1128), (602, 1144), (561, 1125), (628, 1152), (589, 1160), (608, 1124), (596, 1145), (632, 1154), (575, 1131), (615, 1157), (591, 1141)]
         : compromised: 0.5207, honest: 0.5202
         : coarse stats = ['Node 0: acc_rate=0.558', 'Node 1: acc_rate=0.610', 'Node 2: acc_rate=0.613']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: gaussian, 70.0% compromised
Final accuracy - Compromised: 0.5207, Honest: 0.5202
Overall test accuracy: mean=0.5206 ± 0.0185

=== COARSE SUMMARY ===
Node 0: acceptance=0.558
Node 1: acceptance=0.610
Node 2: acceptance=0.613
Node 3: acceptance=0.657
Node 4: acceptance=0.600
Node 5: acceptance=0.520
Node 6: acceptance=0.525
Node 7: acceptance=0.536
Node 8: acceptance=0.486
Node 9: acceptance=0.582
Node 10: acceptance=0.550
Node 11: acceptance=0.533
Node 12: acceptance=0.558
Node 13: acceptance=0.467
Node 14: acceptance=0.521
Node 15: acceptance=0.578
Node 16: acceptance=0.571
Node 17: acceptance=0.675
Node 18: acceptance=0.525
Node 19: acceptance=0.510

Performance Summary:
  - Sketching time: 0.049s (9.4%)
  - Filtering time: 0.007s (1.4%)
  - Aggregation time: 0.466s (89.2%)
  - Total time: 0.523s
  - Mean acceptance rate: 0.559

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
