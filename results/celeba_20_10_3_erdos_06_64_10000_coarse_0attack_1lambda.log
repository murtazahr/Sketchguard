Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 126
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8371 ± 0.0777
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.7689 ± 0.0463
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5216 ± 0.0181 | min=0.4911 max=0.5625
         : test loss mean=0.6960 ± 0.0639
         : individual accs = ['0.531579', '0.510363', '0.493345', '0.528497', '0.524691', '0.533624', '0.544978', '0.503993', '0.562500', '0.491135', '0.527098', '0.500444', '0.534722', '0.507759', '0.517794', '0.517031', '0.550260', '0.508400', '0.522040', '0.522349']
         : correct/total = [(606, 1140), (591, 1158), (556, 1127), (612, 1158), (595, 1134), (611, 1145), (624, 1145), (568, 1127), (639, 1136), (554, 1128), (603, 1144), (563, 1125), (616, 1152), (589, 1160), (582, 1124), (592, 1145), (635, 1154), (575, 1131), (604, 1157), (596, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5248 ± 0.0173 | min=0.4911 max=0.5625
         : test loss mean=0.6675 ± 0.0392
         : individual accs = ['0.528947', '0.508636', '0.497782', '0.556131', '0.522928', '0.516157', '0.537118', '0.505768', '0.562500', '0.491135', '0.527098', '0.544000', '0.534722', '0.520690', '0.522242', '0.517904', '0.524263', '0.513705', '0.538462', '0.525855']
         : correct/total = [(603, 1140), (589, 1158), (561, 1127), (644, 1158), (593, 1134), (591, 1145), (615, 1145), (570, 1127), (639, 1136), (554, 1128), (603, 1144), (612, 1125), (616, 1152), (604, 1160), (587, 1124), (593, 1145), (605, 1154), (581, 1131), (623, 1157), (600, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5663 ± 0.0465 | min=0.4920 max=0.6858
         : test loss mean=0.6198 ± 0.0401
         : individual accs = ['0.534211', '0.515544', '0.661934', '0.555268', '0.552910', '0.535371', '0.613100', '0.542147', '0.574824', '0.492021', '0.546329', '0.605333', '0.685764', '0.588793', '0.565836', '0.566812', '0.582322', '0.520778', '0.524633', '0.561788']
         : correct/total = [(609, 1140), (597, 1158), (746, 1127), (643, 1158), (627, 1134), (613, 1145), (702, 1145), (611, 1127), (653, 1136), (555, 1128), (625, 1144), (681, 1125), (790, 1152), (683, 1160), (636, 1124), (649, 1145), (672, 1154), (589, 1131), (607, 1157), (641, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.6715 ± 0.0617 | min=0.5367 max=0.7986
         : test loss mean=0.5537 ± 0.0325
         : individual accs = ['0.657018', '0.631261', '0.682343', '0.708117', '0.569665', '0.742358', '0.728384', '0.716060', '0.722711', '0.580674', '0.687937', '0.617778', '0.798611', '0.651724', '0.652135', '0.665502', '0.687175', '0.536693', '0.669836', '0.724803']
         : correct/total = [(749, 1140), (731, 1158), (769, 1127), (820, 1158), (646, 1134), (850, 1145), (834, 1145), (807, 1127), (821, 1136), (655, 1128), (787, 1144), (695, 1125), (920, 1152), (756, 1160), (733, 1124), (762, 1145), (793, 1154), (607, 1131), (775, 1157), (827, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.7189 ± 0.0435 | min=0.6020 max=0.7986
         : test loss mean=0.5228 ± 0.0278
         : individual accs = ['0.755263', '0.682211', '0.752440', '0.718480', '0.691358', '0.748472', '0.758079', '0.703638', '0.742958', '0.601950', '0.734266', '0.754667', '0.798611', '0.742241', '0.697509', '0.650655', '0.716638', '0.673740', '0.745895', '0.709027']
         : correct/total = [(861, 1140), (790, 1158), (848, 1127), (832, 1158), (784, 1134), (857, 1145), (868, 1145), (793, 1127), (844, 1136), (679, 1128), (840, 1144), (849, 1125), (920, 1152), (861, 1160), (784, 1124), (745, 1145), (827, 1154), (762, 1131), (863, 1157), (809, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.7947 ± 0.0550 | min=0.6845 max=0.8684
         : test loss mean=0.4836 ± 0.0329
         : individual accs = ['0.799123', '0.689983', '0.833185', '0.754750', '0.848325', '0.828821', '0.833188', '0.801242', '0.769366', '0.703901', '0.791084', '0.868444', '0.864583', '0.820690', '0.852313', '0.732751', '0.833622', '0.801945', '0.782195', '0.684487']
         : correct/total = [(911, 1140), (799, 1158), (939, 1127), (874, 1158), (962, 1134), (949, 1145), (954, 1145), (903, 1127), (874, 1136), (794, 1128), (905, 1144), (977, 1125), (996, 1152), (952, 1160), (958, 1124), (839, 1145), (962, 1154), (907, 1131), (905, 1157), (781, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.7955 ± 0.0361 | min=0.7261 max=0.8533
         : test loss mean=0.4689 ± 0.0280
         : individual accs = ['0.742105', '0.796200', '0.791482', '0.808290', '0.786596', '0.843668', '0.822707', '0.814552', '0.766725', '0.726064', '0.806818', '0.825778', '0.853299', '0.843966', '0.807829', '0.741485', '0.786828', '0.752431', '0.764045', '0.829974']
         : correct/total = [(846, 1140), (922, 1158), (892, 1127), (936, 1158), (892, 1134), (966, 1145), (942, 1145), (918, 1127), (871, 1136), (819, 1128), (923, 1144), (929, 1125), (983, 1152), (979, 1160), (908, 1124), (849, 1145), (908, 1154), (851, 1131), (884, 1157), (947, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.8380 ± 0.0324 | min=0.7729 max=0.8987
         : test loss mean=0.4374 ± 0.0226
         : individual accs = ['0.832456', '0.829016', '0.858917', '0.851468', '0.843034', '0.853275', '0.873362', '0.831411', '0.827465', '0.789007', '0.851399', '0.898667', '0.889757', '0.811207', '0.864769', '0.772926', '0.824957', '0.782493', '0.818496', '0.855390']
         : correct/total = [(949, 1140), (960, 1158), (968, 1127), (986, 1158), (956, 1134), (977, 1145), (1000, 1145), (937, 1127), (940, 1136), (890, 1128), (974, 1144), (1011, 1125), (1025, 1152), (941, 1160), (972, 1124), (885, 1145), (952, 1154), (885, 1131), (947, 1157), (976, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Overall test accuracy: mean=0.8380 ± 0.0324

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.036s (3.5%)
  - Filtering time: 0.009s (0.9%)
  - Aggregation time: 0.978s (95.6%)
  - Total time: 1.024s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
