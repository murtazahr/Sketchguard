Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 99
Attack: Compromised 6/20 nodes: [5, 12, 13, 14, 17, 18]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5104 ± 0.0169 | min=0.4785 max=0.5599
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.506045', '0.493345', '0.487910', '0.513228', '0.512664', '0.510044', '0.503993', '0.559859', '0.491135', '0.522727', '0.499556', '0.522569', '0.506034', '0.509786', '0.516157', '0.515598', '0.508400', '0.522040', '0.478528']
         : correct/total = [(603, 1140), (586, 1158), (556, 1127), (565, 1158), (582, 1134), (587, 1145), (584, 1145), (568, 1127), (636, 1136), (554, 1128), (598, 1144), (562, 1125), (602, 1152), (587, 1160), (573, 1124), (591, 1145), (595, 1154), (575, 1131), (604, 1157), (546, 1141)]
         : compromised: 0.5136, honest: 0.5091
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.4881 ± 0.0124 | min=0.4657 max=0.5148
         : test loss mean=7.9516 ± 19.0705
         : individual accs = ['0.496491', '0.501727', '0.494232', '0.487047', '0.478836', '0.486463', '0.467249', '0.480923', '0.465669', '0.491135', '0.495629', '0.475556', '0.514757', '0.506897', '0.483986', '0.480349', '0.482669', '0.493369', '0.501296', '0.478528']
         : correct/total = [(566, 1140), (581, 1158), (557, 1127), (564, 1158), (543, 1134), (557, 1145), (535, 1145), (542, 1127), (529, 1136), (554, 1128), (567, 1144), (535, 1125), (593, 1152), (588, 1160), (544, 1124), (550, 1145), (557, 1154), (558, 1131), (580, 1157), (546, 1141)]
         : compromised: 0.4978, honest: 0.4840
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.4909 ± 0.0192 | min=0.4428 max=0.5285
         : test loss mean=0.7217 ± 0.0481
         : individual accs = ['0.472807', '0.497409', '0.493345', '0.528497', '0.477954', '0.485590', '0.478603', '0.496007', '0.442782', '0.491135', '0.525350', '0.499556', '0.477431', '0.506897', '0.482206', '0.482969', '0.484402', '0.491600', '0.522040', '0.482033']
         : correct/total = [(539, 1140), (576, 1158), (556, 1127), (612, 1158), (542, 1134), (556, 1145), (548, 1145), (559, 1127), (503, 1136), (554, 1128), (601, 1144), (562, 1125), (550, 1152), (588, 1160), (542, 1124), (553, 1145), (559, 1154), (556, 1131), (604, 1157), (550, 1141)]
         : compromised: 0.4943, honest: 0.4895
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5517 ± 0.0435 | min=0.4419 max=0.6344
         : test loss mean=2.0585 ± 3.3317
         : individual accs = ['0.574561', '0.543178', '0.634428', '0.618307', '0.577601', '0.535371', '0.554585', '0.493345', '0.441901', '0.491135', '0.552448', '0.584000', '0.525174', '0.558621', '0.555160', '0.567686', '0.559792', '0.605659', '0.527226', '0.533742']
         : correct/total = [(655, 1140), (629, 1158), (715, 1127), (716, 1158), (655, 1134), (613, 1145), (635, 1145), (556, 1127), (502, 1136), (554, 1128), (632, 1144), (657, 1125), (605, 1152), (648, 1160), (624, 1124), (650, 1145), (646, 1154), (685, 1131), (610, 1157), (609, 1141)]
         : compromised: 0.5512, honest: 0.5519
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5153 ± 0.0134 | min=0.4889 max=0.5431
         : test loss mean=0.7059 ± 0.0351
         : individual accs = ['0.528070', '0.508636', '0.493345', '0.528497', '0.529101', '0.514410', '0.520524', '0.488909', '0.543134', '0.491135', '0.525350', '0.508444', '0.522569', '0.506897', '0.517794', '0.509170', '0.521664', '0.508400', '0.522040', '0.518843']
         : correct/total = [(602, 1140), (589, 1158), (556, 1127), (612, 1158), (600, 1134), (589, 1145), (596, 1145), (551, 1127), (617, 1136), (554, 1128), (601, 1144), (572, 1125), (602, 1152), (588, 1160), (582, 1124), (583, 1145), (602, 1154), (575, 1131), (604, 1157), (592, 1141)]
         : compromised: 0.5154, honest: 0.5153
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.6778 ± 0.0845 | min=0.4481 max=0.8187
         : test loss mean=1.3253 ± 2.2175
         : individual accs = ['0.707895', '0.666667', '0.740018', '0.818653', '0.674603', '0.761572', '0.724017', '0.655723', '0.448063', '0.491135', '0.757867', '0.699556', '0.690972', '0.644828', '0.718861', '0.649782', '0.699307', '0.685234', '0.593777', '0.728309']
         : correct/total = [(807, 1140), (772, 1158), (834, 1127), (948, 1158), (765, 1134), (872, 1145), (829, 1145), (739, 1127), (509, 1136), (554, 1128), (867, 1144), (787, 1125), (796, 1152), (748, 1160), (808, 1124), (744, 1145), (807, 1154), (775, 1131), (687, 1157), (831, 1141)]
         : compromised: 0.6825, honest: 0.6758
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.5206 ± 0.0176 | min=0.4911 max=0.5625
         : test loss mean=0.7123 ± 0.0902
         : individual accs = ['0.556140', '0.508636', '0.493345', '0.528497', '0.529101', '0.514410', '0.520524', '0.507542', '0.562500', '0.491135', '0.525350', '0.504889', '0.522569', '0.506897', '0.518683', '0.523144', '0.539861', '0.508400', '0.522040', '0.528484']
         : correct/total = [(634, 1140), (589, 1158), (556, 1127), (612, 1158), (600, 1134), (589, 1145), (596, 1145), (572, 1127), (639, 1136), (554, 1128), (601, 1144), (568, 1125), (602, 1152), (588, 1160), (583, 1124), (599, 1145), (623, 1154), (575, 1131), (604, 1157), (603, 1141)]
         : compromised: 0.5155, honest: 0.5228
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.7607 ± 0.0900 | min=0.4718 max=0.8454
         : test loss mean=0.9802 ± 1.5549
         : individual accs = ['0.772807', '0.835924', '0.837622', '0.845423', '0.788360', '0.832314', '0.794760', '0.717835', '0.471831', '0.595745', '0.798951', '0.771556', '0.784722', '0.798276', '0.796263', '0.730131', '0.755633', '0.835544', '0.656007', '0.794917']
         : correct/total = [(881, 1140), (968, 1158), (944, 1127), (979, 1158), (894, 1134), (953, 1145), (910, 1145), (809, 1127), (536, 1136), (672, 1128), (914, 1144), (868, 1125), (904, 1152), (926, 1160), (895, 1124), (836, 1145), (872, 1154), (945, 1131), (759, 1157), (907, 1141)]
         : compromised: 0.7839, honest: 0.7508
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.5222 ± 0.0167 | min=0.4911 max=0.5687
         : test loss mean=0.7089 ± 0.1132
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.527337', '0.514410', '0.524891', '0.528838', '0.568662', '0.491135', '0.525350', '0.513778', '0.522569', '0.506897', '0.543594', '0.523144', '0.528596', '0.508400', '0.522040', '0.535495']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (598, 1134), (589, 1145), (601, 1145), (596, 1127), (646, 1136), (554, 1128), (601, 1144), (578, 1125), (602, 1152), (588, 1160), (611, 1124), (599, 1145), (610, 1154), (575, 1131), (604, 1157), (611, 1141)]
         : compromised: 0.5197, honest: 0.5233
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.8044 ± 0.0888 | min=0.4780 max=0.8955
         : test loss mean=0.9235 ± 1.5930
         : individual accs = ['0.835088', '0.895509', '0.858917', '0.868739', '0.851852', '0.876856', '0.742358', '0.770186', '0.477993', '0.752660', '0.887238', '0.807111', '0.857639', '0.834483', '0.804270', '0.744978', '0.748700', '0.850575', '0.809853', '0.812445']
         : correct/total = [(952, 1140), (1037, 1158), (968, 1127), (1006, 1158), (966, 1134), (1004, 1145), (850, 1145), (868, 1127), (543, 1136), (849, 1128), (1015, 1144), (908, 1125), (988, 1152), (968, 1160), (904, 1124), (853, 1145), (864, 1154), (962, 1131), (937, 1157), (927, 1141)]
         : compromised: 0.8389, honest: 0.7896
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: directed_deviation, 30.0% compromised
Final accuracy - Compromised: 0.8389, Honest: 0.7896
Overall test accuracy: mean=0.8044 ± 0.0888

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.044s (5.4%)
  - Filtering time: 0.008s (1.0%)
  - Aggregation time: 0.765s (93.6%)
  - Total time: 0.817s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
