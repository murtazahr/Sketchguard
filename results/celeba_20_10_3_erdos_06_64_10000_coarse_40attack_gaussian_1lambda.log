Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 126
Attack: Compromised 8/20 nodes: [1, 5, 11, 12, 13, 14, 17, 18]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8443 ± 0.0769
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5124, honest: 0.5190
         : coarse stats = ['Node 0: acc_rate=0.562', 'Node 1: acc_rate=0.727', 'Node 2: acc_rate=0.500']...
Round 002: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.7811 ± 0.0702
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5124, honest: 0.5190
         : coarse stats = ['Node 0: acc_rate=0.562', 'Node 1: acc_rate=0.727', 'Node 2: acc_rate=0.500']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5124, honest: 0.5190
         : coarse stats = ['Node 0: acc_rate=0.708', 'Node 1: acc_rate=0.818', 'Node 2: acc_rate=0.667']...
Round 004: test acc mean=0.5121 ± 0.0211 | min=0.4808 max=0.5625
         : test loss mean=659.1566 ± 628.6098
         : individual accs = ['0.532456', '0.508636', '0.481810', '0.510363', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.486702', '0.480769', '0.499556', '0.552951', '0.488793', '0.517794', '0.516157', '0.515598', '0.488064', '0.519447', '0.517967']
         : correct/total = [(607, 1140), (589, 1158), (543, 1127), (591, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (549, 1128), (550, 1144), (562, 1125), (637, 1152), (567, 1160), (582, 1124), (591, 1145), (595, 1154), (552, 1131), (601, 1157), (591, 1141)]
         : compromised: 0.5112, honest: 0.5126
         : coarse stats = ['Node 0: acc_rate=0.750', 'Node 1: acc_rate=0.864', 'Node 2: acc_rate=0.750']...
Round 005: test acc mean=0.4947 ± 0.0184 | min=0.4640 max=0.5302
         : test loss mean=9020.2320 ± 38806.1196
         : individual accs = ['0.469298', '0.530225', '0.508429', '0.472366', '0.492063', '0.485590', '0.512664', '0.522626', '0.467430', '0.498227', '0.520979', '0.464000', '0.503472', '0.505172', '0.482206', '0.484716', '0.496534', '0.499558', '0.494382', '0.483786']
         : correct/total = [(535, 1140), (614, 1158), (573, 1127), (547, 1158), (558, 1134), (556, 1145), (587, 1145), (589, 1127), (531, 1136), (562, 1128), (596, 1144), (522, 1125), (580, 1152), (586, 1160), (542, 1124), (555, 1145), (573, 1154), (565, 1131), (572, 1157), (552, 1141)]
         : compromised: 0.4956, honest: 0.4941
         : coarse stats = ['Node 0: acc_rate=0.775', 'Node 1: acc_rate=0.764', 'Node 2: acc_rate=0.800']...
Round 006: test acc mean=0.5030 ± 0.0252 | min=0.4516 max=0.5607
         : test loss mean=83.7923 ± 69.1583
         : individual accs = ['0.528070', '0.501727', '0.522626', '0.451641', '0.477954', '0.492576', '0.555459', '0.504880', '0.560739', '0.515957', '0.491259', '0.505778', '0.493056', '0.514655', '0.475979', '0.484716', '0.484402', '0.506631', '0.488332', '0.503944']
         : correct/total = [(602, 1140), (581, 1158), (589, 1127), (523, 1158), (542, 1134), (564, 1145), (636, 1145), (569, 1127), (637, 1136), (582, 1128), (562, 1144), (569, 1125), (568, 1152), (597, 1160), (535, 1124), (555, 1145), (559, 1154), (573, 1131), (565, 1157), (575, 1141)]
         : compromised: 0.4973, honest: 0.5068
         : coarse stats = ['Node 0: acc_rate=0.812', 'Node 1: acc_rate=0.803', 'Node 2: acc_rate=0.833']...
Round 007: test acc mean=0.5060 ± 0.0206 | min=0.4712 max=0.5519
         : test loss mean=0.9122 ± 0.2270
         : individual accs = ['0.528947', '0.491364', '0.493345', '0.471503', '0.518519', '0.527511', '0.521397', '0.503106', '0.551937', '0.508865', '0.471154', '0.499556', '0.477431', '0.493103', '0.517794', '0.517031', '0.484402', '0.502210', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (569, 1158), (556, 1127), (546, 1158), (588, 1134), (604, 1145), (597, 1145), (567, 1127), (627, 1136), (574, 1128), (539, 1144), (562, 1125), (550, 1152), (572, 1160), (582, 1124), (592, 1145), (559, 1154), (568, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5039, honest: 0.5073
         : coarse stats = ['Node 0: acc_rate=0.759', 'Node 1: acc_rate=0.792', 'Node 2: acc_rate=0.786']...
Round 008: test acc mean=0.5171 ± 0.0336 | min=0.4401 max=0.5782
         : test loss mean=0.7201 ± 0.0485
         : individual accs = ['0.555263', '0.493092', '0.523514', '0.470639', '0.541446', '0.536245', '0.543231', '0.530612', '0.440141', '0.548759', '0.476399', '0.542222', '0.477431', '0.531034', '0.532918', '0.523144', '0.487002', '0.491600', '0.578220', '0.518843']
         : correct/total = [(633, 1140), (571, 1158), (590, 1127), (545, 1158), (614, 1134), (614, 1145), (622, 1145), (598, 1127), (500, 1136), (619, 1128), (545, 1144), (610, 1125), (550, 1152), (616, 1160), (599, 1124), (599, 1145), (562, 1154), (556, 1131), (669, 1157), (592, 1141)]
         : compromised: 0.5228, honest: 0.5132
         : coarse stats = ['Node 0: acc_rate=0.734', 'Node 1: acc_rate=0.784', 'Node 2: acc_rate=0.750']...
Round 009: test acc mean=0.5338 ± 0.0383 | min=0.4683 max=0.5983
         : test loss mean=0.6977 ± 0.0267
         : individual accs = ['0.553509', '0.527634', '0.584738', '0.471503', '0.585538', '0.574672', '0.598253', '0.514641', '0.468310', '0.518617', '0.474650', '0.519111', '0.479167', '0.546552', '0.530249', '0.533624', '0.551127', '0.564103', '0.518583', '0.561788']
         : correct/total = [(631, 1140), (611, 1158), (659, 1127), (546, 1158), (664, 1134), (658, 1145), (685, 1145), (580, 1127), (532, 1136), (585, 1128), (543, 1144), (584, 1125), (552, 1152), (634, 1160), (596, 1124), (611, 1145), (636, 1154), (638, 1131), (600, 1157), (641, 1141)]
         : compromised: 0.5325, honest: 0.5347
         : coarse stats = ['Node 0: acc_rate=0.715', 'Node 1: acc_rate=0.778', 'Node 2: acc_rate=0.722']...
Round 010: test acc mean=0.5812 ± 0.0422 | min=0.4810 max=0.6499
         : test loss mean=0.6738 ± 0.0196
         : individual accs = ['0.566667', '0.578584', '0.645075', '0.481002', '0.649912', '0.601747', '0.628821', '0.582964', '0.547535', '0.595745', '0.495629', '0.580444', '0.532118', '0.571552', '0.571174', '0.604367', '0.607452', '0.572944', '0.597234', '0.612621']
         : correct/total = [(646, 1140), (670, 1158), (727, 1127), (557, 1158), (737, 1134), (689, 1145), (720, 1145), (657, 1127), (622, 1136), (672, 1128), (567, 1144), (653, 1125), (613, 1152), (663, 1160), (642, 1124), (692, 1145), (701, 1154), (648, 1131), (691, 1157), (699, 1141)]
         : compromised: 0.5757, honest: 0.5848
         : coarse stats = ['Node 0: acc_rate=0.700', 'Node 1: acc_rate=0.773', 'Node 2: acc_rate=0.700']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: gaussian, 40.0% compromised
Final accuracy - Compromised: 0.5757, Honest: 0.5848
Overall test accuracy: mean=0.5812 ± 0.0422

=== COARSE SUMMARY ===
Node 0: acceptance=0.700
Node 1: acceptance=0.773
Node 2: acceptance=0.700
Node 3: acceptance=0.750
Node 4: acceptance=0.727
Node 5: acceptance=0.673
Node 6: acceptance=0.686
Node 7: acceptance=0.679
Node 8: acceptance=0.700
Node 9: acceptance=0.777
Node 10: acceptance=0.733
Node 11: acceptance=0.707
Node 12: acceptance=0.750
Node 13: acceptance=0.762
Node 14: acceptance=0.720
Node 15: acceptance=0.727
Node 16: acceptance=0.685
Node 17: acceptance=0.778
Node 18: acceptance=0.744
Node 19: acceptance=0.669

Performance Summary:
  - Sketching time: 0.043s (5.6%)
  - Filtering time: 0.009s (1.2%)
  - Aggregation time: 0.719s (93.2%)
  - Total time: 0.771s
  - Mean acceptance rate: 0.722

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
