Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 126
Attack: Compromised 6/20 nodes: [5, 12, 13, 14, 17, 18]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5186 ± 0.0203 | min=0.4911 max=0.5728
         : test loss mean=3.1660 ± 2.3395
         : individual accs = ['0.523684', '0.508636', '0.497782', '0.514680', '0.521164', '0.496070', '0.524017', '0.503106', '0.563380', '0.491135', '0.525350', '0.496000', '0.522569', '0.506897', '0.517794', '0.519651', '0.572790', '0.508400', '0.538462', '0.520596']
         : correct/total = [(597, 1140), (589, 1158), (561, 1127), (596, 1158), (591, 1134), (568, 1145), (600, 1145), (567, 1127), (640, 1136), (554, 1128), (601, 1144), (558, 1125), (602, 1152), (588, 1160), (582, 1124), (595, 1145), (661, 1154), (575, 1131), (623, 1157), (594, 1141)]
         : compromised: 0.5150, honest: 0.5201
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5162 ± 0.0151 | min=0.4911 max=0.5625
         : test loss mean=12.2687 ± 11.8974
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.501331', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.518683', '0.517031', '0.515598', '0.508400', '0.522040', '0.517090']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (565, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (583, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (590, 1141)]
         : compromised: 0.5155, honest: 0.5165
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=1.2052 ± 0.2674
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5154, honest: 0.5168
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5187 ± 0.0158 | min=0.4920 max=0.5634
         : test loss mean=3.9931 ± 2.7663
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.533624', '0.521397', '0.503993', '0.563380', '0.492021', '0.533217', '0.496889', '0.522569', '0.514655', '0.517794', '0.520524', '0.515598', '0.508400', '0.522040', '0.525855']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (611, 1145), (597, 1145), (568, 1127), (640, 1136), (555, 1128), (610, 1144), (559, 1125), (602, 1152), (597, 1160), (582, 1124), (596, 1145), (595, 1154), (575, 1131), (604, 1157), (600, 1141)]
         : compromised: 0.5198, honest: 0.5182
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8888 ± 0.1232
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5154, honest: 0.5168
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.5650 ± 0.0403 | min=0.5027 max=0.6578
         : test loss mean=2.8859 ± 1.7246
         : individual accs = ['0.542105', '0.608808', '0.588287', '0.584629', '0.579365', '0.586026', '0.536245', '0.526176', '0.608275', '0.502660', '0.534965', '0.507556', '0.615451', '0.657759', '0.536477', '0.609607', '0.547660', '0.529620', '0.557476', '0.541630']
         : correct/total = [(618, 1140), (705, 1158), (663, 1127), (677, 1158), (657, 1134), (671, 1145), (614, 1145), (593, 1127), (691, 1136), (567, 1128), (612, 1144), (571, 1125), (709, 1152), (763, 1160), (603, 1124), (698, 1145), (632, 1154), (599, 1131), (645, 1157), (618, 1141)]
         : compromised: 0.5805, honest: 0.5584
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.7757 ± 0.0967
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517904', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (593, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5154, honest: 0.5169
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.6478 ± 0.0612 | min=0.5621 max=0.8135
         : test loss mean=1.9469 ± 1.1557
         : individual accs = ['0.607018', '0.813472', '0.660160', '0.626943', '0.730159', '0.681223', '0.562445', '0.645963', '0.638204', '0.628546', '0.562063', '0.685333', '0.597222', '0.752586', '0.581851', '0.613974', '0.660312', '0.638373', '0.658600', '0.610868']
         : correct/total = [(692, 1140), (942, 1158), (744, 1127), (726, 1158), (828, 1134), (780, 1145), (644, 1145), (728, 1127), (725, 1136), (709, 1128), (643, 1144), (771, 1125), (688, 1152), (873, 1160), (654, 1124), (703, 1145), (762, 1154), (722, 1131), (762, 1157), (697, 1141)]
         : compromised: 0.6516, honest: 0.6461
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.5227 ± 0.0151 | min=0.5000 max=0.5634
         : test loss mean=0.7084 ± 0.0726
         : individual accs = ['0.528947', '0.508636', '0.534161', '0.533679', '0.524691', '0.514410', '0.521397', '0.503993', '0.563380', '0.500000', '0.528846', '0.552889', '0.522569', '0.506897', '0.517794', '0.526638', '0.516464', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (602, 1127), (618, 1158), (595, 1134), (589, 1145), (597, 1145), (568, 1127), (640, 1136), (564, 1128), (605, 1144), (622, 1125), (602, 1152), (588, 1160), (582, 1124), (603, 1145), (596, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5154, honest: 0.5258
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.6544 ± 0.0414 | min=0.5581 max=0.7253
         : test loss mean=1.8563 ± 1.1241
         : individual accs = ['0.605263', '0.708117', '0.617569', '0.658031', '0.690476', '0.648908', '0.558079', '0.663709', '0.677817', '0.698582', '0.612762', '0.656889', '0.669271', '0.682759', '0.580071', '0.643668', '0.725303', '0.641910', '0.674157', '0.673970']
         : correct/total = [(690, 1140), (820, 1158), (696, 1127), (762, 1158), (783, 1134), (743, 1145), (639, 1145), (748, 1127), (770, 1136), (788, 1128), (701, 1144), (739, 1125), (771, 1152), (792, 1160), (652, 1124), (737, 1145), (837, 1154), (726, 1131), (780, 1157), (769, 1141)]
         : compromised: 0.6495, honest: 0.6564
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: directed_deviation, 30.0% compromised
Final accuracy - Compromised: 0.6495, Honest: 0.6564
Overall test accuracy: mean=0.6544 ± 0.0414

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.042s (4.2%)
  - Filtering time: 0.009s (0.9%)
  - Aggregation time: 0.949s (94.9%)
  - Total time: 1.000s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
