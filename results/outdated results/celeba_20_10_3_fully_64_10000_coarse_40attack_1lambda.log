Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: fully, nodes: 20, edges: 190
Attack: Compromised 8/20 nodes: [1, 5, 11, 12, 13, 14, 17, 18]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.4986 ± 0.0218 | min=0.4541 max=0.5440
         : test loss mean=0.8450 ± 0.0833
         : individual accs = ['0.502632', '0.496546', '0.532387', '0.521589', '0.454145', '0.499563', '0.468996', '0.485359', '0.544014', '0.488475', '0.471154', '0.499556', '0.519965', '0.488793', '0.507117', '0.505677', '0.505199', '0.470380', '0.516854', '0.493427']
         : correct/total = [(573, 1140), (575, 1158), (600, 1127), (604, 1158), (515, 1134), (572, 1145), (537, 1145), (547, 1127), (618, 1136), (551, 1128), (539, 1144), (562, 1125), (599, 1152), (567, 1160), (570, 1124), (579, 1145), (583, 1154), (532, 1131), (598, 1157), (563, 1141)]
         : compromised: 0.4998, honest: 0.4978
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.4847 ± 0.0164 | min=0.4384 max=0.5098
         : test loss mean=20.6641 ± 8.8657
         : individual accs = ['0.464035', '0.493955', '0.503993', '0.472366', '0.482363', '0.484716', '0.472489', '0.502218', '0.438380', '0.509752', '0.472902', '0.504000', '0.480903', '0.492241', '0.482206', '0.480349', '0.483536', '0.488064', '0.506482', '0.478528']
         : correct/total = [(529, 1140), (572, 1158), (568, 1127), (547, 1158), (547, 1134), (555, 1145), (541, 1145), (566, 1127), (498, 1136), (575, 1128), (541, 1144), (567, 1125), (554, 1152), (571, 1160), (542, 1124), (550, 1145), (558, 1154), (552, 1131), (586, 1157), (546, 1141)]
         : compromised: 0.4916, honest: 0.4801
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.4890 ± 0.0197 | min=0.4375 max=0.5182
         : test loss mean=0.7508 ± 0.0593
         : individual accs = ['0.471053', '0.491364', '0.506655', '0.471503', '0.477954', '0.485590', '0.478603', '0.503993', '0.437500', '0.508865', '0.474650', '0.518222', '0.477431', '0.493103', '0.517794', '0.482969', '0.514731', '0.508400', '0.477960', '0.482033']
         : correct/total = [(537, 1140), (569, 1158), (571, 1127), (546, 1158), (542, 1134), (556, 1145), (548, 1145), (568, 1127), (497, 1136), (574, 1128), (543, 1144), (583, 1125), (550, 1152), (572, 1160), (582, 1124), (553, 1145), (594, 1154), (575, 1131), (553, 1157), (550, 1141)]
         : compromised: 0.4962, honest: 0.4842
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.6296 ± 0.0286 | min=0.5407 max=0.6790
         : test loss mean=1.6705 ± 0.5531
         : individual accs = ['0.628070', '0.601900', '0.629104', '0.646805', '0.637566', '0.636681', '0.588646', '0.654836', '0.621479', '0.652482', '0.612762', '0.639111', '0.651042', '0.655172', '0.620107', '0.618341', '0.540728', '0.679045', '0.640449', '0.637160']
         : correct/total = [(716, 1140), (697, 1158), (709, 1127), (749, 1158), (723, 1134), (729, 1145), (674, 1145), (738, 1127), (706, 1136), (736, 1128), (701, 1144), (719, 1125), (750, 1152), (760, 1160), (697, 1124), (708, 1145), (624, 1154), (768, 1131), (741, 1157), (727, 1141)]
         : compromised: 0.6404, honest: 0.6223
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5234 ± 0.0456 | min=0.4375 max=0.6399
         : test loss mean=0.6905 ± 0.0105
         : individual accs = ['0.528947', '0.508636', '0.574978', '0.508636', '0.614638', '0.485590', '0.479476', '0.580302', '0.437500', '0.510638', '0.639860', '0.500444', '0.522569', '0.506897', '0.517794', '0.486463', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (648, 1127), (589, 1158), (697, 1134), (556, 1145), (549, 1145), (654, 1127), (497, 1136), (576, 1128), (732, 1144), (563, 1125), (602, 1152), (588, 1160), (582, 1124), (557, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5090, honest: 0.5329
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.7645 ± 0.0266 | min=0.6969 max=0.8043
         : test loss mean=0.9537 ± 0.1803
         : individual accs = ['0.722807', '0.801382', '0.730257', '0.696891', '0.741623', '0.794760', '0.766812', '0.766637', '0.759683', '0.747340', '0.766608', '0.784889', '0.800347', '0.804310', '0.757117', '0.772052', '0.771231', '0.774536', '0.763181', '0.767748']
         : correct/total = [(824, 1140), (928, 1158), (823, 1127), (807, 1158), (841, 1134), (910, 1145), (878, 1145), (864, 1127), (863, 1136), (843, 1128), (877, 1144), (883, 1125), (922, 1152), (933, 1160), (851, 1124), (884, 1145), (890, 1154), (876, 1131), (883, 1157), (876, 1141)]
         : compromised: 0.7851, honest: 0.7508
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.6106 ± 0.0936 | min=0.5069 max=0.7727
         : test loss mean=0.6735 ± 0.0043
         : individual accs = ['0.702632', '0.513817', '0.732032', '0.758204', '0.623457', '0.564192', '0.717904', '0.692990', '0.509683', '0.598404', '0.534091', '0.577778', '0.522569', '0.506897', '0.517794', '0.551965', '0.569324', '0.512821', '0.772688', '0.732691']
         : correct/total = [(801, 1140), (595, 1158), (825, 1127), (878, 1158), (707, 1134), (646, 1145), (822, 1145), (781, 1127), (579, 1136), (675, 1128), (611, 1144), (650, 1125), (602, 1152), (588, 1160), (582, 1124), (632, 1145), (657, 1154), (580, 1131), (894, 1157), (836, 1141)]
         : compromised: 0.5611, honest: 0.6436
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.7930 ± 0.0195 | min=0.7328 max=0.8253
         : test loss mean=0.8475 ± 0.1978
         : individual accs = ['0.787719', '0.812608', '0.759539', '0.773748', '0.732804', '0.825328', '0.810480', '0.805679', '0.788732', '0.806738', '0.802448', '0.800889', '0.795139', '0.794828', '0.798932', '0.798253', '0.784229', '0.789567', '0.798617', '0.793164']
         : correct/total = [(898, 1140), (941, 1158), (856, 1127), (896, 1158), (831, 1134), (945, 1145), (928, 1145), (908, 1127), (896, 1136), (910, 1128), (918, 1144), (901, 1125), (916, 1152), (922, 1160), (898, 1124), (914, 1145), (905, 1154), (893, 1131), (924, 1157), (905, 1141)]
         : compromised: 0.8020, honest: 0.7870
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.6331 ± 0.0962 | min=0.5084 max=0.7760
         : test loss mean=0.6623 ± 0.0061
         : individual accs = ['0.528947', '0.509499', '0.763975', '0.727116', '0.776014', '0.561572', '0.755459', '0.623780', '0.750880', '0.608156', '0.584790', '0.625778', '0.631944', '0.517241', '0.517794', '0.575546', '0.595321', '0.508400', '0.772688', '0.727432']
         : correct/total = [(603, 1140), (590, 1158), (861, 1127), (842, 1158), (880, 1134), (643, 1145), (865, 1145), (703, 1127), (853, 1136), (686, 1128), (669, 1144), (704, 1125), (728, 1152), (600, 1160), (582, 1124), (659, 1145), (687, 1154), (575, 1131), (894, 1157), (830, 1141)]
         : compromised: 0.5806, honest: 0.6681
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.8113 ± 0.0117 | min=0.7840 max=0.8323
         : test loss mean=0.7432 ± 0.1202
         : individual accs = ['0.807018', '0.813472', '0.793256', '0.807427', '0.783951', '0.832314', '0.818341', '0.820763', '0.796655', '0.803191', '0.821678', '0.798222', '0.822917', '0.820690', '0.813167', '0.810480', '0.805893', '0.814324', '0.820225', '0.822962']
         : correct/total = [(920, 1140), (942, 1158), (894, 1127), (935, 1158), (889, 1134), (953, 1145), (937, 1145), (925, 1127), (905, 1136), (906, 1128), (940, 1144), (898, 1125), (948, 1152), (952, 1160), (914, 1124), (928, 1145), (930, 1154), (921, 1131), (949, 1157), (939, 1141)]
         : compromised: 0.8169, honest: 0.8076
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: fully, Aggregation: coarse
Attack: directed_deviation, 40.0% compromised
Final accuracy - Compromised: 0.8169, Honest: 0.8076
Overall test accuracy: mean=0.8113 ± 0.0117

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.048s (3.3%)
  - Filtering time: 0.013s (0.9%)
  - Aggregation time: 1.389s (95.8%)
  - Total time: 1.449s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
