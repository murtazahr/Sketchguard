Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
Attack: Compromised 4/20 nodes: [5, 12, 13, 17]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5116 ± 0.0189 | min=0.4724 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.529825', '0.508636', '0.493345', '0.472366', '0.522046', '0.514410', '0.496070', '0.529725', '0.562500', '0.491135', '0.525350', '0.484444', '0.516493', '0.506897', '0.506228', '0.513537', '0.515598', '0.503095', '0.522040', '0.517967']
         : correct/total = [(604, 1140), (589, 1158), (556, 1127), (547, 1158), (592, 1134), (589, 1145), (568, 1145), (597, 1127), (639, 1136), (554, 1128), (601, 1144), (545, 1125), (595, 1152), (588, 1160), (569, 1124), (588, 1145), (595, 1154), (569, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5102, honest: 0.5119
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5138 ± 0.0152 | min=0.4911 max=0.5625
         : test loss mean=2.5477 ± 5.3110
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.506908', '0.523810', '0.510044', '0.516157', '0.502218', '0.562500', '0.491135', '0.525350', '0.495111', '0.522569', '0.506897', '0.515125', '0.510917', '0.507799', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (587, 1158), (594, 1134), (584, 1145), (591, 1145), (566, 1127), (639, 1136), (554, 1128), (601, 1144), (557, 1125), (602, 1152), (588, 1160), (579, 1124), (585, 1145), (586, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5120, honest: 0.5142
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5166 ± 0.0210 | min=0.4844 max=0.5625
         : test loss mean=0.7746 ± 0.0909
         : individual accs = ['0.529825', '0.508636', '0.493345', '0.528497', '0.500882', '0.485590', '0.531004', '0.548358', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.548932', '0.517031', '0.484402', '0.508400', '0.522040', '0.517967']
         : correct/total = [(604, 1140), (589, 1158), (556, 1127), (612, 1158), (568, 1134), (556, 1145), (608, 1145), (618, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (617, 1124), (592, 1145), (559, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5059, honest: 0.5193
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5258 ± 0.0424 | min=0.4933 max=0.6994
         : test loss mean=3.9247 ± 5.6024
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.563380', '0.497340', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.699387']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (640, 1136), (561, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (798, 1141)]
         : compromised: 0.5131, honest: 0.5290
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5334 ± 0.0326 | min=0.4933 max=0.6065
         : test loss mean=0.7428 ± 0.1104
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.527634', '0.604056', '0.558079', '0.521397', '0.503993', '0.582746', '0.506206', '0.525350', '0.498667', '0.522569', '0.563793', '0.518683', '0.517031', '0.550260', '0.508400', '0.522040', '0.606486']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (611, 1158), (685, 1134), (639, 1145), (597, 1145), (568, 1127), (662, 1136), (571, 1128), (601, 1144), (561, 1125), (602, 1152), (654, 1160), (583, 1124), (592, 1145), (635, 1154), (575, 1131), (604, 1157), (692, 1141)]
         : compromised: 0.5382, honest: 0.5322
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.5491 ± 0.0787 | min=0.4933 max=0.8089
         : test loss mean=3.3115 ± 4.2836
         : individual accs = ['0.528947', '0.536269', '0.493345', '0.528497', '0.522046', '0.514410', '0.527511', '0.503993', '0.725352', '0.633865', '0.525350', '0.498667', '0.522569', '0.518966', '0.517794', '0.517031', '0.515598', '0.510168', '0.533276', '0.808940']
         : correct/total = [(603, 1140), (621, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (604, 1145), (568, 1127), (824, 1136), (715, 1128), (601, 1144), (561, 1125), (602, 1152), (602, 1160), (582, 1124), (592, 1145), (595, 1154), (577, 1131), (617, 1157), (923, 1141)]
         : compromised: 0.5165, honest: 0.5573
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.5818 ± 0.1142 | min=0.4933 max=0.8379
         : test loss mean=0.6663 ± 0.1196
         : individual accs = ['0.528947', '0.640760', '0.493345', '0.528497', '0.522046', '0.518777', '0.521397', '0.508429', '0.800176', '0.750887', '0.525350', '0.498667', '0.522569', '0.815517', '0.539146', '0.517031', '0.518198', '0.508400', '0.539326', '0.837862']
         : correct/total = [(603, 1140), (742, 1158), (556, 1127), (612, 1158), (592, 1134), (594, 1145), (597, 1145), (573, 1127), (909, 1136), (847, 1128), (601, 1144), (561, 1125), (602, 1152), (946, 1160), (606, 1124), (592, 1145), (598, 1154), (575, 1131), (624, 1157), (956, 1141)]
         : compromised: 0.5913, honest: 0.5794
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.6242 ± 0.1113 | min=0.5049 max=0.8677
         : test loss mean=1.6358 ± 1.8493
         : individual accs = ['0.567544', '0.684801', '0.583851', '0.628670', '0.543210', '0.534498', '0.655022', '0.504880', '0.825704', '0.812943', '0.551573', '0.508444', '0.729167', '0.583621', '0.517794', '0.523144', '0.518198', '0.722370', '0.620570', '0.867660']
         : correct/total = [(647, 1140), (793, 1158), (658, 1127), (728, 1158), (616, 1134), (612, 1145), (750, 1145), (569, 1127), (938, 1136), (917, 1128), (631, 1144), (572, 1125), (840, 1152), (677, 1160), (582, 1124), (599, 1145), (598, 1154), (817, 1131), (718, 1157), (990, 1141)]
         : compromised: 0.6424, honest: 0.6196
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.6120 ± 0.1410 | min=0.5058 max=0.8913
         : test loss mean=0.6428 ± 0.1715
         : individual accs = ['0.528947', '0.820380', '0.540373', '0.528497', '0.529101', '0.514410', '0.521397', '0.529725', '0.812500', '0.835106', '0.525350', '0.505778', '0.522569', '0.879310', '0.541815', '0.517031', '0.515598', '0.508400', '0.672429', '0.891323']
         : correct/total = [(603, 1140), (950, 1158), (609, 1127), (612, 1158), (600, 1134), (589, 1145), (597, 1145), (597, 1127), (923, 1136), (942, 1128), (601, 1144), (569, 1125), (602, 1152), (1020, 1160), (609, 1124), (592, 1145), (595, 1154), (575, 1131), (778, 1157), (1017, 1141)]
         : compromised: 0.6062, honest: 0.6135
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.6750 ± 0.1207 | min=0.5084 max=0.8817
         : test loss mean=1.3501 ± 1.4628
         : individual accs = ['0.607895', '0.819516', '0.663709', '0.674439', '0.682540', '0.527511', '0.702183', '0.516415', '0.835387', '0.869681', '0.622378', '0.508444', '0.752604', '0.635345', '0.518683', '0.583406', '0.538995', '0.789567', '0.770095', '0.881683']
         : correct/total = [(693, 1140), (949, 1158), (748, 1127), (781, 1158), (774, 1134), (604, 1145), (804, 1145), (582, 1127), (949, 1136), (981, 1128), (712, 1144), (572, 1125), (867, 1152), (737, 1160), (583, 1124), (668, 1145), (622, 1154), (893, 1131), (891, 1157), (1006, 1141)]
         : compromised: 0.6763, honest: 0.6747
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: directed_deviation, 20.0% compromised
Final accuracy - Compromised: 0.6763, Honest: 0.6747
Overall test accuracy: mean=0.6750 ± 0.1207

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.040s (8.7%)
  - Filtering time: 0.005s (1.1%)
  - Aggregation time: 0.413s (90.2%)
  - Total time: 0.458s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
