Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
Attack: Compromised 12/20 nodes: [1, 2, 3, 5, 8, 11, 12, 13, 14, 15, 17, 18]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522928', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (593, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5167, honest: 0.5159
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.400']...
Round 002: test acc mean=0.7271 ± 0.1806 | min=0.4931 max=0.9224
         : test loss mean=18.7819 ± 79.7299
         : individual accs = ['0.886842', '0.508636', '0.493345', '0.528497', '0.922399', '0.915284', '0.904803', '0.841171', '0.827465', '0.864362', '0.829545', '0.498667', '0.522569', '0.493103', '0.820285', '0.517031', '0.901213', '0.508400', '0.853068', '0.905346']
         : correct/total = [(1011, 1140), (589, 1158), (556, 1127), (612, 1158), (1046, 1134), (1048, 1145), (1036, 1145), (948, 1127), (940, 1136), (975, 1128), (949, 1144), (561, 1125), (602, 1152), (572, 1160), (922, 1124), (592, 1145), (1040, 1154), (575, 1131), (987, 1157), (1033, 1141)]
         : compromised: 0.6239, honest: 0.8820
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.400']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5167, honest: 0.5158
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.667', 'Node 2: acc_rate=0.600']...
Round 004: test acc mean=0.5173 ± 0.0293 | min=0.4711 max=0.6043
         : test loss mean=164915.1160 ± 399893.3418
         : individual accs = ['0.471053', '0.537133', '0.527063', '0.528497', '0.544092', '0.512664', '0.479476', '0.514641', '0.561620', '0.491135', '0.524476', '0.495111', '0.517361', '0.604310', '0.505338', '0.482969', '0.518198', '0.506631', '0.513397', '0.510955']
         : correct/total = [(537, 1140), (622, 1158), (594, 1127), (612, 1158), (617, 1134), (587, 1145), (549, 1145), (580, 1127), (638, 1136), (554, 1128), (600, 1144), (557, 1125), (596, 1152), (701, 1160), (568, 1124), (553, 1145), (598, 1154), (573, 1131), (594, 1157), (583, 1141)]
         : compromised: 0.5243, honest: 0.5068
         : coarse stats = ['Node 0: acc_rate=0.625', 'Node 1: acc_rate=0.625', 'Node 2: acc_rate=0.650']...
Round 005: test acc mean=0.5052 ± 0.0229 | min=0.4557 max=0.5625
         : test loss mean=3218.9593 ± 6230.7104
         : individual accs = ['0.517544', '0.494819', '0.506655', '0.532815', '0.477954', '0.489083', '0.496070', '0.496894', '0.562500', '0.455674', '0.527098', '0.508444', '0.520833', '0.506897', '0.497331', '0.528384', '0.511265', '0.508400', '0.472774', '0.491674']
         : correct/total = [(590, 1140), (573, 1158), (571, 1127), (617, 1158), (542, 1134), (560, 1145), (568, 1145), (560, 1127), (639, 1136), (514, 1128), (603, 1144), (572, 1125), (600, 1152), (588, 1160), (559, 1124), (605, 1145), (590, 1154), (575, 1131), (547, 1157), (561, 1141)]
         : compromised: 0.5107, honest: 0.4968
         : coarse stats = ['Node 0: acc_rate=0.700', 'Node 1: acc_rate=0.700', 'Node 2: acc_rate=0.640']...
Round 006: test acc mean=0.5043 ± 0.0313 | min=0.4401 max=0.5590
         : test loss mean=5334.7877 ± 12842.9036
         : individual accs = ['0.526316', '0.494819', '0.509317', '0.512090', '0.549383', '0.558952', '0.479476', '0.503993', '0.440141', '0.531915', '0.527972', '0.505778', '0.480035', '0.475000', '0.532028', '0.462882', '0.551127', '0.490716', '0.471910', '0.482033']
         : correct/total = [(600, 1140), (573, 1158), (574, 1127), (593, 1158), (623, 1134), (640, 1145), (549, 1145), (568, 1127), (500, 1136), (600, 1128), (604, 1144), (569, 1125), (553, 1152), (551, 1160), (598, 1124), (530, 1145), (636, 1154), (555, 1131), (546, 1157), (550, 1141)]
         : compromised: 0.4945, honest: 0.5190
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.667', 'Node 2: acc_rate=0.700']...
Round 007: test acc mean=0.5168 ± 0.0143 | min=0.4925 max=0.5625
         : test loss mean=1103939.1505 ± 2050136.8956
         : individual accs = ['0.528947', '0.508636', '0.492458', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.507092', '0.525350', '0.495111', '0.519097', '0.514655', '0.517794', '0.517031', '0.508666', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (555, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (572, 1128), (601, 1144), (557, 1125), (598, 1152), (597, 1160), (582, 1124), (592, 1145), (587, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5167, honest: 0.5169
         : coarse stats = ['Node 0: acc_rate=0.643', 'Node 1: acc_rate=0.643', 'Node 2: acc_rate=0.600']...
Round 008: test acc mean=0.5148 ± 0.0239 | min=0.4774 max=0.5774
         : test loss mean=322937.8959 ± 1406209.6673
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.478603', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.477431', '0.493966', '0.517794', '0.517031', '0.515598', '0.577365', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (548, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (550, 1152), (573, 1160), (582, 1124), (592, 1145), (595, 1154), (653, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5176, honest: 0.5105
         : coarse stats = ['Node 0: acc_rate=0.583', 'Node 1: acc_rate=0.583', 'Node 2: acc_rate=0.525']...
Round 009: test acc mean=0.5137 ± 0.0261 | min=0.4526 max=0.5711
         : test loss mean=116.5140 ± 501.0098
         : individual accs = ['0.571053', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.478603', '0.503993', '0.563380', '0.533688', '0.525350', '0.498667', '0.479167', '0.452586', '0.517794', '0.517031', '0.515598', '0.509284', '0.522040', '0.517967']
         : correct/total = [(651, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (548, 1145), (568, 1127), (640, 1136), (602, 1128), (601, 1144), (561, 1125), (552, 1152), (525, 1160), (582, 1124), (592, 1145), (595, 1154), (576, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5087, honest: 0.5210
         : coarse stats = ['Node 0: acc_rate=0.537', 'Node 1: acc_rate=0.537', 'Node 2: acc_rate=0.467']...
Round 010: test acc mean=0.5265 ± 0.0326 | min=0.4647 max=0.6199
         : test loss mean=262.1184 ± 1138.7713
         : individual accs = ['0.528947', '0.510363', '0.507542', '0.528497', '0.619929', '0.515284', '0.521397', '0.585626', '0.562500', '0.491135', '0.551573', '0.498667', '0.522569', '0.464655', '0.517794', '0.517031', '0.527730', '0.508400', '0.522040', '0.527607']
         : correct/total = [(603, 1140), (591, 1158), (572, 1127), (612, 1158), (703, 1134), (590, 1145), (597, 1145), (660, 1127), (639, 1136), (554, 1128), (631, 1144), (561, 1125), (602, 1152), (539, 1160), (582, 1124), (592, 1145), (609, 1154), (575, 1131), (604, 1157), (602, 1141)]
         : compromised: 0.5146, honest: 0.5442
         : coarse stats = ['Node 0: acc_rate=0.533', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.420']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: gaussian, 60.0% compromised
Final accuracy - Compromised: 0.5146, Honest: 0.5442
Overall test accuracy: mean=0.5265 ± 0.0326

=== COARSE SUMMARY ===
Node 0: acceptance=0.533
Node 1: acceptance=0.500
Node 2: acceptance=0.420
Node 3: acceptance=0.500
Node 4: acceptance=0.550
Node 5: acceptance=0.520
Node 6: acceptance=0.440
Node 7: acceptance=0.600
Node 8: acceptance=0.700
Node 9: acceptance=0.567
Node 10: acceptance=0.600
Node 11: acceptance=0.429
Node 12: acceptance=0.486
Node 13: acceptance=0.500
Node 14: acceptance=0.414
Node 15: acceptance=0.500
Node 16: acceptance=0.440
Node 17: acceptance=0.460
Node 18: acceptance=0.550
Node 19: acceptance=0.700

Performance Summary:
  - Sketching time: 0.046s (14.5%)
  - Filtering time: 0.005s (1.6%)
  - Aggregation time: 0.264s (83.9%)
  - Total time: 0.315s
  - Mean acceptance rate: 0.520

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
