Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: ring, nodes: 20, edges: 20
Attack: Compromised 16/20 nodes: [1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5134 ± 0.0188 | min=0.4767 max=0.5660
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.532815', '0.493345', '0.476684', '0.522046', '0.514410', '0.521397', '0.503993', '0.566021', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.502183', '0.515598', '0.491600', '0.522040', '0.515337']
         : correct/total = [(603, 1140), (617, 1158), (556, 1127), (552, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (643, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (575, 1145), (595, 1154), (556, 1131), (604, 1157), (588, 1141)]
         : compromised: 0.5124, honest: 0.5176
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.4926 ± 0.0174 | min=0.4569 max=0.5377
         : test loss mean=50.5436 ± 62.6726
         : individual accs = ['0.537719', '0.506045', '0.506655', '0.500000', '0.475309', '0.490830', '0.502183', '0.504880', '0.456866', '0.515957', '0.488636', '0.502222', '0.468750', '0.493103', '0.482206', '0.482969', '0.484402', '0.491600', '0.481417', '0.480280']
         : correct/total = [(613, 1140), (586, 1158), (571, 1127), (579, 1158), (539, 1134), (562, 1145), (575, 1145), (569, 1127), (519, 1136), (582, 1128), (559, 1144), (565, 1125), (540, 1152), (572, 1160), (542, 1124), (553, 1145), (559, 1154), (556, 1131), (557, 1157), (548, 1141)]
         : compromised: 0.4906, honest: 0.5006
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=1.3300 ± 0.9266
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5160, honest: 0.5176
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5203 ± 0.0353 | min=0.4541 max=0.5851
         : test loss mean=7.8432 ± 9.4435
         : individual accs = ['0.585088', '0.547496', '0.504880', '0.527634', '0.454145', '0.550218', '0.577293', '0.509317', '0.556338', '0.507092', '0.478147', '0.528889', '0.480035', '0.471552', '0.512456', '0.526638', '0.515598', '0.564103', '0.479689', '0.530237']
         : correct/total = [(667, 1140), (634, 1158), (569, 1127), (611, 1158), (515, 1134), (630, 1145), (661, 1145), (574, 1127), (632, 1136), (572, 1128), (547, 1144), (595, 1125), (553, 1152), (547, 1160), (576, 1124), (603, 1145), (595, 1154), (638, 1131), (555, 1157), (605, 1141)]
         : compromised: 0.5214, honest: 0.5160
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5168 ± 0.0196 | min=0.4867 max=0.5650
         : test loss mean=1.0041 ± 0.7733
         : individual accs = ['0.528070', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.486655', '0.517031', '0.564991', '0.508400', '0.512532', '0.517967']
         : correct/total = [(602, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (547, 1124), (592, 1145), (652, 1154), (575, 1131), (593, 1157), (591, 1141)]
         : compromised: 0.5135, honest: 0.5298
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.5512 ± 0.0663 | min=0.4605 max=0.6617
         : test loss mean=8.9417 ± 9.7363
         : individual accs = ['0.605263', '0.647668', '0.460515', '0.577720', '0.499118', '0.612227', '0.588646', '0.522626', '0.610915', '0.499113', '0.474650', '0.501333', '0.477431', '0.493103', '0.487544', '0.630568', '0.535529', '0.643678', '0.494382', '0.661700']
         : correct/total = [(690, 1140), (750, 1158), (519, 1127), (669, 1158), (566, 1134), (701, 1145), (674, 1145), (589, 1127), (694, 1136), (563, 1128), (543, 1144), (564, 1125), (550, 1152), (572, 1160), (548, 1124), (722, 1145), (618, 1154), (728, 1131), (572, 1157), (755, 1141)]
         : compromised: 0.5538, honest: 0.5406
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.5207 ± 0.0206 | min=0.4911 max=0.5738
         : test loss mean=1.2014 ± 1.0572
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.518519', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.573843', '0.517031', '0.549393', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (588, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (645, 1124), (592, 1145), (634, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5195, honest: 0.5252
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.5694 ± 0.0718 | min=0.4781 max=0.6976
         : test loss mean=9.4142 ± 10.4482
         : individual accs = ['0.605263', '0.661485', '0.506655', '0.555268', '0.537919', '0.634061', '0.586900', '0.522626', '0.661092', '0.519504', '0.478147', '0.500444', '0.479167', '0.494828', '0.495552', '0.662009', '0.566724', '0.681698', '0.540190', '0.697634']
         : correct/total = [(690, 1140), (766, 1158), (571, 1127), (643, 1158), (610, 1134), (726, 1145), (672, 1145), (589, 1127), (751, 1136), (586, 1128), (547, 1144), (563, 1125), (552, 1152), (574, 1160), (557, 1124), (758, 1145), (654, 1154), (771, 1131), (625, 1157), (796, 1141)]
         : compromised: 0.5722, honest: 0.5581
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.5174 ± 0.0158 | min=0.4911 max=0.5625
         : test loss mean=1.2283 ± 1.0089
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.521164', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.540036', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (591, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (607, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5174, honest: 0.5174
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.5792 ± 0.0792 | min=0.4781 max=0.7169
         : test loss mean=10.3658 ± 12.0813
         : individual accs = ['0.562281', '0.675302', '0.502218', '0.569948', '0.569665', '0.649782', '0.604367', '0.527950', '0.691901', '0.526596', '0.478147', '0.502222', '0.479167', '0.496552', '0.496441', '0.693450', '0.574523', '0.698497', '0.568712', '0.716915']
         : correct/total = [(641, 1140), (782, 1158), (566, 1127), (660, 1158), (646, 1134), (744, 1145), (692, 1145), (595, 1127), (786, 1136), (594, 1128), (547, 1144), (565, 1125), (552, 1152), (576, 1160), (558, 1124), (794, 1145), (663, 1154), (790, 1131), (658, 1157), (818, 1141)]
         : compromised: 0.5844, honest: 0.5586
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: ring, Aggregation: coarse
Attack: directed_deviation, 80.0% compromised
Final accuracy - Compromised: 0.5844, Honest: 0.5586
Overall test accuracy: mean=0.5792 ± 0.0792

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.051s (18.8%)
  - Filtering time: 0.003s (1.2%)
  - Aggregation time: 0.219s (80.1%)
  - Total time: 0.273s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
