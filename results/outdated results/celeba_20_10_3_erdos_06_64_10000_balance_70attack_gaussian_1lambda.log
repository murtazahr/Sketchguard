Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 126
Attack: Compromised 14/20 nodes: [1, 2, 3, 5, 6, 8, 11, 12, 13, 14, 15, 17, 18, 19]
Attack type: gaussian, lambda: 1.0
BALANCE algorithm:
  - Model dimension: 30,758 parameters
  - Complexity: O(N×d) = O(20×30,758)
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8686 ± 0.0818
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5172, honest: 0.5145
Round 002: test acc mean=0.5173 ± 0.0148 | min=0.4911 max=0.5625
         : test loss mean=0.8089 ± 0.1044
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.523514', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (590, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5172, honest: 0.5178
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5172, honest: 0.5145
Round 004: test acc mean=0.4978 ± 0.0182 | min=0.4576 max=0.5290
         : test loss mean=368.3325 ± 210.6912
         : individual accs = ['0.471053', '0.501727', '0.493345', '0.474957', '0.477072', '0.514410', '0.506550', '0.506655', '0.497359', '0.472518', '0.496503', '0.512000', '0.516493', '0.493103', '0.517794', '0.457642', '0.505199', '0.498674', '0.528954', '0.513585']
         : correct/total = [(537, 1140), (581, 1158), (556, 1127), (550, 1158), (541, 1134), (589, 1145), (580, 1145), (571, 1127), (565, 1136), (533, 1128), (568, 1144), (576, 1125), (595, 1152), (572, 1160), (582, 1124), (524, 1145), (583, 1154), (564, 1131), (612, 1157), (586, 1141)]
         : compromised: 0.5019, honest: 0.4882
Round 005: test acc mean=0.5011 ± 0.0203 | min=0.4627 max=0.5337
         : test loss mean=561.1434 ± 810.5833
         : individual accs = ['0.470175', '0.491364', '0.506655', '0.489637', '0.486772', '0.489956', '0.521397', '0.495120', '0.482394', '0.533688', '0.507867', '0.509333', '0.462674', '0.493103', '0.504448', '0.530131', '0.486135', '0.533156', '0.533276', '0.494303']
         : correct/total = [(536, 1140), (569, 1158), (571, 1127), (567, 1158), (552, 1134), (561, 1145), (597, 1145), (558, 1127), (548, 1136), (602, 1128), (581, 1144), (573, 1125), (533, 1152), (572, 1160), (567, 1124), (607, 1145), (561, 1154), (603, 1131), (617, 1157), (564, 1141)]
         : compromised: 0.5030, honest: 0.4966
Round 006: test acc mean=0.5006 ± 0.0190 | min=0.4702 max=0.5458
         : test loss mean=297.3489 ± 229.8487
         : individual accs = ['0.470175', '0.491364', '0.509317', '0.545769', '0.477954', '0.485590', '0.520524', '0.503993', '0.482394', '0.513298', '0.524476', '0.499556', '0.477431', '0.506034', '0.507117', '0.486463', '0.515598', '0.491600', '0.522040', '0.482033']
         : correct/total = [(536, 1140), (569, 1158), (574, 1127), (632, 1158), (542, 1134), (556, 1145), (596, 1145), (568, 1127), (548, 1136), (579, 1128), (600, 1144), (562, 1125), (550, 1152), (587, 1160), (570, 1124), (557, 1145), (595, 1154), (556, 1131), (604, 1157), (550, 1141)]
         : compromised: 0.5005, honest: 0.5009
Round 007: test acc mean=0.4961 ± 0.0218 | min=0.4375 max=0.5285
         : test loss mean=1.1745 ± 0.7161
         : individual accs = ['0.471053', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.437500', '0.491135', '0.525350', '0.498667', '0.477431', '0.493103', '0.482206', '0.517031', '0.484402', '0.491600', '0.477960', '0.482033']
         : correct/total = [(537, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (497, 1136), (554, 1128), (601, 1144), (561, 1125), (550, 1152), (572, 1160), (542, 1124), (592, 1145), (559, 1154), (556, 1131), (553, 1157), (550, 1141)]
         : compromised: 0.4946, honest: 0.4997
Round 008: test acc mean=0.4916 ± 0.0205 | min=0.4375 max=0.5285
         : test loss mean=0.7909 ± 0.1290
         : individual accs = ['0.471053', '0.491364', '0.506655', '0.528497', '0.477954', '0.514410', '0.478603', '0.503993', '0.437500', '0.508865', '0.525350', '0.498667', '0.477431', '0.493103', '0.482206', '0.482969', '0.484402', '0.508400', '0.477960', '0.482033']
         : correct/total = [(537, 1140), (569, 1158), (571, 1127), (612, 1158), (542, 1134), (589, 1145), (548, 1145), (568, 1127), (497, 1136), (574, 1128), (601, 1144), (561, 1125), (550, 1152), (572, 1160), (542, 1124), (553, 1145), (559, 1154), (575, 1131), (553, 1157), (550, 1141)]
         : compromised: 0.4900, honest: 0.4953
Round 009: test acc mean=0.5033 ± 0.0217 | min=0.4375 max=0.5289
         : test loss mean=0.7046 ± 0.0241
         : individual accs = ['0.528947', '0.491364', '0.506655', '0.528497', '0.477954', '0.514410', '0.521397', '0.503993', '0.437500', '0.508865', '0.525350', '0.498667', '0.522569', '0.493103', '0.517794', '0.492576', '0.484402', '0.508400', '0.522040', '0.482033']
         : correct/total = [(603, 1140), (569, 1158), (571, 1127), (612, 1158), (542, 1134), (589, 1145), (597, 1145), (568, 1127), (497, 1136), (574, 1128), (601, 1144), (561, 1125), (602, 1152), (572, 1160), (582, 1124), (564, 1145), (559, 1154), (575, 1131), (604, 1157), (550, 1141)]
         : compromised: 0.5026, honest: 0.5049
Round 010: test acc mean=0.5133 ± 0.0175 | min=0.4812 max=0.5625
         : test loss mean=0.6938 ± 0.0033
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.492021', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.481223', '0.516464', '0.508400', '0.522040', '0.490798']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (555, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (551, 1145), (596, 1154), (575, 1131), (604, 1157), (560, 1141)]
         : compromised: 0.5127, honest: 0.5148

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: balance
Attack: gaussian, 70.0% compromised
Final accuracy - Compromised: 0.5127, Honest: 0.5148
Overall test accuracy: mean=0.5133 ± 0.0175

=== BALANCE SUMMARY ===
Node 0: acceptance=0.531
Node 1: acceptance=0.618
Node 2: acceptance=0.592
Node 3: acceptance=0.600
Node 4: acceptance=0.618
Node 5: acceptance=0.520
Node 6: acceptance=0.536
Node 7: acceptance=0.536
Node 8: acceptance=0.520
Node 9: acceptance=0.585
Node 10: acceptance=0.533
Node 11: acceptance=0.571
Node 12: acceptance=0.558
Node 13: acceptance=0.538
Node 14: acceptance=0.547
Node 15: acceptance=0.564
Node 16: acceptance=0.538
Node 17: acceptance=0.633
Node 18: acceptance=0.569
Node 19: acceptance=0.537

Performance Summary:
  - Distance computation time: 1.960s (44.2%)
  - Filtering time: 2.097s (47.3%)
  - Aggregation time: 0.375s (8.5%)
  - Total time: 4.433s
  - Mean acceptance rate: 0.562

BALANCE Algorithm Properties:
  - Model dimension: 30,758
  - No compression: Full parameter comparison
  - Theoretical complexity: O(deg(i)×d)
  - Approach: Full parameter filtering + averaging
