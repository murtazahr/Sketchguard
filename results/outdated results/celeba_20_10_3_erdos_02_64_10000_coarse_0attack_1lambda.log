/home/student.unimelb.edu.au/mrangwala/miniconda3/envs/edgedrift/lib/python3.12/site-packages/torch/_inductor/compile_fx.py:282: UserWarning: TensorFloat32 tensor cores for float32 matrix multiplication available but not enabled. Consider setting `torch.set_float32_matmul_precision('high')` for better performance.
  warnings.warn(
Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8502 ± 0.0957
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5206 ± 0.0152 | min=0.4911 max=0.5625
         : test loss mean=0.7362 ± 0.0797
         : individual accs = ['0.528947', '0.508636', '0.526176', '0.529361', '0.522046', '0.514410', '0.546725', '0.525288', '0.562500', '0.491135', '0.526224', '0.498667', '0.525174', '0.506897', '0.517794', '0.517904', '0.515598', '0.508400', '0.522904', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (593, 1127), (613, 1158), (592, 1134), (589, 1145), (626, 1145), (592, 1127), (639, 1136), (554, 1128), (602, 1144), (561, 1125), (605, 1152), (588, 1160), (582, 1124), (593, 1145), (595, 1154), (575, 1131), (605, 1157), (591, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5588 ± 0.0695 | min=0.4929 max=0.7345
         : test loss mean=0.6579 ± 0.0745
         : individual accs = ['0.688596', '0.513817', '0.534161', '0.533679', '0.545855', '0.583406', '0.734498', '0.503993', '0.582746', '0.492908', '0.536713', '0.500444', '0.618056', '0.507759', '0.518683', '0.518777', '0.532062', '0.508400', '0.522904', '0.697634']
         : correct/total = [(785, 1140), (595, 1158), (602, 1127), (618, 1158), (619, 1134), (668, 1145), (841, 1145), (568, 1127), (662, 1136), (556, 1128), (614, 1144), (563, 1125), (712, 1152), (589, 1160), (583, 1124), (594, 1145), (614, 1154), (575, 1131), (605, 1157), (796, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.6185 ± 0.0702 | min=0.5286 max=0.7644
         : test loss mean=0.5845 ± 0.0491
         : individual accs = ['0.585088', '0.563903', '0.675244', '0.689983', '0.571429', '0.609607', '0.719651', '0.571429', '0.622359', '0.578901', '0.712413', '0.764444', '0.603299', '0.571552', '0.568505', '0.542358', '0.528596', '0.539346', '0.612792', '0.738826']
         : correct/total = [(667, 1140), (653, 1158), (761, 1127), (799, 1158), (648, 1134), (698, 1145), (824, 1145), (644, 1127), (707, 1136), (653, 1128), (815, 1144), (860, 1125), (695, 1152), (663, 1160), (639, 1124), (621, 1145), (610, 1154), (610, 1131), (709, 1157), (843, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.6880 ± 0.0593 | min=0.5709 max=0.7839
         : test loss mean=0.5356 ± 0.0422
         : individual accs = ['0.686842', '0.763385', '0.777285', '0.664940', '0.731922', '0.621834', '0.749345', '0.647737', '0.700704', '0.570922', '0.707168', '0.667556', '0.783854', '0.606034', '0.676157', '0.641921', '0.719237', '0.605659', '0.686258', '0.751096']
         : correct/total = [(783, 1140), (884, 1158), (876, 1127), (770, 1158), (830, 1134), (712, 1145), (858, 1145), (730, 1127), (796, 1136), (644, 1128), (809, 1144), (751, 1125), (903, 1152), (703, 1160), (760, 1124), (735, 1145), (830, 1154), (685, 1131), (794, 1157), (857, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.7779 ± 0.0471 | min=0.6906 max=0.8668
         : test loss mean=0.4656 ± 0.0435
         : individual accs = ['0.815789', '0.750432', '0.824312', '0.822107', '0.754850', '0.724017', '0.801747', '0.800355', '0.806338', '0.690603', '0.805070', '0.754667', '0.851562', '0.740517', '0.782028', '0.767686', '0.773830', '0.700265', '0.724287', '0.866784']
         : correct/total = [(930, 1140), (869, 1158), (929, 1127), (952, 1158), (856, 1134), (829, 1145), (918, 1145), (902, 1127), (916, 1136), (779, 1128), (921, 1144), (849, 1125), (981, 1152), (859, 1160), (879, 1124), (879, 1145), (893, 1154), (792, 1131), (838, 1157), (989, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.8090 ± 0.0397 | min=0.7375 max=0.8730
         : test loss mean=0.4356 ± 0.0385
         : individual accs = ['0.861404', '0.797064', '0.816327', '0.756477', '0.873016', '0.837555', '0.782533', '0.819876', '0.827465', '0.744681', '0.833916', '0.849778', '0.835938', '0.762069', '0.737544', '0.777293', '0.792028', '0.809019', '0.795160', '0.870289']
         : correct/total = [(982, 1140), (923, 1158), (920, 1127), (876, 1158), (990, 1134), (959, 1145), (896, 1145), (924, 1127), (940, 1136), (840, 1128), (954, 1144), (956, 1125), (963, 1152), (884, 1160), (829, 1124), (890, 1145), (914, 1154), (915, 1131), (920, 1157), (993, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.8251 ± 0.0412 | min=0.7207 max=0.8694
         : test loss mean=0.4145 ± 0.0434
         : individual accs = ['0.839474', '0.778066', '0.838509', '0.862694', '0.844797', '0.825328', '0.843668', '0.844720', '0.844190', '0.720745', '0.863636', '0.822222', '0.867188', '0.835345', '0.817616', '0.789520', '0.722704', '0.846154', '0.825411', '0.869413']
         : correct/total = [(957, 1140), (901, 1158), (945, 1127), (999, 1158), (958, 1134), (945, 1145), (966, 1145), (952, 1127), (959, 1136), (813, 1128), (988, 1144), (925, 1125), (999, 1152), (969, 1160), (919, 1124), (904, 1145), (834, 1154), (957, 1131), (955, 1157), (992, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.8495 ± 0.0353 | min=0.7615 max=0.8932
         : test loss mean=0.3901 ± 0.0438
         : individual accs = ['0.848246', '0.781520', '0.831411', '0.864421', '0.865961', '0.879476', '0.844541', '0.863354', '0.844190', '0.761525', '0.891608', '0.879111', '0.893229', '0.865517', '0.878114', '0.813974', '0.814558', '0.854996', '0.822818', '0.891323']
         : correct/total = [(967, 1140), (905, 1158), (937, 1127), (1001, 1158), (982, 1134), (1007, 1145), (967, 1145), (973, 1127), (959, 1136), (859, 1128), (1020, 1144), (989, 1125), (1029, 1152), (1004, 1160), (987, 1124), (932, 1145), (940, 1154), (967, 1131), (952, 1157), (1017, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.8695 ± 0.0188 | min=0.8129 max=0.8976
         : test loss mean=0.3587 ± 0.0325
         : individual accs = ['0.892105', '0.843696', '0.852706', '0.879102', '0.889771', '0.860262', '0.871616', '0.872227', '0.860915', '0.812943', '0.875000', '0.880000', '0.897569', '0.880172', '0.879893', '0.859389', '0.867418', '0.867374', '0.859118', '0.887818']
         : correct/total = [(1017, 1140), (977, 1158), (961, 1127), (1018, 1158), (1009, 1134), (985, 1145), (998, 1145), (983, 1127), (978, 1136), (917, 1128), (1001, 1144), (990, 1125), (1034, 1152), (1021, 1160), (989, 1124), (984, 1145), (1001, 1154), (981, 1131), (994, 1157), (1013, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Overall test accuracy: mean=0.8695 ± 0.0188

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.036s (7.6%)
  - Filtering time: 0.005s (1.1%)
  - Aggregation time: 0.436s (91.3%)
  - Total time: 0.478s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
