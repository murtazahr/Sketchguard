Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 126
Attack: Compromised 6/20 nodes: [5, 12, 13, 14, 17, 18]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8516 ± 0.0774
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5154, honest: 0.5168
         : coarse stats = ['Node 0: acc_rate=0.688', 'Node 1: acc_rate=0.818', 'Node 2: acc_rate=0.667']...
Round 002: test acc mean=0.5164 ± 0.0149 | min=0.4911 max=0.5625
         : test loss mean=0.7752 ± 0.0637
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.505768', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (570, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5154, honest: 0.5169
         : coarse stats = ['Node 0: acc_rate=0.688', 'Node 1: acc_rate=0.818', 'Node 2: acc_rate=0.667']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5154, honest: 0.5168
         : coarse stats = ['Node 0: acc_rate=0.792', 'Node 1: acc_rate=0.879', 'Node 2: acc_rate=0.778']...
Round 004: test acc mean=0.4854 ± 0.0154 | min=0.4375 max=0.5106
         : test loss mean=428.8947 ± 432.9032
         : individual accs = ['0.471053', '0.503454', '0.506655', '0.471503', '0.477954', '0.485590', '0.478603', '0.492458', '0.437500', '0.510638', '0.486888', '0.501333', '0.489583', '0.493966', '0.481317', '0.482096', '0.485269', '0.491600', '0.477960', '0.482033']
         : correct/total = [(537, 1140), (583, 1158), (571, 1127), (546, 1158), (542, 1134), (556, 1145), (548, 1145), (555, 1127), (497, 1136), (576, 1128), (557, 1144), (564, 1125), (564, 1152), (573, 1160), (541, 1124), (552, 1145), (560, 1154), (556, 1131), (553, 1157), (550, 1141)]
         : compromised: 0.4867, honest: 0.4848
         : coarse stats = ['Node 0: acc_rate=0.812', 'Node 1: acc_rate=0.909', 'Node 2: acc_rate=0.833']...
Round 005: test acc mean=0.5136 ± 0.0273 | min=0.4594 max=0.5612
         : test loss mean=138.9673 ± 152.6685
         : individual accs = ['0.489474', '0.486183', '0.529725', '0.459413', '0.532628', '0.547598', '0.501310', '0.502218', '0.538732', '0.561170', '0.474650', '0.529778', '0.510417', '0.537069', '0.551601', '0.517904', '0.524263', '0.491600', '0.477960', '0.509202']
         : correct/total = [(558, 1140), (563, 1158), (597, 1127), (532, 1158), (604, 1134), (627, 1145), (574, 1145), (566, 1127), (612, 1136), (633, 1128), (543, 1144), (596, 1125), (588, 1152), (623, 1160), (620, 1124), (593, 1145), (605, 1154), (556, 1131), (553, 1157), (581, 1141)]
         : compromised: 0.5194, honest: 0.5112
         : coarse stats = ['Node 0: acc_rate=0.838', 'Node 1: acc_rate=0.836', 'Node 2: acc_rate=0.867']...
Round 006: test acc mean=0.4932 ± 0.0188 | min=0.4410 max=0.5423
         : test loss mean=94.1944 ± 78.1253
         : individual accs = ['0.478947', '0.491364', '0.493345', '0.542314', '0.491182', '0.490830', '0.482969', '0.492458', '0.441021', '0.493794', '0.480769', '0.512000', '0.510417', '0.507759', '0.491103', '0.512664', '0.485269', '0.496021', '0.484875', '0.484663']
         : correct/total = [(546, 1140), (569, 1158), (556, 1127), (628, 1158), (557, 1134), (562, 1145), (553, 1145), (555, 1127), (501, 1136), (557, 1128), (550, 1144), (576, 1125), (588, 1152), (589, 1160), (552, 1124), (587, 1145), (560, 1154), (561, 1131), (561, 1157), (553, 1141)]
         : compromised: 0.4968, honest: 0.4916
         : coarse stats = ['Node 0: acc_rate=0.844', 'Node 1: acc_rate=0.864', 'Node 2: acc_rate=0.889']...
Round 007: test acc mean=0.5182 ± 0.0180 | min=0.4911 max=0.5629
         : test loss mean=1.2854 ± 0.3388
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.562937', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (644, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5154, honest: 0.5195
         : coarse stats = ['Node 0: acc_rate=0.795', 'Node 1: acc_rate=0.831', 'Node 2: acc_rate=0.857']...
Round 008: test acc mean=0.5462 ± 0.0281 | min=0.4965 max=0.6325
         : test loss mean=0.7026 ± 0.0370
         : individual accs = ['0.632456', '0.531088', '0.500444', '0.545769', '0.555556', '0.549345', '0.537991', '0.546584', '0.544014', '0.496454', '0.565559', '0.575111', '0.561632', '0.556034', '0.517794', '0.534498', '0.554593', '0.560566', '0.522904', '0.536372']
         : correct/total = [(721, 1140), (615, 1158), (564, 1127), (632, 1158), (630, 1134), (629, 1145), (616, 1145), (616, 1127), (618, 1136), (560, 1128), (647, 1144), (647, 1125), (647, 1152), (645, 1160), (582, 1124), (612, 1145), (640, 1154), (634, 1131), (605, 1157), (612, 1141)]
         : compromised: 0.5447, honest: 0.5469
         : coarse stats = ['Node 0: acc_rate=0.773', 'Node 1: acc_rate=0.818', 'Node 2: acc_rate=0.833']...
Round 009: test acc mean=0.5991 ± 0.0345 | min=0.5462 max=0.6631
         : test loss mean=0.6605 ± 0.0240
         : individual accs = ['0.639474', '0.556131', '0.566992', '0.645941', '0.578483', '0.572926', '0.640175', '0.598935', '0.636444', '0.663121', '0.577797', '0.631111', '0.617188', '0.621552', '0.556940', '0.584279', '0.571924', '0.569408', '0.546240', '0.607362']
         : correct/total = [(729, 1140), (644, 1158), (639, 1127), (748, 1158), (656, 1134), (656, 1145), (733, 1145), (675, 1127), (723, 1136), (748, 1128), (661, 1144), (710, 1125), (711, 1152), (721, 1160), (626, 1124), (669, 1145), (660, 1154), (644, 1131), (632, 1157), (693, 1141)]
         : compromised: 0.5807, honest: 0.6070
         : coarse stats = ['Node 0: acc_rate=0.764', 'Node 1: acc_rate=0.818', 'Node 2: acc_rate=0.815']...
Round 010: test acc mean=0.6716 ± 0.0270 | min=0.5977 max=0.7033
         : test loss mean=0.6063 ± 0.0270
         : individual accs = ['0.687719', '0.627807', '0.670807', '0.696028', '0.686949', '0.644541', '0.681223', '0.684117', '0.703345', '0.699468', '0.653846', '0.703111', '0.686632', '0.695690', '0.663701', '0.675109', '0.647314', '0.597701', '0.677615', '0.648554']
         : correct/total = [(784, 1140), (727, 1158), (756, 1127), (806, 1158), (779, 1134), (738, 1145), (780, 1145), (771, 1127), (799, 1136), (789, 1128), (748, 1144), (791, 1125), (791, 1152), (807, 1160), (746, 1124), (773, 1145), (747, 1154), (676, 1131), (784, 1157), (740, 1141)]
         : compromised: 0.6610, honest: 0.6761
         : coarse stats = ['Node 0: acc_rate=0.756', 'Node 1: acc_rate=0.818', 'Node 2: acc_rate=0.800']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: gaussian, 30.0% compromised
Final accuracy - Compromised: 0.6610, Honest: 0.6761
Overall test accuracy: mean=0.6716 ± 0.0270

=== COARSE SUMMARY ===
Node 0: acceptance=0.756
Node 1: acceptance=0.818
Node 2: acceptance=0.800
Node 3: acceptance=0.812
Node 4: acceptance=0.827
Node 5: acceptance=0.767
Node 6: acceptance=0.743
Node 7: acceptance=0.771
Node 8: acceptance=0.700
Node 9: acceptance=0.823
Node 10: acceptance=0.800
Node 11: acceptance=0.779
Node 12: acceptance=0.808
Node 13: acceptance=0.800
Node 14: acceptance=0.753
Node 15: acceptance=0.773
Node 16: acceptance=0.746
Node 17: acceptance=0.867
Node 18: acceptance=0.781
Node 19: acceptance=0.744

Performance Summary:
  - Sketching time: 0.041s (5.0%)
  - Filtering time: 0.009s (1.1%)
  - Aggregation time: 0.778s (94.0%)
  - Total time: 0.828s
  - Mean acceptance rate: 0.783

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
