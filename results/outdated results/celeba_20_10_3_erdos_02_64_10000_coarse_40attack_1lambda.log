Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
Attack: Compromised 8/20 nodes: [1, 5, 11, 12, 13, 14, 17, 18]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5152 ± 0.0161 | min=0.4731 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.518421', '0.505181', '0.508429', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.495567', '0.525350', '0.520889', '0.473090', '0.515517', '0.514235', '0.517031', '0.515598', '0.505747', '0.517718', '0.517967']
         : correct/total = [(591, 1140), (585, 1158), (573, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (559, 1128), (601, 1144), (586, 1125), (545, 1152), (598, 1160), (578, 1124), (592, 1145), (595, 1154), (572, 1131), (599, 1157), (591, 1141)]
         : compromised: 0.5083, honest: 0.5197
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5149 ± 0.0210 | min=0.4646 max=0.5563
         : test loss mean=9.6128 ± 14.0402
         : individual accs = ['0.528947', '0.464594', '0.496894', '0.517271', '0.531746', '0.518777', '0.498690', '0.546584', '0.556338', '0.494681', '0.506119', '0.492444', '0.526910', '0.522414', '0.504448', '0.546725', '0.511265', '0.505747', '0.509939', '0.517967']
         : correct/total = [(603, 1140), (538, 1158), (560, 1127), (599, 1158), (603, 1134), (594, 1145), (571, 1145), (616, 1127), (632, 1136), (558, 1128), (579, 1144), (554, 1125), (607, 1152), (606, 1160), (567, 1124), (626, 1145), (590, 1154), (572, 1131), (590, 1157), (591, 1141)]
         : compromised: 0.5057, honest: 0.5211
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=1.3053 ± 0.4986
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5124, honest: 0.5190
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5288 ± 0.0211 | min=0.4938 max=0.5738
         : test loss mean=6.0320 ± 5.5795
         : individual accs = ['0.569298', '0.511226', '0.521739', '0.529361', '0.525573', '0.534498', '0.529258', '0.552795', '0.563380', '0.493794', '0.523601', '0.498667', '0.573785', '0.505172', '0.533808', '0.517031', '0.530329', '0.519894', '0.525497', '0.517967']
         : correct/total = [(649, 1140), (592, 1158), (588, 1127), (613, 1158), (596, 1134), (612, 1145), (606, 1145), (623, 1127), (640, 1136), (557, 1128), (599, 1144), (561, 1125), (661, 1152), (586, 1160), (600, 1124), (592, 1145), (612, 1154), (588, 1131), (608, 1157), (591, 1141)]
         : compromised: 0.5253, honest: 0.5312
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5236 ± 0.0352 | min=0.4911 max=0.6626
         : test loss mean=0.9352 ± 0.1948
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.662577']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (756, 1141)]
         : compromised: 0.5124, honest: 0.5310
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.5523 ± 0.0492 | min=0.4987 max=0.6746
         : test loss mean=5.7929 ± 4.6279
         : individual accs = ['0.674561', '0.600173', '0.530612', '0.533679', '0.530864', '0.531004', '0.540611', '0.547471', '0.566901', '0.499113', '0.526224', '0.498667', '0.671875', '0.506034', '0.535587', '0.517031', '0.533795', '0.595049', '0.588591', '0.517967']
         : correct/total = [(769, 1140), (695, 1158), (598, 1127), (618, 1158), (602, 1134), (608, 1145), (619, 1145), (617, 1127), (644, 1136), (563, 1128), (602, 1144), (561, 1125), (774, 1152), (587, 1160), (602, 1124), (592, 1145), (616, 1154), (673, 1131), (681, 1157), (591, 1141)]
         : compromised: 0.5659, honest: 0.5432
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.5315 ± 0.0679 | min=0.4911 max=0.8203
         : test loss mean=0.8857 ± 0.1866
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.820333']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (936, 1141)]
         : compromised: 0.5124, honest: 0.5442
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.5732 ± 0.0630 | min=0.4987 max=0.7009
         : test loss mean=5.3046 ± 4.3534
         : individual accs = ['0.700877', '0.670984', '0.542147', '0.528497', '0.527337', '0.565939', '0.563319', '0.560781', '0.565141', '0.548759', '0.527972', '0.498667', '0.690972', '0.507759', '0.560498', '0.517031', '0.551127', '0.654288', '0.664650', '0.517967']
         : correct/total = [(799, 1140), (777, 1158), (611, 1127), (612, 1158), (598, 1134), (648, 1145), (645, 1145), (632, 1127), (642, 1136), (619, 1128), (604, 1144), (561, 1125), (796, 1152), (589, 1160), (630, 1124), (592, 1145), (636, 1154), (740, 1131), (769, 1157), (591, 1141)]
         : compromised: 0.6017, honest: 0.5542
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.5332 ± 0.0752 | min=0.4911 max=0.8545
         : test loss mean=0.8817 ± 0.2171
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.854514']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (975, 1141)]
         : compromised: 0.5124, honest: 0.5470
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.6016 ± 0.0891 | min=0.5076 max=0.7925
         : test loss mean=4.3512 ± 3.6189
         : individual accs = ['0.746491', '0.728843', '0.642413', '0.535406', '0.526455', '0.551092', '0.593013', '0.534161', '0.568662', '0.618794', '0.559441', '0.507556', '0.792535', '0.521552', '0.553381', '0.525764', '0.562392', '0.692308', '0.753673', '0.517967']
         : correct/total = [(851, 1140), (844, 1158), (724, 1127), (620, 1158), (597, 1134), (631, 1145), (679, 1145), (602, 1127), (646, 1136), (698, 1128), (640, 1144), (571, 1125), (913, 1152), (605, 1160), (622, 1124), (602, 1145), (649, 1154), (783, 1131), (872, 1157), (591, 1141)]
         : compromised: 0.6376, honest: 0.5776
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: directed_deviation, 40.0% compromised
Final accuracy - Compromised: 0.6376, Honest: 0.5776
Overall test accuracy: mean=0.6016 ± 0.0891

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.045s (9.8%)
  - Filtering time: 0.005s (1.1%)
  - Aggregation time: 0.411s (89.1%)
  - Total time: 0.461s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
