Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
Attack: Compromised 14/20 nodes: [1, 2, 3, 5, 6, 8, 11, 12, 13, 14, 15, 17, 18, 19]
Attack type: gaussian, lambda: 1.0
BALANCE algorithm:
  - Model dimension: 30,758 parameters
  - Complexity: O(N×d) = O(20×30,758)
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522928', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (593, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5172, honest: 0.5147
Round 002: test acc mean=0.7747 ± 0.1654 | min=0.4987 max=0.9224
         : test loss mean=9.1823 ± 38.1515
         : individual accs = ['0.876316', '0.508636', '0.899734', '0.642487', '0.922399', '0.915284', '0.895197', '0.909494', '0.830106', '0.875887', '0.906469', '0.498667', '0.522569', '0.500862', '0.820285', '0.902183', '0.906412', '0.508400', '0.853068', '0.800175']
         : correct/total = [(999, 1140), (589, 1158), (1014, 1127), (744, 1158), (1046, 1134), (1048, 1145), (1025, 1145), (1025, 1127), (943, 1136), (988, 1128), (1037, 1144), (561, 1125), (602, 1152), (581, 1160), (922, 1124), (1033, 1145), (1046, 1154), (575, 1131), (987, 1157), (913, 1141)]
         : compromised: 0.7213, honest: 0.8995
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5172, honest: 0.5145
Round 004: test acc mean=0.5064 ± 0.0207 | min=0.4504 max=0.5385
         : test loss mean=119505.0882 ± 385858.9309
         : individual accs = ['0.532456', '0.491364', '0.517303', '0.471503', '0.522928', '0.510044', '0.487336', '0.503993', '0.500880', '0.450355', '0.525350', '0.506667', '0.522569', '0.506034', '0.514235', '0.512664', '0.502600', '0.538462', '0.525497', '0.486415']
         : correct/total = [(607, 1140), (569, 1158), (583, 1127), (546, 1158), (593, 1134), (584, 1145), (558, 1145), (568, 1127), (569, 1136), (508, 1128), (601, 1144), (570, 1125), (602, 1152), (587, 1160), (578, 1124), (587, 1145), (580, 1154), (609, 1131), (608, 1157), (555, 1141)]
         : compromised: 0.5065, honest: 0.5063
Round 005: test acc mean=0.5013 ± 0.0222 | min=0.4725 max=0.5625
         : test loss mean=12357.8649 ± 25637.5348
         : individual accs = ['0.528947', '0.490501', '0.525288', '0.497409', '0.521164', '0.472489', '0.478603', '0.504880', '0.562500', '0.507979', '0.474650', '0.498667', '0.521701', '0.491379', '0.510676', '0.485590', '0.488735', '0.508400', '0.475367', '0.482033']
         : correct/total = [(603, 1140), (568, 1158), (592, 1127), (576, 1158), (591, 1134), (541, 1145), (548, 1145), (569, 1127), (639, 1136), (573, 1128), (543, 1144), (561, 1125), (601, 1152), (570, 1160), (574, 1124), (556, 1145), (564, 1154), (575, 1131), (550, 1157), (550, 1141)]
         : compromised: 0.5000, honest: 0.5044
Round 006: test acc mean=0.5066 ± 0.0177 | min=0.4774 max=0.5370
         : test loss mean=9678.4689 ± 34623.1375
         : individual accs = ['0.528070', '0.505181', '0.493345', '0.525907', '0.518519', '0.513537', '0.478603', '0.477374', '0.536972', '0.491135', '0.532343', '0.501333', '0.522569', '0.498276', '0.524021', '0.496070', '0.492201', '0.509284', '0.481417', '0.506573']
         : correct/total = [(602, 1140), (585, 1158), (556, 1127), (609, 1158), (588, 1134), (588, 1145), (548, 1145), (538, 1127), (610, 1136), (554, 1128), (609, 1144), (564, 1125), (602, 1152), (578, 1160), (589, 1124), (568, 1145), (568, 1154), (576, 1131), (557, 1157), (578, 1141)]
         : compromised: 0.5066, honest: 0.5066
Round 007: test acc mean=0.4966 ± 0.0236 | min=0.4375 max=0.5397
         : test loss mean=714458.5688 ± 1136856.2317
         : individual accs = ['0.470175', '0.494819', '0.493345', '0.528497', '0.526455', '0.514410', '0.521397', '0.496007', '0.437500', '0.491135', '0.474650', '0.501333', '0.477431', '0.512069', '0.486655', '0.539738', '0.515598', '0.491600', '0.477960', '0.482033']
         : correct/total = [(536, 1140), (573, 1158), (556, 1127), (612, 1158), (597, 1134), (589, 1145), (597, 1145), (559, 1127), (497, 1136), (554, 1128), (543, 1144), (564, 1125), (550, 1152), (594, 1160), (547, 1124), (618, 1145), (595, 1154), (556, 1131), (553, 1157), (550, 1141)]
         : compromised: 0.4971, honest: 0.4957
Round 008: test acc mean=0.5097 ± 0.0158 | min=0.4820 max=0.5368
         : test loss mean=nan ± nan
         : individual accs = ['0.520175', '0.491364', '0.536823', '0.528497', '0.522046', '0.514410', '0.515284', '0.503993', '0.527289', '0.491135', '0.525350', '0.498667', '0.522569', '0.494828', '0.482206', '0.517031', '0.515598', '0.495137', '0.509939', '0.482033']
         : correct/total = [(593, 1140), (569, 1158), (605, 1127), (612, 1158), (592, 1134), (589, 1145), (590, 1145), (568, 1127), (599, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (574, 1160), (542, 1124), (592, 1145), (595, 1154), (560, 1131), (590, 1157), (550, 1141)]
         : compromised: 0.5083, honest: 0.5130
Round 009: test acc mean=0.5029 ± 0.0228 | min=0.4715 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.492228', '0.506655', '0.471503', '0.522046', '0.490830', '0.478603', '0.496007', '0.562500', '0.508865', '0.527098', '0.498667', '0.477431', '0.530172', '0.483986', '0.515284', '0.515598', '0.491600', '0.477960', '0.482033']
         : correct/total = [(603, 1140), (570, 1158), (571, 1127), (546, 1158), (592, 1134), (562, 1145), (548, 1145), (559, 1127), (639, 1136), (574, 1128), (603, 1144), (561, 1125), (550, 1152), (615, 1160), (544, 1124), (590, 1145), (595, 1154), (556, 1131), (553, 1157), (550, 1141)]
         : compromised: 0.4971, honest: 0.5164
Round 010: test acc mean=0.5035 ± 0.0229 | min=0.4375 max=0.5289
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.525043', '0.507542', '0.528497', '0.522046', '0.485590', '0.519651', '0.516415', '0.437500', '0.491135', '0.474650', '0.501333', '0.522569', '0.518966', '0.517794', '0.482969', '0.515598', '0.508400', '0.479689', '0.485539']
         : correct/total = [(603, 1140), (608, 1158), (572, 1127), (612, 1158), (592, 1134), (556, 1145), (595, 1145), (582, 1127), (497, 1136), (554, 1128), (543, 1144), (564, 1125), (602, 1152), (602, 1160), (582, 1124), (553, 1145), (595, 1154), (575, 1131), (555, 1157), (554, 1141)]
         : compromised: 0.5015, honest: 0.5081

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: balance
Attack: gaussian, 70.0% compromised
Final accuracy - Compromised: 0.5015, Honest: 0.5081
Overall test accuracy: mean=0.5035 ± 0.0229

=== BALANCE SUMMARY ===
Node 0: acceptance=0.417
Node 1: acceptance=0.450
Node 2: acceptance=0.440
Node 3: acceptance=0.475
Node 4: acceptance=0.425
Node 5: acceptance=0.420
Node 6: acceptance=0.440
Node 7: acceptance=0.440
Node 8: acceptance=0.550
Node 9: acceptance=0.500
Node 10: acceptance=0.425
Node 11: acceptance=0.414
Node 12: acceptance=0.443
Node 13: acceptance=0.500
Node 14: acceptance=0.414
Node 15: acceptance=0.417
Node 16: acceptance=0.460
Node 17: acceptance=0.500
Node 18: acceptance=0.450
Node 19: acceptance=0.500

Performance Summary:
  - Distance computation time: 0.753s (39.8%)
  - Filtering time: 0.885s (46.9%)
  - Aggregation time: 0.252s (13.3%)
  - Total time: 1.889s
  - Mean acceptance rate: 0.454

BALANCE Algorithm Properties:
  - Model dimension: 30,758
  - No compression: Full parameter comparison
  - Theoretical complexity: O(deg(i)×d)
  - Approach: Full parameter filtering + averaging
