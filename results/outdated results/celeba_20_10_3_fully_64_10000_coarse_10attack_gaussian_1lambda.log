Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: fully, nodes: 20, edges: 190
Attack: Compromised 2/20 nodes: [5, 13]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8358 ± 0.0770
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5107, honest: 0.5170
         : coarse stats = ['Node 0: acc_rate=0.895', 'Node 1: acc_rate=0.895', 'Node 2: acc_rate=0.895']...
Round 002: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.7490 ± 0.0540
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5107, honest: 0.5170
         : coarse stats = ['Node 0: acc_rate=0.895', 'Node 1: acc_rate=0.895', 'Node 2: acc_rate=0.895']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5107, honest: 0.5170
         : coarse stats = ['Node 0: acc_rate=0.930', 'Node 1: acc_rate=0.930', 'Node 2: acc_rate=0.930']...
Round 004: test acc mean=0.4928 ± 0.0171 | min=0.4437 max=0.5195
         : test loss mean=16.1282 ± 4.9642
         : individual accs = ['0.470175', '0.493955', '0.519077', '0.481002', '0.473545', '0.504803', '0.505677', '0.505768', '0.443662', '0.519504', '0.491259', '0.497778', '0.492188', '0.509483', '0.493772', '0.482096', '0.494801', '0.499558', '0.484875', '0.493427']
         : correct/total = [(536, 1140), (572, 1158), (585, 1127), (557, 1158), (537, 1134), (578, 1145), (579, 1145), (570, 1127), (504, 1136), (586, 1128), (562, 1144), (560, 1125), (567, 1152), (591, 1160), (555, 1124), (552, 1145), (571, 1154), (565, 1131), (561, 1157), (563, 1141)]
         : compromised: 0.5071, honest: 0.4912
         : coarse stats = ['Node 0: acc_rate=0.947', 'Node 1: acc_rate=0.947', 'Node 2: acc_rate=0.947']...
Round 005: test acc mean=0.5157 ± 0.0157 | min=0.4891 max=0.5625
         : test loss mean=43.6175 ± 14.8655
         : individual accs = ['0.526316', '0.510363', '0.492458', '0.529361', '0.522046', '0.489083', '0.523144', '0.503106', '0.562500', '0.494681', '0.520979', '0.499556', '0.522569', '0.521552', '0.514235', '0.515284', '0.515598', '0.511052', '0.522040', '0.517090']
         : correct/total = [(600, 1140), (591, 1158), (555, 1127), (613, 1158), (592, 1134), (560, 1145), (599, 1145), (567, 1127), (639, 1136), (558, 1128), (596, 1144), (562, 1125), (602, 1152), (605, 1160), (578, 1124), (590, 1145), (595, 1154), (578, 1131), (604, 1157), (590, 1141)]
         : compromised: 0.5053, honest: 0.5168
         : coarse stats = ['Node 0: acc_rate=0.958', 'Node 1: acc_rate=0.958', 'Node 2: acc_rate=0.958']...
Round 006: test acc mean=0.6826 ± 0.0517 | min=0.5069 max=0.7392
         : test loss mean=0.5841 ± 0.0412
         : individual accs = ['0.640351', '0.723661', '0.642413', '0.739206', '0.705467', '0.627948', '0.722271', '0.698314', '0.649648', '0.684397', '0.680944', '0.716444', '0.687500', '0.506897', '0.668149', '0.730131', '0.726170', '0.722370', '0.707001', '0.672217']
         : correct/total = [(730, 1140), (838, 1158), (724, 1127), (856, 1158), (800, 1134), (719, 1145), (827, 1145), (787, 1127), (738, 1136), (772, 1128), (779, 1144), (806, 1125), (792, 1152), (588, 1160), (751, 1124), (836, 1145), (838, 1154), (817, 1131), (818, 1157), (767, 1141)]
         : compromised: 0.5674, honest: 0.6954
         : coarse stats = ['Node 0: acc_rate=0.947', 'Node 1: acc_rate=0.947', 'Node 2: acc_rate=0.947']...
Round 007: test acc mean=0.7870 ± 0.0112 | min=0.7642 max=0.8102
         : test loss mean=0.4508 ± 0.0156
         : individual accs = ['0.785965', '0.773748', '0.774623', '0.794473', '0.789242', '0.777293', '0.795633', '0.785271', '0.788732', '0.764184', '0.803322', '0.791111', '0.774306', '0.787931', '0.780249', '0.805240', '0.810225', '0.791335', '0.784788', '0.782647']
         : correct/total = [(896, 1140), (896, 1158), (873, 1127), (920, 1158), (895, 1134), (890, 1145), (911, 1145), (885, 1127), (896, 1136), (862, 1128), (919, 1144), (890, 1125), (892, 1152), (914, 1160), (877, 1124), (922, 1145), (935, 1154), (895, 1131), (908, 1157), (893, 1141)]
         : compromised: 0.7826, honest: 0.7875
         : coarse stats = ['Node 0: acc_rate=0.940', 'Node 1: acc_rate=0.940', 'Node 2: acc_rate=0.940']...
Round 008: test acc mean=0.8224 ± 0.0120 | min=0.8003 max=0.8427
         : test loss mean=0.3973 ± 0.0193
         : individual accs = ['0.821930', '0.814335', '0.811003', '0.810881', '0.815697', '0.837555', '0.834061', '0.814552', '0.833627', '0.806738', '0.842657', '0.827556', '0.800347', '0.835345', '0.824733', '0.840175', '0.825823', '0.815208', '0.808124', '0.827344']
         : correct/total = [(937, 1140), (943, 1158), (914, 1127), (939, 1158), (925, 1134), (959, 1145), (955, 1145), (918, 1127), (947, 1136), (910, 1128), (964, 1144), (931, 1125), (922, 1152), (969, 1160), (927, 1124), (962, 1145), (953, 1154), (922, 1131), (935, 1157), (944, 1141)]
         : compromised: 0.8364, honest: 0.8208
         : coarse stats = ['Node 0: acc_rate=0.934', 'Node 1: acc_rate=0.934', 'Node 2: acc_rate=0.934']...
Round 009: test acc mean=0.8412 ± 0.0071 | min=0.8228 max=0.8550
         : test loss mean=0.3621 ± 0.0174
         : individual accs = ['0.842105', '0.840242', '0.834960', '0.835924', '0.834215', '0.855022', '0.847162', '0.837622', '0.840669', '0.841312', '0.849650', '0.847111', '0.832465', '0.844828', '0.846975', '0.842795', '0.848354', '0.835544', '0.822818', '0.843996']
         : correct/total = [(960, 1140), (973, 1158), (941, 1127), (968, 1158), (946, 1134), (979, 1145), (970, 1145), (944, 1127), (955, 1136), (949, 1128), (972, 1144), (953, 1125), (959, 1152), (980, 1160), (952, 1124), (965, 1145), (979, 1154), (945, 1131), (952, 1157), (963, 1141)]
         : compromised: 0.8499, honest: 0.8402
         : coarse stats = ['Node 0: acc_rate=0.930', 'Node 1: acc_rate=0.930', 'Node 2: acc_rate=0.930']...
Round 010: test acc mean=0.8526 ± 0.0074 | min=0.8375 max=0.8648
         : test loss mean=0.3390 ± 0.0146
         : individual accs = ['0.850000', '0.850604', '0.841171', '0.856649', '0.852734', '0.860262', '0.861135', '0.844720', '0.853873', '0.851064', '0.861888', '0.857778', '0.842014', '0.849138', '0.862100', '0.855895', '0.864818', '0.851459', '0.837511', '0.847502']
         : correct/total = [(969, 1140), (985, 1158), (948, 1127), (992, 1158), (967, 1134), (985, 1145), (986, 1145), (952, 1127), (970, 1136), (960, 1128), (986, 1144), (965, 1125), (970, 1152), (985, 1160), (969, 1124), (980, 1145), (998, 1154), (963, 1131), (969, 1157), (967, 1141)]
         : compromised: 0.8547, honest: 0.8524
         : coarse stats = ['Node 0: acc_rate=0.926', 'Node 1: acc_rate=0.926', 'Node 2: acc_rate=0.926']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: fully, Aggregation: coarse
Attack: gaussian, 10.0% compromised
Final accuracy - Compromised: 0.8547, Honest: 0.8524
Overall test accuracy: mean=0.8526 ± 0.0074

=== COARSE SUMMARY ===
Node 0: acceptance=0.926
Node 1: acceptance=0.926
Node 2: acceptance=0.926
Node 3: acceptance=0.926
Node 4: acceptance=0.926
Node 5: acceptance=0.963
Node 6: acceptance=0.926
Node 7: acceptance=0.926
Node 8: acceptance=0.926
Node 9: acceptance=0.926
Node 10: acceptance=0.926
Node 11: acceptance=0.926
Node 12: acceptance=0.926
Node 13: acceptance=0.963
Node 14: acceptance=0.926
Node 15: acceptance=0.926
Node 16: acceptance=0.926
Node 17: acceptance=0.926
Node 18: acceptance=0.926
Node 19: acceptance=0.926

Performance Summary:
  - Sketching time: 0.040s (2.9%)
  - Filtering time: 0.013s (0.9%)
  - Aggregation time: 1.343s (96.2%)
  - Total time: 1.396s
  - Mean acceptance rate: 0.930

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
