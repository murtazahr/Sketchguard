Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: ring, nodes: 20, edges: 20
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8525 ± 0.1022
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.529361', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (613, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.6071 ± 0.0737 | min=0.4911 max=0.7489
         : test loss mean=0.6314 ± 0.0974
         : individual accs = ['0.530702', '0.683938', '0.691216', '0.620035', '0.546737', '0.533624', '0.706550', '0.748891', '0.563380', '0.491135', '0.527972', '0.513778', '0.599826', '0.698276', '0.681495', '0.591266', '0.603986', '0.609195', '0.655143', '0.544259']
         : correct/total = [(605, 1140), (792, 1158), (779, 1127), (718, 1158), (620, 1134), (611, 1145), (809, 1145), (844, 1127), (640, 1136), (554, 1128), (604, 1144), (578, 1125), (691, 1152), (810, 1160), (766, 1124), (677, 1145), (697, 1154), (689, 1131), (758, 1157), (621, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.7452 ± 0.0769 | min=0.6098 max=0.8482
         : test loss mean=0.4896 ± 0.0763
         : individual accs = ['0.848246', '0.829879', '0.686779', '0.715889', '0.814815', '0.848035', '0.817467', '0.765750', '0.631162', '0.645390', '0.678322', '0.609778', '0.804688', '0.812069', '0.706406', '0.737991', '0.740901', '0.638373', '0.736387', '0.836109']
         : correct/total = [(967, 1140), (961, 1158), (774, 1127), (829, 1158), (924, 1134), (971, 1145), (936, 1145), (863, 1127), (717, 1136), (728, 1128), (776, 1144), (686, 1125), (927, 1152), (942, 1160), (794, 1124), (845, 1145), (855, 1154), (722, 1131), (852, 1157), (954, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.8089 ± 0.0525 | min=0.7004 max=0.8903
         : test loss mean=0.4045 ± 0.0650
         : individual accs = ['0.800877', '0.855786', '0.863354', '0.890328', '0.874780', '0.856769', '0.848908', '0.803904', '0.735035', '0.700355', '0.796329', '0.802667', '0.834201', '0.815517', '0.827402', '0.827074', '0.809359', '0.744474', '0.700951', '0.790535']
         : correct/total = [(913, 1140), (991, 1158), (973, 1127), (1031, 1158), (992, 1134), (981, 1145), (972, 1145), (906, 1127), (835, 1136), (790, 1128), (911, 1144), (903, 1125), (961, 1152), (946, 1160), (930, 1124), (947, 1145), (934, 1154), (842, 1131), (811, 1157), (902, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.8441 ± 0.0305 | min=0.7870 max=0.8921
         : test loss mean=0.3499 ± 0.0415
         : individual accs = ['0.833333', '0.881693', '0.869565', '0.892055', '0.854497', '0.870742', '0.868122', '0.851819', '0.849472', '0.796099', '0.870629', '0.858667', '0.855903', '0.787931', '0.847865', '0.847162', '0.841421', '0.820513', '0.796889', '0.787029']
         : correct/total = [(950, 1140), (1021, 1158), (980, 1127), (1033, 1158), (969, 1134), (997, 1145), (994, 1145), (960, 1127), (965, 1136), (898, 1128), (996, 1144), (966, 1125), (986, 1152), (914, 1160), (953, 1124), (970, 1145), (971, 1154), (928, 1131), (922, 1157), (898, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.8781 ± 0.0180 | min=0.8338 max=0.9076
         : test loss mean=0.2928 ± 0.0259
         : individual accs = ['0.899123', '0.906736', '0.892635', '0.907599', '0.867725', '0.876856', '0.879476', '0.867791', '0.876761', '0.872340', '0.887238', '0.833778', '0.888021', '0.880172', '0.886121', '0.856769', '0.876950', '0.860301', '0.852204', '0.893076']
         : correct/total = [(1025, 1140), (1050, 1158), (1006, 1127), (1051, 1158), (984, 1134), (1004, 1145), (1007, 1145), (978, 1127), (996, 1136), (984, 1128), (1015, 1144), (938, 1125), (1023, 1152), (1021, 1160), (996, 1124), (981, 1145), (1012, 1154), (973, 1131), (986, 1157), (1019, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.8912 ± 0.0136 | min=0.8594 max=0.9096
         : test loss mean=0.2674 ± 0.0215
         : individual accs = ['0.909649', '0.900691', '0.895297', '0.906736', '0.895062', '0.909170', '0.872489', '0.894410', '0.882042', '0.894504', '0.898601', '0.896889', '0.895833', '0.875862', '0.859431', '0.862882', '0.899480', '0.892131', '0.890233', '0.892200']
         : correct/total = [(1037, 1140), (1043, 1158), (1009, 1127), (1050, 1158), (1015, 1134), (1041, 1145), (999, 1145), (1008, 1127), (1002, 1136), (1009, 1128), (1028, 1144), (1009, 1125), (1032, 1152), (1016, 1160), (966, 1124), (988, 1145), (1038, 1154), (1009, 1131), (1030, 1157), (1018, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.8915 ± 0.0124 | min=0.8699 max=0.9149
         : test loss mean=0.2617 ± 0.0227
         : individual accs = ['0.896491', '0.901554', '0.891748', '0.912781', '0.900353', '0.886463', '0.899563', '0.903283', '0.882923', '0.873227', '0.888112', '0.888000', '0.914931', '0.893103', '0.895907', '0.869869', '0.888215', '0.896552', '0.876404', '0.870289']
         : correct/total = [(1022, 1140), (1044, 1158), (1005, 1127), (1057, 1158), (1021, 1134), (1015, 1145), (1030, 1145), (1018, 1127), (1003, 1136), (985, 1128), (1016, 1144), (999, 1125), (1054, 1152), (1036, 1160), (1007, 1124), (996, 1145), (1025, 1154), (1014, 1131), (1014, 1157), (993, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.8918 ± 0.0122 | min=0.8573 max=0.9092
         : test loss mean=0.2589 ± 0.0190
         : individual accs = ['0.908772', '0.891192', '0.891748', '0.896373', '0.885362', '0.892576', '0.909170', '0.906832', '0.879401', '0.857270', '0.877622', '0.897778', '0.908854', '0.893966', '0.900356', '0.882969', '0.893414', '0.890363', '0.885912', '0.886941']
         : correct/total = [(1036, 1140), (1032, 1158), (1005, 1127), (1038, 1158), (1004, 1134), (1022, 1145), (1041, 1145), (1022, 1127), (999, 1136), (967, 1128), (1004, 1144), (1010, 1125), (1047, 1152), (1037, 1160), (1012, 1124), (1011, 1145), (1031, 1154), (1007, 1131), (1025, 1157), (1012, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.8967 ± 0.0101 | min=0.8732 max=0.9138
         : test loss mean=0.2498 ± 0.0202
         : individual accs = ['0.908772', '0.895509', '0.892635', '0.897237', '0.900353', '0.903057', '0.912664', '0.905058', '0.889965', '0.873227', '0.890734', '0.913778', '0.907986', '0.893103', '0.899466', '0.889083', '0.899480', '0.880637', '0.886776', '0.894829']
         : correct/total = [(1036, 1140), (1037, 1158), (1006, 1127), (1039, 1158), (1021, 1134), (1034, 1145), (1045, 1145), (1020, 1127), (1011, 1136), (985, 1128), (1019, 1144), (1028, 1125), (1046, 1152), (1036, 1160), (1011, 1124), (1018, 1145), (1038, 1154), (996, 1131), (1026, 1157), (1021, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: ring, Aggregation: coarse
Overall test accuracy: mean=0.8967 ± 0.0101

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.035s (13.2%)
  - Filtering time: 0.003s (1.2%)
  - Aggregation time: 0.228s (85.6%)
  - Total time: 0.266s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
