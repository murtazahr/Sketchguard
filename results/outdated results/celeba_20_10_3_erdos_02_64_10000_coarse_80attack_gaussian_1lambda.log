Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
Attack: Compromised 16/20 nodes: [1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522928', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (593, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5160, honest: 0.5179
         : coarse stats = ['Node 0: acc_rate=0.167', 'Node 1: acc_rate=0.333', 'Node 2: acc_rate=0.200']...
Round 002: test acc mean=0.7453 ± 0.1756 | min=0.4987 max=0.9184
         : test loss mean=104.2780 ± 297.5050
         : individual accs = ['0.911404', '0.508636', '0.876664', '0.528497', '0.909171', '0.913537', '0.868996', '0.918367', '0.775528', '0.766844', '0.891608', '0.498667', '0.522569', '0.506897', '0.820285', '0.894323', '0.917678', '0.508400', '0.853068', '0.515337']
         : correct/total = [(1039, 1140), (589, 1158), (988, 1127), (612, 1158), (1031, 1134), (1046, 1145), (995, 1145), (1035, 1127), (881, 1136), (865, 1128), (1020, 1144), (561, 1125), (602, 1152), (588, 1160), (922, 1124), (1024, 1145), (1059, 1154), (575, 1131), (987, 1157), (588, 1141)]
         : compromised: 0.7031, honest: 0.9142
         : coarse stats = ['Node 0: acc_rate=0.167', 'Node 1: acc_rate=0.333', 'Node 2: acc_rate=0.200']...
Round 003: test acc mean=0.5129 ± 0.0173 | min=0.4767 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.476684', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.496000', '0.522569', '0.504310', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.505697']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (552, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (558, 1125), (602, 1152), (585, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (577, 1141)]
         : compromised: 0.5117, honest: 0.5176
         : coarse stats = ['Node 0: acc_rate=0.444', 'Node 1: acc_rate=0.556', 'Node 2: acc_rate=0.467']...
Round 004: test acc mean=0.5062 ± 0.0199 | min=0.4671 max=0.5431
         : test loss mean=18766.3779 ± 49803.5731
         : individual accs = ['0.527193', '0.508636', '0.509317', '0.528497', '0.479718', '0.486463', '0.496943', '0.503993', '0.543134', '0.505319', '0.525350', '0.498667', '0.521701', '0.506034', '0.467082', '0.482096', '0.486135', '0.503979', '0.541054', '0.503067']
         : correct/total = [(601, 1140), (589, 1158), (574, 1127), (612, 1158), (544, 1134), (557, 1145), (569, 1145), (568, 1127), (617, 1136), (570, 1128), (601, 1144), (561, 1125), (601, 1152), (587, 1160), (525, 1124), (552, 1145), (561, 1154), (570, 1131), (626, 1157), (574, 1141)]
         : compromised: 0.5080, honest: 0.4993
         : coarse stats = ['Node 0: acc_rate=0.583', 'Node 1: acc_rate=0.583', 'Node 2: acc_rate=0.600']...
Round 005: test acc mean=0.4961 ± 0.0258 | min=0.4393 max=0.5506
         : test loss mean=3094.9742 ± 5315.8856
         : individual accs = ['0.498246', '0.510363', '0.501331', '0.450777', '0.485009', '0.498690', '0.503057', '0.489796', '0.439261', '0.518617', '0.527972', '0.497778', '0.477431', '0.459483', '0.517794', '0.482969', '0.487002', '0.508400', '0.550562', '0.517967']
         : correct/total = [(568, 1140), (591, 1158), (565, 1127), (522, 1158), (550, 1134), (571, 1145), (576, 1145), (552, 1127), (499, 1136), (585, 1128), (604, 1144), (560, 1125), (550, 1152), (533, 1160), (582, 1124), (553, 1145), (562, 1154), (575, 1131), (637, 1157), (591, 1141)]
         : compromised: 0.4977, honest: 0.4900
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.667', 'Node 2: acc_rate=0.680']...
Round 006: test acc mean=0.5055 ± 0.0277 | min=0.4453 max=0.5625
         : test loss mean=3982.1496 ± 8680.5851
         : individual accs = ['0.471053', '0.487047', '0.491571', '0.484456', '0.522046', '0.522271', '0.521397', '0.503993', '0.562500', '0.491135', '0.480769', '0.543111', '0.445312', '0.506897', '0.521352', '0.522271', '0.493934', '0.508400', '0.480553', '0.549518']
         : correct/total = [(537, 1140), (564, 1158), (554, 1127), (561, 1158), (592, 1134), (598, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (550, 1144), (611, 1125), (513, 1152), (588, 1160), (586, 1124), (598, 1145), (570, 1154), (575, 1131), (556, 1157), (627, 1141)]
         : compromised: 0.5074, honest: 0.4978
         : coarse stats = ['Node 0: acc_rate=0.694', 'Node 1: acc_rate=0.667', 'Node 2: acc_rate=0.733']...
Round 007: test acc mean=0.4938 ± 0.0234 | min=0.4375 max=0.5285
         : test loss mean=883265.9754 ± 1450322.3628
         : individual accs = ['0.474561', '0.508636', '0.508429', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.437500', '0.491135', '0.474650', '0.451556', '0.492188', '0.478448', '0.517794', '0.491703', '0.480069', '0.491600', '0.477960', '0.509202']
         : correct/total = [(541, 1140), (589, 1158), (573, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (497, 1136), (554, 1128), (543, 1144), (508, 1125), (567, 1152), (555, 1160), (582, 1124), (563, 1145), (554, 1154), (556, 1131), (553, 1157), (581, 1141)]
         : compromised: 0.4934, honest: 0.4952
         : coarse stats = ['Node 0: acc_rate=0.619', 'Node 1: acc_rate=0.619', 'Node 2: acc_rate=0.629']...
Round 008: test acc mean=0.5120 ± 0.0249 | min=0.4780 max=0.5720
         : test loss mean=1140880.9894 ± 3775684.7784
         : individual accs = ['0.515789', '0.508636', '0.506655', '0.506045', '0.521164', '0.514410', '0.542358', '0.535049', '0.562500', '0.491135', '0.493007', '0.501333', '0.572049', '0.482759', '0.517794', '0.517031', '0.484402', '0.508400', '0.477960', '0.482033']
         : correct/total = [(588, 1140), (589, 1158), (571, 1127), (586, 1158), (591, 1134), (589, 1145), (621, 1145), (603, 1127), (639, 1136), (554, 1128), (564, 1144), (564, 1125), (659, 1152), (560, 1160), (582, 1124), (592, 1145), (559, 1154), (575, 1131), (553, 1157), (550, 1141)]
         : compromised: 0.5115, honest: 0.5141
         : coarse stats = ['Node 0: acc_rate=0.542', 'Node 1: acc_rate=0.562', 'Node 2: acc_rate=0.550']...
Round 009: test acc mean=0.5220 ± 0.0346 | min=0.4733 max=0.6129
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.486247', '0.494819', '0.612875', '0.555459', '0.478603', '0.573203', '0.562500', '0.537234', '0.518357', '0.501333', '0.503472', '0.500000', '0.517794', '0.517031', '0.485269', '0.535809', '0.549697', '0.473269']
         : correct/total = [(603, 1140), (589, 1158), (548, 1127), (573, 1158), (695, 1134), (636, 1145), (548, 1145), (646, 1127), (639, 1136), (606, 1128), (593, 1144), (564, 1125), (580, 1152), (580, 1160), (582, 1124), (592, 1145), (560, 1154), (606, 1131), (636, 1157), (540, 1141)]
         : compromised: 0.5150, honest: 0.5501
         : coarse stats = ['Node 0: acc_rate=0.481', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.489']...
Round 010: test acc mean=0.5200 ± 0.0358 | min=0.4711 max=0.6078
         : test loss mean=82737.5434 ± 243182.5344
         : individual accs = ['0.471053', '0.508636', '0.493345', '0.500864', '0.581129', '0.546725', '0.521397', '0.607808', '0.562500', '0.491135', '0.562063', '0.511111', '0.522569', '0.493103', '0.482206', '0.519651', '0.481802', '0.537577', '0.522904', '0.482033']
         : correct/total = [(537, 1140), (589, 1158), (556, 1127), (580, 1158), (659, 1134), (626, 1145), (597, 1145), (685, 1127), (639, 1136), (554, 1128), (643, 1144), (575, 1125), (602, 1152), (572, 1160), (542, 1124), (595, 1145), (556, 1154), (608, 1131), (605, 1157), (550, 1141)]
         : compromised: 0.5161, honest: 0.5354
         : coarse stats = ['Node 0: acc_rate=0.433', 'Node 1: acc_rate=0.450', 'Node 2: acc_rate=0.440']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: gaussian, 80.0% compromised
Final accuracy - Compromised: 0.5161, Honest: 0.5354
Overall test accuracy: mean=0.5200 ± 0.0358

=== COARSE SUMMARY ===
Node 0: acceptance=0.433
Node 1: acceptance=0.450
Node 2: acceptance=0.440
Node 3: acceptance=0.500
Node 4: acceptance=0.550
Node 5: acceptance=0.500
Node 6: acceptance=0.480
Node 7: acceptance=0.500
Node 8: acceptance=0.600
Node 9: acceptance=0.533
Node 10: acceptance=0.500
Node 11: acceptance=0.500
Node 12: acceptance=0.443
Node 13: acceptance=0.500
Node 14: acceptance=0.429
Node 15: acceptance=0.433
Node 16: acceptance=0.440
Node 17: acceptance=0.500
Node 18: acceptance=0.500
Node 19: acceptance=0.500

Performance Summary:
  - Sketching time: 0.049s (15.5%)
  - Filtering time: 0.005s (1.5%)
  - Aggregation time: 0.264s (83.0%)
  - Total time: 0.318s
  - Mean acceptance rate: 0.487

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
