Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 126
Attack: Compromised 14/20 nodes: [1, 2, 3, 5, 6, 8, 11, 12, 13, 14, 15, 17, 18, 19]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8686 ± 0.0818
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5172, honest: 0.5145
         : coarse stats = ['Node 0: acc_rate=0.312', 'Node 1: acc_rate=0.364', 'Node 2: acc_rate=0.333']...
Round 002: test acc mean=0.5171 ± 0.0147 | min=0.4911 max=0.5625
         : test loss mean=0.7978 ± 0.0908
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.519077', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (585, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5172, honest: 0.5170
         : coarse stats = ['Node 0: acc_rate=0.312', 'Node 1: acc_rate=0.364', 'Node 2: acc_rate=0.333']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5172, honest: 0.5145
         : coarse stats = ['Node 0: acc_rate=0.542', 'Node 1: acc_rate=0.576', 'Node 2: acc_rate=0.528']...
Round 004: test acc mean=0.4984 ± 0.0231 | min=0.4741 max=0.5625
         : test loss mean=1194.1544 ± 944.9346
         : individual accs = ['0.479825', '0.499136', '0.493345', '0.474093', '0.477954', '0.499563', '0.520524', '0.503993', '0.562500', '0.494681', '0.537587', '0.486222', '0.475694', '0.477586', '0.519573', '0.481223', '0.526863', '0.488064', '0.487468', '0.482910']
         : correct/total = [(547, 1140), (578, 1158), (556, 1127), (549, 1158), (542, 1134), (572, 1145), (596, 1145), (568, 1127), (639, 1136), (558, 1128), (615, 1144), (547, 1125), (548, 1152), (554, 1160), (584, 1124), (551, 1145), (608, 1154), (552, 1131), (564, 1157), (551, 1141)]
         : compromised: 0.4963, honest: 0.5035
         : coarse stats = ['Node 0: acc_rate=0.641', 'Node 1: acc_rate=0.682', 'Node 2: acc_rate=0.646']...
Round 005: test acc mean=0.4957 ± 0.0260 | min=0.4375 max=0.5371
         : test loss mean=320.4575 ± 386.4808
         : individual accs = ['0.463158', '0.511226', '0.506655', '0.537133', '0.516755', '0.459389', '0.479476', '0.524401', '0.437500', '0.531028', '0.487762', '0.501333', '0.483507', '0.516379', '0.491993', '0.481223', '0.487868', '0.534925', '0.480553', '0.481157']
         : correct/total = [(528, 1140), (592, 1158), (571, 1127), (622, 1158), (586, 1134), (526, 1145), (549, 1145), (591, 1127), (497, 1136), (599, 1128), (558, 1144), (564, 1125), (557, 1152), (599, 1160), (553, 1124), (551, 1145), (563, 1154), (605, 1131), (556, 1157), (549, 1141)]
         : compromised: 0.4930, honest: 0.5018
         : coarse stats = ['Node 0: acc_rate=0.700', 'Node 1: acc_rate=0.745', 'Node 2: acc_rate=0.717']...
Round 006: test acc mean=0.4895 ± 0.0207 | min=0.4711 max=0.5625
         : test loss mean=263.3396 ± 269.3312
         : individual accs = ['0.471053', '0.479275', '0.493345', '0.473230', '0.477954', '0.485590', '0.519651', '0.483585', '0.562500', '0.483156', '0.474650', '0.512000', '0.475694', '0.496552', '0.483986', '0.484716', '0.485269', '0.491600', '0.473639', '0.482033']
         : correct/total = [(537, 1140), (555, 1158), (556, 1127), (548, 1158), (542, 1134), (556, 1145), (595, 1145), (545, 1127), (639, 1136), (545, 1128), (543, 1144), (576, 1125), (548, 1152), (576, 1160), (544, 1124), (555, 1145), (560, 1154), (556, 1131), (548, 1157), (550, 1141)]
         : compromised: 0.4938, honest: 0.4793
         : coarse stats = ['Node 0: acc_rate=0.729', 'Node 1: acc_rate=0.788', 'Node 2: acc_rate=0.764']...
Round 007: test acc mean=0.4996 ± 0.0253 | min=0.4711 max=0.5625
         : test loss mean=0.9036 ± 0.2468
         : individual accs = ['0.471053', '0.491364', '0.506655', '0.471503', '0.477954', '0.488210', '0.478603', '0.496007', '0.562500', '0.491135', '0.474650', '0.545778', '0.477431', '0.501724', '0.517794', '0.538865', '0.504333', '0.491600', '0.522040', '0.482910']
         : correct/total = [(537, 1140), (569, 1158), (571, 1127), (546, 1158), (542, 1134), (559, 1145), (548, 1145), (559, 1127), (639, 1136), (554, 1128), (543, 1144), (614, 1125), (550, 1152), (582, 1160), (582, 1124), (617, 1145), (582, 1154), (556, 1131), (604, 1157), (551, 1141)]
         : compromised: 0.5055, honest: 0.4859
         : coarse stats = ['Node 0: acc_rate=0.652', 'Node 1: acc_rate=0.727', 'Node 2: acc_rate=0.702']...
Round 008: test acc mean=0.5468 ± 0.0465 | min=0.4715 max=0.6169
         : test loss mean=0.7016 ± 0.0508
         : individual accs = ['0.547368', '0.491364', '0.528838', '0.471503', '0.493827', '0.508297', '0.550218', '0.596273', '0.595070', '0.601950', '0.474650', '0.616889', '0.518229', '0.550000', '0.583630', '0.613100', '0.571924', '0.491600', '0.588591', '0.542507']
         : correct/total = [(624, 1140), (569, 1158), (596, 1127), (546, 1158), (560, 1134), (582, 1145), (630, 1145), (672, 1127), (676, 1136), (679, 1128), (543, 1144), (694, 1125), (597, 1152), (638, 1160), (656, 1124), (702, 1145), (660, 1154), (556, 1131), (681, 1157), (619, 1141)]
         : compromised: 0.5464, honest: 0.5477
         : coarse stats = ['Node 0: acc_rate=0.602', 'Node 1: acc_rate=0.682', 'Node 2: acc_rate=0.656']...
Round 009: test acc mean=0.6015 ± 0.0553 | min=0.4715 max=0.6828
         : test loss mean=0.6624 ± 0.0447
         : individual accs = ['0.608772', '0.590674', '0.566105', '0.471503', '0.630511', '0.574672', '0.641921', '0.615794', '0.623239', '0.644504', '0.514860', '0.650667', '0.588542', '0.577586', '0.643238', '0.674236', '0.682842', '0.491600', '0.613656', '0.624890']
         : correct/total = [(694, 1140), (684, 1158), (638, 1127), (546, 1158), (715, 1134), (658, 1145), (735, 1145), (694, 1127), (708, 1136), (727, 1128), (589, 1144), (732, 1125), (678, 1152), (670, 1160), (723, 1124), (772, 1145), (788, 1154), (556, 1131), (710, 1157), (713, 1141)]
         : compromised: 0.5952, honest: 0.6162
         : coarse stats = ['Node 0: acc_rate=0.569', 'Node 1: acc_rate=0.646', 'Node 2: acc_rate=0.620']...
Round 010: test acc mean=0.6561 ± 0.0294 | min=0.5656 max=0.7071
         : test loss mean=0.6158 ± 0.0204
         : individual accs = ['0.635088', '0.661485', '0.645075', '0.565630', '0.664903', '0.661135', '0.652402', '0.655723', '0.637324', '0.683511', '0.632867', '0.669333', '0.661458', '0.673276', '0.661032', '0.683843', '0.707106', '0.618037', '0.658600', '0.694128']
         : correct/total = [(724, 1140), (766, 1158), (727, 1127), (655, 1158), (754, 1134), (757, 1145), (747, 1145), (739, 1127), (724, 1136), (771, 1128), (724, 1144), (753, 1125), (762, 1152), (781, 1160), (743, 1124), (783, 1145), (816, 1154), (699, 1131), (762, 1157), (792, 1141)]
         : compromised: 0.6531, honest: 0.6632
         : coarse stats = ['Node 0: acc_rate=0.544', 'Node 1: acc_rate=0.618', 'Node 2: acc_rate=0.592']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: gaussian, 70.0% compromised
Final accuracy - Compromised: 0.6531, Honest: 0.6632
Overall test accuracy: mean=0.6561 ± 0.0294

=== COARSE SUMMARY ===
Node 0: acceptance=0.544
Node 1: acceptance=0.618
Node 2: acceptance=0.592
Node 3: acceptance=0.625
Node 4: acceptance=0.618
Node 5: acceptance=0.527
Node 6: acceptance=0.536
Node 7: acceptance=0.543
Node 8: acceptance=0.520
Node 9: acceptance=0.585
Node 10: acceptance=0.533
Node 11: acceptance=0.571
Node 12: acceptance=0.567
Node 13: acceptance=0.538
Node 14: acceptance=0.553
Node 15: acceptance=0.564
Node 16: acceptance=0.538
Node 17: acceptance=0.644
Node 18: acceptance=0.562
Node 19: acceptance=0.537

Performance Summary:
  - Sketching time: 0.049s (7.8%)
  - Filtering time: 0.009s (1.4%)
  - Aggregation time: 0.571s (90.8%)
  - Total time: 0.629s
  - Mean acceptance rate: 0.566

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
