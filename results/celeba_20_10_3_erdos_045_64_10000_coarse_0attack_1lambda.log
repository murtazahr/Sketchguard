Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 99
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8374 ± 0.0803
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5164 ± 0.0149 | min=0.4911 max=0.5625
         : test loss mean=0.7620 ± 0.0687
         : individual accs = ['0.528947', '0.508636', '0.494232', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (557, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5211 ± 0.0203 | min=0.4911 max=0.5764
         : test loss mean=0.7046 ± 0.0581
         : individual accs = ['0.535965', '0.508636', '0.493345', '0.528497', '0.529101', '0.576419', '0.529258', '0.503993', '0.562500', '0.491135', '0.526224', '0.498667', '0.526042', '0.506897', '0.517794', '0.517031', '0.520797', '0.508400', '0.522040', '0.519720']
         : correct/total = [(611, 1140), (589, 1158), (556, 1127), (612, 1158), (600, 1134), (660, 1145), (606, 1145), (568, 1127), (639, 1136), (554, 1128), (602, 1144), (561, 1125), (606, 1152), (588, 1160), (582, 1124), (592, 1145), (601, 1154), (575, 1131), (604, 1157), (593, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5498 ± 0.0301 | min=0.4911 max=0.6320
         : test loss mean=0.6370 ± 0.0464
         : individual accs = ['0.546491', '0.511226', '0.578527', '0.564767', '0.550265', '0.567686', '0.586900', '0.539485', '0.562500', '0.491135', '0.555944', '0.632000', '0.574653', '0.540517', '0.540036', '0.517031', '0.542461', '0.548187', '0.526361', '0.520596']
         : correct/total = [(623, 1140), (592, 1158), (652, 1127), (654, 1158), (624, 1134), (650, 1145), (672, 1145), (608, 1127), (639, 1136), (554, 1128), (636, 1144), (711, 1125), (662, 1152), (627, 1160), (607, 1124), (592, 1145), (626, 1154), (620, 1131), (609, 1157), (594, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5906 ± 0.0568 | min=0.4956 max=0.7491
         : test loss mean=0.6009 ± 0.0378
         : individual accs = ['0.569298', '0.556995', '0.605146', '0.611399', '0.552028', '0.608734', '0.629694', '0.678793', '0.578345', '0.495567', '0.631993', '0.571556', '0.749132', '0.543103', '0.610320', '0.530131', '0.558059', '0.556145', '0.643042', '0.531989']
         : correct/total = [(649, 1140), (645, 1158), (682, 1127), (708, 1158), (626, 1134), (697, 1145), (721, 1145), (765, 1127), (657, 1136), (559, 1128), (723, 1144), (643, 1125), (863, 1152), (630, 1160), (686, 1124), (607, 1145), (644, 1154), (629, 1131), (744, 1157), (607, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.6826 ± 0.0715 | min=0.5898 max=0.8142
         : test loss mean=0.5471 ± 0.0361
         : individual accs = ['0.766667', '0.589810', '0.710736', '0.809154', '0.609347', '0.665502', '0.724017', '0.728483', '0.662852', '0.667553', '0.760490', '0.592889', '0.814236', '0.593966', '0.704626', '0.598253', '0.683709', '0.591512', '0.735523', '0.642419']
         : correct/total = [(874, 1140), (683, 1158), (801, 1127), (937, 1158), (691, 1134), (762, 1145), (829, 1145), (821, 1127), (753, 1136), (753, 1128), (870, 1144), (667, 1125), (938, 1152), (689, 1160), (792, 1124), (685, 1145), (789, 1154), (669, 1131), (851, 1157), (733, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.7567 ± 0.0513 | min=0.6026 max=0.8160
         : test loss mean=0.5061 ± 0.0300
         : individual accs = ['0.810526', '0.708981', '0.776398', '0.770294', '0.715168', '0.804367', '0.810480', '0.776398', '0.773768', '0.687057', '0.780594', '0.809778', '0.815972', '0.756897', '0.699288', '0.602620', '0.753033', '0.765694', '0.772688', '0.744961']
         : correct/total = [(924, 1140), (821, 1158), (875, 1127), (892, 1158), (811, 1134), (921, 1145), (928, 1145), (875, 1127), (879, 1136), (775, 1128), (893, 1144), (911, 1125), (940, 1152), (878, 1160), (786, 1124), (690, 1145), (869, 1154), (866, 1131), (894, 1157), (850, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.8164 ± 0.0333 | min=0.7527 max=0.8785
         : test loss mean=0.4648 ± 0.0226
         : individual accs = ['0.826316', '0.771157', '0.831411', '0.852332', '0.782187', '0.823581', '0.868122', '0.808341', '0.818662', '0.752660', '0.844406', '0.839111', '0.878472', '0.793103', '0.833630', '0.770306', '0.780763', '0.805482', '0.844425', '0.802805']
         : correct/total = [(942, 1140), (893, 1158), (937, 1127), (987, 1158), (887, 1134), (943, 1145), (994, 1145), (911, 1127), (930, 1136), (849, 1128), (966, 1144), (944, 1125), (1012, 1152), (920, 1160), (937, 1124), (882, 1145), (901, 1154), (911, 1131), (977, 1157), (916, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.8218 ± 0.0267 | min=0.7791 max=0.8649
         : test loss mean=0.4497 ± 0.0209
         : individual accs = ['0.812281', '0.855786', '0.818988', '0.820380', '0.795414', '0.862882', '0.848035', '0.779059', '0.798415', '0.810284', '0.844406', '0.864889', '0.848090', '0.821552', '0.836299', '0.786900', '0.796360', '0.782493', '0.845290', '0.808940']
         : correct/total = [(926, 1140), (991, 1158), (923, 1127), (950, 1158), (902, 1134), (988, 1145), (971, 1145), (878, 1127), (907, 1136), (914, 1128), (966, 1144), (973, 1125), (977, 1152), (953, 1160), (940, 1124), (901, 1145), (919, 1154), (885, 1131), (978, 1157), (923, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.8477 ± 0.0267 | min=0.8104 max=0.9040
         : test loss mean=0.4173 ± 0.0237
         : individual accs = ['0.850000', '0.846287', '0.820763', '0.863558', '0.810406', '0.849782', '0.897817', '0.850932', '0.835387', '0.851950', '0.824301', '0.904000', '0.896701', '0.818103', '0.850534', '0.852402', '0.837088', '0.820513', '0.859983', '0.813322']
         : correct/total = [(969, 1140), (980, 1158), (925, 1127), (1000, 1158), (919, 1134), (973, 1145), (1028, 1145), (959, 1127), (949, 1136), (961, 1128), (943, 1144), (1017, 1125), (1033, 1152), (949, 1160), (956, 1124), (976, 1145), (966, 1154), (928, 1131), (995, 1157), (928, 1141)]
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Overall test accuracy: mean=0.8477 ± 0.0267

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.036s (4.3%)
  - Filtering time: 0.008s (0.9%)
  - Aggregation time: 0.796s (94.8%)
  - Total time: 0.840s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
