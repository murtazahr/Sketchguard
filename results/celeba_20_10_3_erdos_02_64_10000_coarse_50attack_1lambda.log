Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 4500 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
Degree statistics: avg=4.80, min=2, max=7
Attack: Compromised 10/20 nodes: [1, 2, 5, 11, 12, 13, 14, 15, 17, 18]
Attack type: directed_deviation, lambda: 1.0
Model variant: baseline
Model parameters: 2,219,692
COARSE Node 0:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 2,219,692 parameters
  - Config: COARSEConfig(gamma=2, kappa=1, alpha=0.5, min_neighbors=1, sketch_size=1000, network_seed=987654321, attack_detection_window=5)
  - Sketch size: 1000
  - Compression ratio: 2219.7x
  - Complexity: O(d + N×k) = O(2,219,692 + 20×1000)
  - Theoretical speedup vs BALANCE: 19.8x
Initial test acc across nodes: mean=0.4978 ± 0.0208
Round 001: test acc mean=0.6475 ± 0.0601 | min=0.5215 max=0.7252
         : test loss mean=0.6784 ± 0.0056
         : individual accs = ['0.707895', '0.681347', '0.533274', '0.701209', '0.571429', '0.592140', '0.676856', '0.616681', '0.636444', '0.702128', '0.594406', '0.695111', '0.702257', '0.679310', '0.626335', '0.661135', '0.715771', '0.609195', '0.725151', '0.521472']
         : correct/total = [(807, 1140), (789, 1158), (601, 1127), (812, 1158), (648, 1134), (678, 1145), (775, 1145), (695, 1127), (723, 1136), (792, 1128), (680, 1144), (782, 1125), (809, 1152), (788, 1160), (704, 1124), (757, 1145), (826, 1154), (689, 1131), (839, 1157), (595, 1141)]
         : compromised: 0.6505, honest: 0.6444
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.400']...
Round 002: test acc mean=0.7020 ± 0.0302 | min=0.6542 max=0.7530
         : test loss mean=0.6265 ± 0.0362
         : individual accs = ['0.700000', '0.679620', '0.657498', '0.714162', '0.666667', '0.731878', '0.708297', '0.689441', '0.732394', '0.711879', '0.733392', '0.654222', '0.706597', '0.738793', '0.712633', '0.673362', '0.753033', '0.660477', '0.674157', '0.741455']
         : correct/total = [(798, 1140), (787, 1158), (741, 1127), (827, 1158), (756, 1134), (838, 1145), (811, 1145), (777, 1127), (832, 1136), (803, 1128), (839, 1144), (736, 1125), (814, 1152), (857, 1160), (801, 1124), (771, 1145), (869, 1154), (747, 1131), (780, 1157), (846, 1141)]
         : compromised: 0.6889, honest: 0.7151
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.400']...
Round 003: test acc mean=0.7742 ± 0.0410 | min=0.6950 max=0.8295
         : test loss mean=0.5300 ± 0.0730
         : individual accs = ['0.785965', '0.733161', '0.728483', '0.778066', '0.783069', '0.810480', '0.776419', '0.769299', '0.810739', '0.790780', '0.829545', '0.772444', '0.730903', '0.800862', '0.810498', '0.712664', '0.828423', '0.694960', '0.711322', '0.826468']
         : correct/total = [(896, 1140), (849, 1158), (821, 1127), (901, 1158), (888, 1134), (928, 1145), (889, 1145), (867, 1127), (921, 1136), (892, 1128), (949, 1144), (869, 1125), (842, 1152), (929, 1160), (911, 1124), (816, 1145), (956, 1154), (786, 1131), (823, 1157), (943, 1141)]
         : compromised: 0.7506, honest: 0.7979
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.444', 'Node 2: acc_rate=0.400']...
Round 004: test acc mean=0.8207 ± 0.0443 | min=0.6504 max=0.8706
         : test loss mean=0.4274 ± 0.0764
         : individual accs = ['0.830702', '0.829879', '0.650399', '0.829016', '0.836861', '0.848908', '0.837555', '0.832298', '0.852993', '0.830674', '0.870629', '0.807111', '0.795139', '0.837069', '0.833630', '0.783406', '0.832756', '0.803714', '0.809853', '0.860649']
         : correct/total = [(947, 1140), (961, 1158), (733, 1127), (960, 1158), (949, 1134), (972, 1145), (959, 1145), (938, 1127), (969, 1136), (937, 1128), (996, 1144), (908, 1125), (916, 1152), (971, 1160), (937, 1124), (897, 1145), (961, 1154), (909, 1131), (937, 1157), (982, 1141)]
         : compromised: 0.7999, honest: 0.8414
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.417', 'Node 2: acc_rate=0.400']...
Round 005: test acc mean=0.8555 ± 0.0317 | min=0.7365 max=0.8817
         : test loss mean=0.3533 ± 0.0645
         : individual accs = ['0.852632', '0.881693', '0.736469', '0.868739', '0.865961', '0.834934', '0.862009', '0.862467', '0.873239', '0.876773', '0.881119', '0.852444', '0.849826', '0.867241', '0.864769', '0.818341', '0.878683', '0.859416', '0.842697', '0.879930']
         : correct/total = [(972, 1140), (1021, 1158), (830, 1127), (1006, 1158), (982, 1134), (956, 1145), (987, 1145), (972, 1127), (992, 1136), (989, 1128), (1008, 1144), (959, 1125), (979, 1152), (1006, 1160), (972, 1124), (937, 1145), (1014, 1154), (972, 1131), (975, 1157), (1004, 1141)]
         : compromised: 0.8408, honest: 0.8702
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.400', 'Node 2: acc_rate=0.400']...
Round 006: test acc mean=0.8699 ± 0.0328 | min=0.7555 max=0.8925
         : test loss mean=0.3134 ± 0.0629
         : individual accs = ['0.887719', '0.886010', '0.801242', '0.886010', '0.870370', '0.890830', '0.877729', '0.875776', '0.883803', '0.875000', '0.892483', '0.888889', '0.869792', '0.871552', '0.886121', '0.755459', '0.891681', '0.871795', '0.851340', '0.883436']
         : correct/total = [(1012, 1140), (1026, 1158), (903, 1127), (1026, 1158), (987, 1134), (1020, 1145), (1005, 1145), (987, 1127), (1004, 1136), (987, 1128), (1021, 1144), (1000, 1125), (1002, 1152), (1011, 1160), (996, 1124), (865, 1145), (1029, 1154), (986, 1131), (985, 1157), (1008, 1141)]
         : compromised: 0.8573, honest: 0.8824
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.389', 'Node 2: acc_rate=0.400']...
Round 007: test acc mean=0.8821 ± 0.0205 | min=0.8114 max=0.9004
         : test loss mean=0.2840 ± 0.0355
         : individual accs = ['0.894737', '0.898964', '0.856256', '0.893782', '0.879189', '0.900437', '0.888210', '0.893523', '0.888204', '0.897163', '0.890734', '0.876444', '0.883681', '0.886207', '0.897687', '0.811354', '0.887348', '0.880637', '0.851340', '0.885188']
         : correct/total = [(1020, 1140), (1041, 1158), (965, 1127), (1035, 1158), (997, 1134), (1031, 1145), (1017, 1145), (1007, 1127), (1009, 1136), (1012, 1128), (1019, 1144), (986, 1125), (1018, 1152), (1028, 1160), (1009, 1124), (929, 1145), (1024, 1154), (996, 1131), (985, 1157), (1010, 1141)]
         : compromised: 0.8743, honest: 0.8898
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.381', 'Node 2: acc_rate=0.343']...
Round 008: test acc mean=0.8866 ± 0.0114 | min=0.8607 max=0.9039
         : test loss mean=0.2709 ± 0.0184
         : individual accs = ['0.896491', '0.896373', '0.860692', '0.892055', '0.879189', '0.901310', '0.887336', '0.888199', '0.879401', '0.890071', '0.887238', '0.902222', '0.892361', '0.888793', '0.903915', '0.865502', '0.890815', '0.881521', '0.871219', '0.878177']
         : correct/total = [(1022, 1140), (1038, 1158), (970, 1127), (1033, 1158), (997, 1134), (1032, 1145), (1016, 1145), (1001, 1127), (999, 1136), (1004, 1128), (1015, 1144), (1015, 1125), (1028, 1152), (1031, 1160), (1016, 1124), (991, 1145), (1028, 1154), (997, 1131), (1008, 1157), (1002, 1141)]
         : compromised: 0.8864, honest: 0.8869
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.375', 'Node 2: acc_rate=0.325']...
Round 009: test acc mean=0.8933 ± 0.0098 | min=0.8686 max=0.9083
         : test loss mean=0.2568 ± 0.0158
         : individual accs = ['0.902632', '0.893782', '0.883762', '0.905872', '0.888889', '0.908297', '0.899563', '0.900621', '0.898768', '0.893617', '0.900350', '0.896889', '0.894097', '0.896552', '0.889680', '0.875109', '0.896880', '0.879752', '0.868626', '0.891323']
         : correct/total = [(1029, 1140), (1035, 1158), (996, 1127), (1049, 1158), (1008, 1134), (1040, 1145), (1030, 1145), (1015, 1127), (1021, 1136), (1008, 1128), (1030, 1144), (1009, 1125), (1030, 1152), (1040, 1160), (1000, 1124), (1002, 1145), (1035, 1154), (995, 1131), (1005, 1157), (1017, 1141)]
         : compromised: 0.8887, honest: 0.8979
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.370', 'Node 2: acc_rate=0.311']...
Round 010: test acc mean=0.8970 ± 0.0086 | min=0.8773 max=0.9075
         : test loss mean=0.2506 ± 0.0160
         : individual accs = ['0.903509', '0.901554', '0.879326', '0.905872', '0.893298', '0.904803', '0.898690', '0.902396', '0.896127', '0.900709', '0.900350', '0.898667', '0.905382', '0.900000', '0.907473', '0.885590', '0.902080', '0.885057', '0.877269', '0.892200']
         : correct/total = [(1030, 1140), (1044, 1158), (991, 1127), (1049, 1158), (1013, 1134), (1036, 1145), (1029, 1145), (1017, 1127), (1018, 1136), (1016, 1128), (1030, 1144), (1011, 1125), (1043, 1152), (1044, 1160), (1020, 1124), (1014, 1145), (1041, 1154), (1001, 1131), (1015, 1157), (1018, 1141)]
         : compromised: 0.8945, honest: 0.8995
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.367', 'Node 2: acc_rate=0.300']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: directed_deviation, 50.0% compromised
Final accuracy - Compromised: 0.8945, Honest: 0.8995
Overall test accuracy: mean=0.8970 ± 0.0086

=== COARSE SUMMARY ===
Node 0: acceptance=0.667
Node 1: acceptance=0.367
Node 2: acceptance=0.300
Node 3: acceptance=0.500
Node 4: acceptance=0.250
Node 5: acceptance=0.200
Node 6: acceptance=0.400
Node 7: acceptance=0.400
Node 8: acceptance=0.500
Node 9: acceptance=0.667
Node 10: acceptance=0.500
Node 11: acceptance=0.343
Node 12: acceptance=0.471
Node 13: acceptance=0.250
Node 14: acceptance=0.143
Node 15: acceptance=0.250
Node 16: acceptance=0.200
Node 17: acceptance=0.460
Node 18: acceptance=0.400
Node 19: acceptance=0.500

=== PARALLEL EXECUTION TIME (realistic for distributed system) ===
  COMMUNICATION (max across nodes):
    - Sketch transfer: 0.000s (0.0%)
    - Model fetch (accepted): 0.000s (0.0%)
  COMPUTATION (max across nodes):
    - Sketching: 0.271s (94.9%)
    - Filtering: 0.001s (0.3%)
    - Aggregation: 0.014s (4.8%)
  TOTALS:
    - Total computation: 0.285s (100.0%)
    - Total communication: 0.000s (0.0%)
    - Total parallel time: 0.285s

=== PER-NODE AVERAGE TIME ===
  - Sketching: 0.201s
  - Filtering: 0.000s
  - Aggregation: 0.005s
  - Sketch transfer: 0.000s
  - Model fetch: 0.000s
  - Total per node: 0.207s

=== TOTAL COMPUTATIONAL WORK (sum across all nodes) ===
  - Total sketching: 4.027s
  - Total filtering: 0.008s
  - Total aggregation: 0.110s
  - Total sketch transfer: 0.000s
  - Total model fetch: 0.000s
  - Grand total: 4.146s
  - Mean acceptance rate: 0.388

COARSE Algorithm Properties:
  - Original dimension: 2,219,692
  - Sketch size: 1000
  - Compression ratio: 19.8x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
