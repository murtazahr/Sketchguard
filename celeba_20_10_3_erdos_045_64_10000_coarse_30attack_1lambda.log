Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 4500 samples per client per epoch
Graph: erdos, nodes: 20, edges: 99
Degree statistics: avg=9.90, min=7, max=14
Attack: Compromised 6/20 nodes: [5, 12, 13, 14, 17, 18]
Attack type: directed_deviation, lambda: 1.0
Model variant: baseline
Model parameters: 2,219,692
COARSE Node 0:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 2,219,692 parameters
  - Config: COARSEConfig(gamma=2, kappa=1, alpha=0.5, min_neighbors=1, sketch_size=1000, network_seed=987654321, attack_detection_window=5)
  - Sketch size: 1000
  - Compression ratio: 2219.7x
  - Complexity: O(d + N×k) = O(2,219,692 + 20×1000)
  - Theoretical speedup vs BALANCE: 19.8x
Initial test acc across nodes: mean=0.4978 ± 0.0208
Round 001: test acc mean=0.6643 ± 0.0516 | min=0.5291 max=0.7236
         : test loss mean=0.6807 ± 0.0038
         : individual accs = ['0.708772', '0.676166', '0.614907', '0.706390', '0.529101', '0.650655', '0.684716', '0.595386', '0.573063', '0.709220', '0.667832', '0.723556', '0.723090', '0.689655', '0.663701', '0.662882', '0.669844', '0.694960', '0.717373', '0.624890']
         : correct/total = [(808, 1140), (783, 1158), (693, 1127), (818, 1158), (600, 1134), (745, 1145), (784, 1145), (671, 1127), (651, 1136), (800, 1128), (764, 1144), (814, 1125), (833, 1152), (800, 1160), (746, 1124), (759, 1145), (773, 1154), (786, 1131), (830, 1157), (713, 1141)]
         : compromised: 0.6899, honest: 0.6533
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.800', 'Node 2: acc_rate=0.750']...
Round 002: test acc mean=0.6452 ± 0.0551 | min=0.5229 max=0.7196
         : test loss mean=0.6727 ± 0.0096
         : individual accs = ['0.650000', '0.664076', '0.643301', '0.633851', '0.522928', '0.530131', '0.649782', '0.654836', '0.703345', '0.658688', '0.677448', '0.661333', '0.719618', '0.631897', '0.523132', '0.661135', '0.704506', '0.659593', '0.689715', '0.664330']
         : correct/total = [(741, 1140), (769, 1158), (725, 1127), (734, 1158), (593, 1134), (607, 1145), (744, 1145), (738, 1127), (799, 1136), (743, 1128), (775, 1144), (744, 1125), (829, 1152), (733, 1160), (588, 1124), (757, 1145), (813, 1154), (746, 1131), (798, 1157), (758, 1141)]
         : compromised: 0.6257, honest: 0.6535
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.800', 'Node 2: acc_rate=0.750']...
Round 003: test acc mean=0.6716 ± 0.0436 | min=0.5196 max=0.7236
         : test loss mean=0.6507 ± 0.0193
         : individual accs = ['0.650000', '0.682211', '0.677019', '0.699482', '0.638448', '0.614847', '0.683843', '0.677019', '0.722711', '0.696809', '0.687063', '0.702222', '0.656250', '0.698276', '0.519573', '0.691703', '0.723570', '0.655172', '0.687986', '0.667835']
         : correct/total = [(741, 1140), (790, 1158), (763, 1127), (810, 1158), (724, 1134), (704, 1145), (783, 1145), (763, 1127), (821, 1136), (786, 1128), (786, 1144), (790, 1125), (756, 1152), (810, 1160), (584, 1124), (792, 1145), (835, 1154), (741, 1131), (796, 1157), (762, 1141)]
         : compromised: 0.6387, honest: 0.6857
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.800', 'Node 2: acc_rate=0.750']...
Round 004: test acc mean=0.7242 ± 0.0240 | min=0.6806 max=0.7596
         : test loss mean=0.5942 ± 0.0258
         : individual accs = ['0.716667', '0.727116', '0.721384', '0.748705', '0.698413', '0.708297', '0.733624', '0.708962', '0.757042', '0.738475', '0.759615', '0.755556', '0.705729', '0.717241', '0.680605', '0.750218', '0.754766', '0.717065', '0.685393', '0.698510']
         : correct/total = [(817, 1140), (842, 1158), (813, 1127), (867, 1158), (792, 1134), (811, 1145), (840, 1145), (799, 1127), (860, 1136), (833, 1128), (869, 1144), (850, 1125), (813, 1152), (832, 1160), (765, 1124), (859, 1145), (871, 1154), (811, 1131), (793, 1157), (797, 1141)]
         : compromised: 0.7024, honest: 0.7335
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.800', 'Node 2: acc_rate=0.750']...
Round 005: test acc mean=0.7682 ± 0.0231 | min=0.7152 max=0.8111
         : test loss mean=0.5124 ± 0.0272
         : individual accs = ['0.774561', '0.771157', '0.732919', '0.772021', '0.769841', '0.751965', '0.786026', '0.753327', '0.779049', '0.798759', '0.790210', '0.793778', '0.743924', '0.761207', '0.769573', '0.781659', '0.811092', '0.770115', '0.738116', '0.715162']
         : correct/total = [(883, 1140), (893, 1158), (826, 1127), (894, 1158), (873, 1134), (861, 1145), (900, 1145), (849, 1127), (885, 1136), (901, 1128), (904, 1144), (893, 1125), (857, 1152), (883, 1160), (865, 1124), (895, 1145), (936, 1154), (871, 1131), (854, 1157), (816, 1141)]
         : compromised: 0.7558, honest: 0.7735
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.800', 'Node 2: acc_rate=0.750']...
Round 006: test acc mean=0.8102 ± 0.0180 | min=0.7744 max=0.8409
         : test loss mean=0.4337 ± 0.0224
         : individual accs = ['0.805263', '0.832470', '0.818101', '0.822971', '0.798060', '0.820961', '0.802620', '0.792369', '0.820423', '0.831560', '0.840909', '0.832000', '0.799479', '0.793103', '0.785587', '0.809607', '0.830156', '0.792219', '0.774417', '0.801928']
         : correct/total = [(918, 1140), (964, 1158), (922, 1127), (953, 1158), (905, 1134), (940, 1145), (919, 1145), (893, 1127), (932, 1136), (938, 1128), (962, 1144), (936, 1125), (921, 1152), (920, 1160), (883, 1124), (927, 1145), (958, 1154), (896, 1131), (896, 1157), (915, 1141)]
         : compromised: 0.7943, honest: 0.8170
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.800', 'Node 2: acc_rate=0.750']...
Round 007: test acc mean=0.8492 ± 0.0154 | min=0.8099 max=0.8715
         : test loss mean=0.3583 ± 0.0176
         : individual accs = ['0.848246', '0.867876', '0.853594', '0.854922', '0.840388', '0.850655', '0.857642', '0.850044', '0.847711', '0.871454', '0.862762', '0.871111', '0.828993', '0.850000', '0.840747', '0.830568', '0.864818', '0.829355', '0.809853', '0.852761']
         : correct/total = [(967, 1140), (1005, 1158), (962, 1127), (990, 1158), (953, 1134), (974, 1145), (982, 1145), (958, 1127), (963, 1136), (983, 1128), (987, 1144), (980, 1125), (955, 1152), (986, 1160), (945, 1124), (951, 1145), (998, 1154), (938, 1131), (937, 1157), (973, 1141)]
         : compromised: 0.8349, honest: 0.8553
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.800', 'Node 2: acc_rate=0.750']...
Round 008: test acc mean=0.8687 ± 0.0102 | min=0.8453 max=0.8836
         : test loss mean=0.3154 ± 0.0140
         : individual accs = ['0.863158', '0.883420', '0.869565', '0.868739', '0.857143', '0.880349', '0.868122', '0.873114', '0.866197', '0.875000', '0.874126', '0.883556', '0.861979', '0.874138', '0.880783', '0.859389', '0.875217', '0.850575', '0.845290', '0.865031']
         : correct/total = [(984, 1140), (1023, 1158), (980, 1127), (1006, 1158), (972, 1134), (1008, 1145), (994, 1145), (984, 1127), (984, 1136), (987, 1128), (1000, 1144), (994, 1125), (993, 1152), (1014, 1160), (990, 1124), (984, 1145), (1010, 1154), (962, 1131), (978, 1157), (987, 1141)]
         : compromised: 0.8655, honest: 0.8701
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.800', 'Node 2: acc_rate=0.750']...
Round 009: test acc mean=0.8800 ± 0.0133 | min=0.8453 max=0.8969
         : test loss mean=0.2886 ± 0.0206
         : individual accs = ['0.876316', '0.895509', '0.869565', '0.887737', '0.876543', '0.896070', '0.887336', '0.889973', '0.884683', '0.890071', '0.887238', '0.896889', '0.874132', '0.877586', '0.882562', '0.866376', '0.881282', '0.852343', '0.845290', '0.883436']
         : correct/total = [(999, 1140), (1037, 1158), (980, 1127), (1028, 1158), (994, 1134), (1026, 1145), (1016, 1145), (1003, 1127), (1005, 1136), (1004, 1128), (1015, 1144), (1009, 1125), (1007, 1152), (1018, 1160), (992, 1124), (992, 1145), (1017, 1154), (964, 1131), (978, 1157), (1008, 1141)]
         : compromised: 0.8713, honest: 0.8838
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.800', 'Node 2: acc_rate=0.750']...
Round 010: test acc mean=0.8893 ± 0.0082 | min=0.8704 max=0.9043
         : test loss mean=0.2711 ± 0.0158
         : individual accs = ['0.892105', '0.892055', '0.884650', '0.891192', '0.888889', '0.896943', '0.885590', '0.895297', '0.895246', '0.904255', '0.888986', '0.894222', '0.886285', '0.891379', '0.899466', '0.877729', '0.889948', '0.871795', '0.870354', '0.890447']
         : correct/total = [(1017, 1140), (1033, 1158), (997, 1127), (1032, 1158), (1008, 1134), (1027, 1145), (1014, 1145), (1009, 1127), (1017, 1136), (1020, 1128), (1017, 1144), (1006, 1125), (1021, 1152), (1034, 1160), (1011, 1124), (1005, 1145), (1027, 1154), (986, 1131), (1007, 1157), (1016, 1141)]
         : compromised: 0.8860, honest: 0.8908
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.800', 'Node 2: acc_rate=0.750']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: directed_deviation, 30.0% compromised
Final accuracy - Compromised: 0.8860, Honest: 0.8908
Overall test accuracy: mean=0.8893 ± 0.0082

=== COARSE SUMMARY ===
Node 0: acceptance=0.667
Node 1: acceptance=0.800
Node 2: acceptance=0.750
Node 3: acceptance=0.714
Node 4: acceptance=0.667
Node 5: acceptance=0.700
Node 6: acceptance=0.583
Node 7: acceptance=0.545
Node 8: acceptance=0.286
Node 9: acceptance=0.909
Node 10: acceptance=0.750
Node 11: acceptance=0.583
Node 12: acceptance=0.750
Node 13: acceptance=0.778
Node 14: acceptance=0.643
Node 15: acceptance=0.556
Node 16: acceptance=0.571
Node 17: acceptance=0.750
Node 18: acceptance=0.750
Node 19: acceptance=0.600

=== PARALLEL EXECUTION TIME (realistic for distributed system) ===
  COMMUNICATION (max across nodes):
    - Sketch transfer: 0.000s (0.0%)
    - Model fetch (accepted): 0.000s (0.0%)
  COMPUTATION (max across nodes):
    - Sketching: 0.270s (92.5%)
    - Filtering: 0.001s (0.4%)
    - Aggregation: 0.021s (7.1%)
  TOTALS:
    - Total computation: 0.292s (100.0%)
    - Total communication: 0.000s (0.0%)
    - Total parallel time: 0.292s

=== PER-NODE AVERAGE TIME ===
  - Sketching: 0.188s
  - Filtering: 0.001s
  - Aggregation: 0.010s
  - Sketch transfer: 0.000s
  - Model fetch: 0.000s
  - Total per node: 0.198s

=== TOTAL COMPUTATIONAL WORK (sum across all nodes) ===
  - Total sketching: 3.758s
  - Total filtering: 0.012s
  - Total aggregation: 0.198s
  - Total sketch transfer: 0.000s
  - Total model fetch: 0.000s
  - Grand total: 3.968s
  - Mean acceptance rate: 0.668

COARSE Algorithm Properties:
  - Original dimension: 2,219,692
  - Sketch size: 1000
  - Compression ratio: 19.8x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
