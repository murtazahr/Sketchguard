Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
Attack: Compromised 12/20 nodes: [1, 2, 3, 5, 8, 11, 12, 13, 14, 15, 17, 18]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5115 ± 0.0162 | min=0.4896 max=0.5590
         : test loss mean=nan ± nan
         : individual accs = ['0.493860', '0.489637', '0.495120', '0.528497', '0.522046', '0.500437', '0.521397', '0.503993', '0.558979', '0.491135', '0.525350', '0.498667', '0.516493', '0.506897', '0.517794', '0.496943', '0.515598', '0.507515', '0.522040', '0.517967']
         : correct/total = [(563, 1140), (567, 1158), (558, 1127), (612, 1158), (592, 1134), (573, 1145), (597, 1145), (568, 1127), (635, 1136), (554, 1128), (601, 1144), (561, 1125), (595, 1152), (588, 1160), (582, 1124), (569, 1145), (595, 1154), (574, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5116, honest: 0.5114
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5183 ± 0.0149 | min=0.4761 max=0.5471
         : test loss mean=27.7517 ± 31.1988
         : individual accs = ['0.514912', '0.518998', '0.513753', '0.524180', '0.529982', '0.503930', '0.520524', '0.543922', '0.530810', '0.476064', '0.525350', '0.498667', '0.522569', '0.522414', '0.516904', '0.515284', '0.513865', '0.508400', '0.547105', '0.517967']
         : correct/total = [(587, 1140), (601, 1158), (579, 1127), (607, 1158), (601, 1134), (577, 1145), (596, 1145), (613, 1127), (603, 1136), (537, 1128), (601, 1144), (561, 1125), (602, 1152), (606, 1160), (581, 1124), (590, 1145), (593, 1154), (575, 1131), (633, 1157), (591, 1141)]
         : compromised: 0.5186, honest: 0.5178
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=2.3699 ± 1.0344
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5167, honest: 0.5158
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5329 ± 0.0281 | min=0.4978 max=0.5996
         : test loss mean=11.1720 ± 8.0640
         : individual accs = ['0.528070', '0.518998', '0.497782', '0.591537', '0.599647', '0.532751', '0.521397', '0.514641', '0.583627', '0.570035', '0.525350', '0.526222', '0.526042', '0.512069', '0.516904', '0.517031', '0.515598', '0.510168', '0.526361', '0.524102']
         : correct/total = [(602, 1140), (601, 1158), (561, 1127), (685, 1158), (680, 1134), (610, 1145), (597, 1145), (580, 1127), (663, 1136), (643, 1128), (601, 1144), (592, 1125), (606, 1152), (594, 1160), (581, 1124), (592, 1145), (595, 1154), (577, 1131), (609, 1157), (598, 1141)]
         : compromised: 0.5300, honest: 0.5374
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=1.3624 ± 0.3594
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5167, honest: 0.5158
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.5357 ± 0.0191 | min=0.5040 max=0.5915
         : test loss mean=11.9613 ± 7.7424
         : individual accs = ['0.537719', '0.519862', '0.503993', '0.550950', '0.558201', '0.529258', '0.521397', '0.517303', '0.591549', '0.523936', '0.540210', '0.543111', '0.526910', '0.537931', '0.533808', '0.520524', '0.522530', '0.539346', '0.529818', '0.565294']
         : correct/total = [(613, 1140), (602, 1158), (568, 1127), (638, 1158), (633, 1134), (606, 1145), (597, 1145), (583, 1127), (672, 1136), (591, 1128), (618, 1144), (611, 1125), (607, 1152), (624, 1160), (600, 1124), (596, 1145), (603, 1154), (610, 1131), (613, 1157), (645, 1141)]
         : compromised: 0.5356, honest: 0.5358
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=1.1230 ± 0.1841
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5167, honest: 0.5158
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.5561 ± 0.0324 | min=0.5138 max=0.6390
         : test loss mean=9.3826 ± 5.4776
         : individual accs = ['0.550877', '0.535406', '0.527063', '0.639033', '0.577601', '0.551092', '0.521397', '0.513753', '0.588028', '0.572695', '0.550699', '0.557333', '0.547743', '0.556897', '0.564947', '0.531878', '0.525130', '0.548187', '0.531547', '0.631025']
         : correct/total = [(628, 1140), (620, 1158), (594, 1127), (740, 1158), (655, 1134), (631, 1145), (597, 1145), (579, 1127), (668, 1136), (646, 1128), (630, 1144), (627, 1125), (631, 1152), (646, 1160), (635, 1124), (609, 1145), (606, 1154), (620, 1131), (615, 1157), (720, 1141)]
         : compromised: 0.5566, honest: 0.5554
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=1.0582 ± 0.1125
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5167, honest: 0.5158
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.5551 ± 0.0372 | min=0.5031 max=0.6552
         : test loss mean=10.3353 ± 5.9041
         : individual accs = ['0.535965', '0.514680', '0.503106', '0.607081', '0.564374', '0.563319', '0.521397', '0.518190', '0.575704', '0.542553', '0.569056', '0.547556', '0.549479', '0.596552', '0.541815', '0.533624', '0.528596', '0.655172', '0.525497', '0.608238']
         : correct/total = [(611, 1140), (596, 1158), (567, 1127), (703, 1158), (640, 1134), (645, 1145), (597, 1145), (584, 1127), (654, 1136), (612, 1128), (651, 1144), (616, 1125), (633, 1152), (692, 1160), (609, 1124), (611, 1145), (610, 1154), (741, 1131), (608, 1157), (694, 1141)]
         : compromised: 0.5595, honest: 0.5485
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: directed_deviation, 60.0% compromised
Final accuracy - Compromised: 0.5595, Honest: 0.5485
Overall test accuracy: mean=0.5551 ± 0.0372

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.050s (10.7%)
  - Filtering time: 0.005s (1.1%)
  - Aggregation time: 0.408s (88.2%)
  - Total time: 0.463s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
