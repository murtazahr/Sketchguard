Device: cpu
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 4500 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
Degree statistics: avg=4.80, min=2, max=7
Attack: Compromised 12/20 nodes: [1, 2, 3, 5, 8, 11, 12, 13, 14, 15, 17, 18]
Attack type: directed_deviation, lambda: 1.0
Model variant: baseline
Model parameters: 2,219,692
COARSE Node 0:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 2,219,692 parameters
  - Config: COARSEConfig(gamma=2, kappa=1, alpha=0.5, min_neighbors=1, sketch_size=1000, network_seed=987654321, attack_detection_window=5)
  - Sketch size: 1000
  - Compression ratio: 2219.7x
  - Complexity: O(d + N×k) = O(2,219,692 + 20×1000)
  - Theoretical speedup vs BALANCE: 19.8x
Initial test acc across nodes: mean=0.4978 ± 0.0207
Round 001: test acc mean=0.6269 ± 0.0632 | min=0.4793 max=0.7158
         : test loss mean=93.7458 ± 405.6754
         : individual accs = ['0.699123', '0.680484', '0.535936', '0.699482', '0.573192', '0.588646', '0.643668', '0.617569', '0.635563', '0.655142', '0.594406', '0.691556', '0.700521', '0.479310', '0.627224', '0.655022', '0.715771', '0.608311', '0.615385', '0.521472']
         : correct/total = [(797, 1140), (788, 1158), (604, 1127), (810, 1158), (650, 1134), (674, 1145), (737, 1145), (696, 1127), (722, 1136), (739, 1128), (680, 1144), (778, 1125), (807, 1152), (556, 1160), (705, 1124), (750, 1145), (826, 1154), (688, 1131), (712, 1157), (595, 1141)]
         : compromised: 0.6265, honest: 0.6275
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.400']...
Round 002: test acc mean=0.6968 ± 0.0529 | min=0.5069 max=0.7574
         : test loss mean=nan ± nan
         : individual accs = ['0.704386', '0.684801', '0.657498', '0.707254', '0.666667', '0.731878', '0.739738', '0.690328', '0.733275', '0.750000', '0.732517', '0.663111', '0.709201', '0.506897', '0.712633', '0.684716', '0.757366', '0.660477', '0.701815', '0.740578']
         : correct/total = [(803, 1140), (793, 1158), (741, 1127), (819, 1158), (756, 1134), (838, 1145), (847, 1145), (778, 1127), (833, 1136), (846, 1128), (838, 1144), (746, 1125), (817, 1152), (588, 1160), (801, 1124), (784, 1145), (874, 1154), (747, 1131), (812, 1157), (845, 1141)]
         : compromised: 0.6795, honest: 0.7227
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.400']...
Round 003: test acc mean=0.7745 ± 0.0742 | min=0.5069 max=0.8380
         : test loss mean=nan ± nan
         : individual accs = ['0.828070', '0.751295', '0.727595', '0.797927', '0.784832', '0.810480', '0.827948', '0.770186', '0.828345', '0.832447', '0.829545', '0.782222', '0.748264', '0.506897', '0.813167', '0.719651', '0.837955', '0.692308', '0.773552', '0.826468']
         : correct/total = [(944, 1140), (870, 1158), (820, 1127), (924, 1158), (890, 1134), (928, 1145), (948, 1145), (868, 1127), (941, 1136), (939, 1128), (949, 1144), (880, 1125), (862, 1152), (588, 1160), (914, 1124), (824, 1145), (967, 1154), (783, 1131), (895, 1157), (943, 1141)]
         : compromised: 0.7460, honest: 0.8172
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.400']...
Round 004: test acc mean=0.8161 ± 0.0872 | min=0.5069 max=0.8785
         : test loss mean=nan ± nan
         : individual accs = ['0.858772', '0.847150', '0.637090', '0.856649', '0.835979', '0.848908', '0.867249', '0.832298', '0.873239', '0.878546', '0.868881', '0.800000', '0.828125', '0.506897', '0.838968', '0.793886', '0.859619', '0.803714', '0.825411', '0.860649']
         : correct/total = [(979, 1140), (981, 1158), (718, 1127), (992, 1158), (948, 1134), (972, 1145), (993, 1145), (938, 1127), (992, 1136), (991, 1128), (994, 1144), (900, 1125), (954, 1152), (588, 1160), (943, 1124), (909, 1145), (992, 1154), (909, 1131), (955, 1157), (982, 1141)]
         : compromised: 0.7883, honest: 0.8577
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.458', 'Node 2: acc_rate=0.400']...
Round 005: test acc mean=0.8419 ± 0.0823 | min=0.5069 max=0.8892
         : test loss mean=nan ± nan
         : individual accs = ['0.862281', '0.888601', '0.762201', '0.886874', '0.865079', '0.834934', '0.859389', '0.861579', '0.880282', '0.889184', '0.882867', '0.864000', '0.868056', '0.506897', '0.860320', '0.837555', '0.877816', '0.858532', '0.810717', '0.879930']
         : correct/total = [(983, 1140), (1029, 1158), (859, 1127), (1027, 1158), (981, 1134), (956, 1145), (984, 1145), (971, 1127), (1000, 1136), (1003, 1128), (1010, 1144), (972, 1125), (1000, 1152), (588, 1160), (967, 1124), (959, 1145), (1013, 1154), (971, 1131), (938, 1157), (1004, 1141)]
         : compromised: 0.8216, honest: 0.8723
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.433', 'Node 2: acc_rate=0.400']...
Round 006: test acc mean=0.8535 ± 0.0846 | min=0.5069 max=0.8959
         : test loss mean=nan ± nan
         : individual accs = ['0.892982', '0.884283', '0.829636', '0.882556', '0.870370', '0.890830', '0.883843', '0.874889', '0.889965', '0.888298', '0.891608', '0.851556', '0.882812', '0.506897', '0.895907', '0.772926', '0.891681', '0.872679', '0.834054', '0.882559']
         : correct/total = [(1018, 1140), (1024, 1158), (935, 1127), (1022, 1158), (987, 1134), (1020, 1145), (1012, 1145), (986, 1127), (1011, 1136), (1002, 1128), (1020, 1144), (958, 1125), (1017, 1152), (588, 1160), (1007, 1124), (885, 1145), (1029, 1154), (987, 1131), (965, 1157), (1007, 1141)]
         : compromised: 0.8328, honest: 0.8845
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.417', 'Node 2: acc_rate=0.400']...
Round 007: test acc mean=0.8665 ± 0.0840 | min=0.5069 max=0.9024
         : test loss mean=nan ± nan
         : individual accs = ['0.899123', '0.893782', '0.849157', '0.902418', '0.877425', '0.900437', '0.895197', '0.893523', '0.890845', '0.892730', '0.890734', '0.883556', '0.889757', '0.506897', '0.892349', '0.836681', '0.894281', '0.879752', '0.874676', '0.886065']
         : correct/total = [(1025, 1140), (1035, 1158), (957, 1127), (1045, 1158), (995, 1134), (1031, 1145), (1025, 1145), (1007, 1127), (1012, 1136), (1007, 1128), (1019, 1144), (994, 1125), (1025, 1152), (588, 1160), (1003, 1124), (958, 1145), (1032, 1154), (995, 1131), (1012, 1157), (1011, 1141)]
         : compromised: 0.8500, honest: 0.8911
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.405', 'Node 2: acc_rate=0.343']...
Round 008: test acc mean=0.8698 ± 0.0840 | min=0.5069 max=0.9039
         : test loss mean=nan ± nan
         : individual accs = ['0.897368', '0.898100', '0.857143', '0.900691', '0.879189', '0.901310', '0.889956', '0.888199', '0.892606', '0.892730', '0.888112', '0.894222', '0.900174', '0.506897', '0.903915', '0.869869', '0.895147', '0.881521', '0.880726', '0.877301']
         : correct/total = [(1023, 1140), (1040, 1158), (966, 1127), (1043, 1158), (997, 1134), (1032, 1145), (1019, 1145), (1001, 1127), (1014, 1136), (1007, 1128), (1016, 1144), (1006, 1125), (1037, 1152), (588, 1160), (1016, 1124), (996, 1145), (1033, 1154), (997, 1131), (1019, 1157), (1001, 1141)]
         : compromised: 0.8573, honest: 0.8885
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.396', 'Node 2: acc_rate=0.325']...
Round 009: test acc mean=0.8741 ± 0.0849 | min=0.5069 max=0.9074
         : test loss mean=nan ± nan
         : individual accs = ['0.900000', '0.893782', '0.883762', '0.905872', '0.888889', '0.907424', '0.898690', '0.900621', '0.900528', '0.891844', '0.900350', '0.897778', '0.899306', '0.506897', '0.893238', '0.876856', '0.901213', '0.879752', '0.864304', '0.890447']
         : correct/total = [(1026, 1140), (1035, 1158), (996, 1127), (1049, 1158), (1008, 1134), (1039, 1145), (1029, 1145), (1015, 1127), (1023, 1136), (1006, 1128), (1030, 1144), (1010, 1125), (1036, 1152), (588, 1160), (1004, 1124), (1004, 1145), (1040, 1154), (995, 1131), (1000, 1157), (1016, 1141)]
         : compromised: 0.8591, honest: 0.8965
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.389', 'Node 2: acc_rate=0.311']...
Round 010: test acc mean=0.8792 ± 0.0860 | min=0.5069 max=0.9128
         : test loss mean=nan ± nan
         : individual accs = ['0.911404', '0.902418', '0.879326', '0.912781', '0.892416', '0.904803', '0.896070', '0.904170', '0.896127', '0.903369', '0.900350', '0.906667', '0.906250', '0.506897', '0.907473', '0.889083', '0.907279', '0.885942', '0.878133', '0.892200']
         : correct/total = [(1039, 1140), (1045, 1158), (991, 1127), (1057, 1158), (1012, 1134), (1036, 1145), (1026, 1145), (1019, 1127), (1018, 1136), (1019, 1128), (1030, 1144), (1020, 1125), (1044, 1152), (588, 1160), (1020, 1124), (1018, 1145), (1047, 1154), (1002, 1131), (1016, 1157), (1018, 1141)]
         : compromised: 0.8647, honest: 0.9009
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.383', 'Node 2: acc_rate=0.300']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: directed_deviation, 60.0% compromised
Final accuracy - Compromised: 0.8647, Honest: 0.9009
Overall test accuracy: mean=0.8792 ± 0.0860

=== COARSE SUMMARY ===
Node 0: acceptance=0.500
Node 1: acceptance=0.383
Node 2: acceptance=0.300
Node 3: acceptance=0.500
Node 4: acceptance=0.250
Node 5: acceptance=0.200
Node 6: acceptance=0.200
Node 7: acceptance=0.400
Node 8: acceptance=0.500
Node 9: acceptance=0.333
Node 10: acceptance=0.500
Node 11: acceptance=0.214
Node 12: acceptance=0.471
Node 13: acceptance=0.000
Node 14: acceptance=0.143
Node 15: acceptance=0.250
Node 16: acceptance=0.200
Node 17: acceptance=0.460
Node 18: acceptance=0.250
Node 19: acceptance=0.500

=== PARALLEL EXECUTION TIME (realistic for distributed system) ===
  COMMUNICATION (max across nodes):
    - Sketch transfer: 0.000s (0.0%)
    - Model fetch (accepted): 0.000s (0.0%)
  COMPUTATION (max across nodes):
    - Sketching: 0.314s (93.5%)
    - Filtering: 0.001s (0.3%)
    - Aggregation: 0.021s (6.2%)
  TOTALS:
    - Total computation: 0.335s (100.0%)
    - Total communication: 0.000s (0.0%)
    - Total parallel time: 0.335s

=== PER-NODE AVERAGE TIME ===
  - Sketching: 0.255s
  - Filtering: 0.001s
  - Aggregation: 0.008s
  - Sketch transfer: 0.000s
  - Model fetch: 0.000s
  - Total per node: 0.264s

=== TOTAL COMPUTATIONAL WORK (sum across all nodes) ===
  - Total sketching: 5.102s
  - Total filtering: 0.011s
  - Total aggregation: 0.164s
  - Total sketch transfer: 0.000s
  - Total model fetch: 0.000s
  - Grand total: 5.277s
  - Mean acceptance rate: 0.328

COARSE Algorithm Properties:
  - Original dimension: 2,219,692
  - Sketch size: 1000
  - Compression ratio: 19.8x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
