Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: ring, nodes: 20, edges: 20
Attack: Compromised 12/20 nodes: [1, 2, 3, 5, 8, 11, 12, 13, 14, 15, 17, 18]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5119 ± 0.0195 | min=0.4724 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.525043', '0.493345', '0.472366', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.479476', '0.515598', '0.496021', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (608, 1158), (556, 1127), (547, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (549, 1145), (595, 1154), (561, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5093, honest: 0.5158
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5067 ± 0.0217 | min=0.4733 max=0.5616
         : test loss mean=31.5047 ± 75.5313
         : individual accs = ['0.508772', '0.504318', '0.478261', '0.493955', '0.520282', '0.560699', '0.512664', '0.497782', '0.561620', '0.514184', '0.493881', '0.501333', '0.486979', '0.473276', '0.493772', '0.516157', '0.500000', '0.514589', '0.498704', '0.502191']
         : correct/total = [(580, 1140), (584, 1158), (539, 1127), (572, 1158), (590, 1134), (642, 1145), (587, 1145), (561, 1127), (638, 1136), (580, 1128), (565, 1144), (564, 1125), (561, 1152), (549, 1160), (555, 1124), (591, 1145), (577, 1154), (582, 1131), (577, 1157), (573, 1141)]
         : compromised: 0.5070, honest: 0.5062
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5091 ± 0.0239 | min=0.4715 max=0.5634
         : test loss mean=0.7924 ± 0.2317
         : individual accs = ['0.548246', '0.491364', '0.506655', '0.471503', '0.478836', '0.537991', '0.521397', '0.504880', '0.563380', '0.491135', '0.525350', '0.498667', '0.477431', '0.493103', '0.482206', '0.518777', '0.514731', '0.508400', '0.522040', '0.526731']
         : correct/total = [(625, 1140), (569, 1158), (571, 1127), (546, 1158), (543, 1134), (616, 1145), (597, 1145), (569, 1127), (640, 1136), (554, 1128), (601, 1144), (561, 1125), (550, 1152), (572, 1160), (542, 1124), (594, 1145), (594, 1154), (575, 1131), (604, 1157), (601, 1141)]
         : compromised: 0.5060, honest: 0.5139
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5710 ± 0.0791 | min=0.4870 max=0.7958
         : test loss mean=7.0332 ± 9.1284
         : individual accs = ['0.634211', '0.513817', '0.494232', '0.528497', '0.519400', '0.726638', '0.520524', '0.505768', '0.795775', '0.612589', '0.623252', '0.524444', '0.522569', '0.506034', '0.540925', '0.554585', '0.487002', '0.626879', '0.608470', '0.574058']
         : correct/total = [(723, 1140), (595, 1158), (557, 1127), (612, 1158), (589, 1134), (832, 1145), (596, 1145), (570, 1127), (904, 1136), (691, 1128), (713, 1144), (590, 1125), (602, 1152), (587, 1160), (608, 1124), (635, 1145), (562, 1154), (709, 1131), (704, 1157), (655, 1141)]
         : compromised: 0.5786, honest: 0.5596
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5387 ± 0.0684 | min=0.4911 max=0.7835
         : test loss mean=0.7091 ± 0.0759
         : individual accs = ['0.554386', '0.508636', '0.493345', '0.528497', '0.522046', '0.680349', '0.521397', '0.503993', '0.783451', '0.491135', '0.525350', '0.498667', '0.545139', '0.493103', '0.517794', '0.517031', '0.537262', '0.508400', '0.522040', '0.521472']
         : correct/total = [(632, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (779, 1145), (597, 1145), (568, 1127), (890, 1136), (554, 1128), (601, 1144), (561, 1125), (628, 1152), (572, 1160), (582, 1124), (592, 1145), (620, 1154), (575, 1131), (604, 1157), (595, 1141)]
         : compromised: 0.5497, honest: 0.5221
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.5973 ± 0.0839 | min=0.4840 max=0.7474
         : test loss mean=4.8103 ± 4.3587
         : individual accs = ['0.707895', '0.584629', '0.495120', '0.529361', '0.555556', '0.724017', '0.521397', '0.522626', '0.747359', '0.671099', '0.694056', '0.524444', '0.532986', '0.529310', '0.483986', '0.691703', '0.520797', '0.648099', '0.617113', '0.645048']
         : correct/total = [(807, 1140), (677, 1158), (558, 1127), (613, 1158), (630, 1134), (829, 1145), (597, 1145), (589, 1127), (849, 1136), (757, 1128), (794, 1144), (590, 1125), (614, 1152), (614, 1160), (544, 1124), (792, 1145), (601, 1154), (733, 1131), (714, 1157), (736, 1141)]
         : compromised: 0.5923, honest: 0.6048
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.5559 ± 0.0965 | min=0.4792 max=0.8248
         : test loss mean=0.6938 ± 0.1043
         : individual accs = ['0.661404', '0.508636', '0.492458', '0.528497', '0.522046', '0.791266', '0.521397', '0.503993', '0.824824', '0.491135', '0.525350', '0.498667', '0.479167', '0.508621', '0.517794', '0.517031', '0.529463', '0.508400', '0.522040', '0.665206']
         : correct/total = [(754, 1140), (589, 1158), (555, 1127), (612, 1158), (592, 1134), (906, 1145), (597, 1145), (568, 1127), (937, 1136), (554, 1128), (601, 1144), (561, 1125), (552, 1152), (590, 1160), (582, 1124), (592, 1145), (611, 1154), (575, 1131), (604, 1157), (759, 1141)]
         : compromised: 0.5581, honest: 0.5525
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.6208 ± 0.0987 | min=0.4840 max=0.8134
         : test loss mean=4.7534 ± 4.1999
         : individual accs = ['0.740351', '0.665803', '0.495120', '0.529361', '0.608466', '0.752838', '0.521397', '0.527950', '0.813380', '0.713652', '0.713287', '0.529778', '0.540799', '0.538793', '0.483986', '0.730131', '0.555459', '0.649867', '0.605013', '0.701139']
         : correct/total = [(844, 1140), (771, 1158), (558, 1127), (613, 1158), (690, 1134), (862, 1145), (597, 1145), (595, 1127), (924, 1136), (805, 1128), (816, 1144), (596, 1125), (623, 1152), (625, 1160), (544, 1124), (836, 1145), (641, 1154), (735, 1131), (700, 1157), (800, 1141)]
         : compromised: 0.6112, honest: 0.6352
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.5610 ± 0.1069 | min=0.4783 max=0.8539
         : test loss mean=0.6982 ± 0.1310
         : individual accs = ['0.704386', '0.508636', '0.492458', '0.528497', '0.522046', '0.784279', '0.521397', '0.503993', '0.853873', '0.491135', '0.525350', '0.498667', '0.478299', '0.493103', '0.522242', '0.517031', '0.519931', '0.508400', '0.522040', '0.724803']
         : correct/total = [(803, 1140), (589, 1158), (555, 1127), (612, 1158), (592, 1134), (898, 1145), (597, 1145), (568, 1127), (970, 1136), (554, 1128), (601, 1144), (561, 1125), (551, 1152), (572, 1160), (587, 1124), (592, 1145), (600, 1154), (575, 1131), (604, 1157), (827, 1141)]
         : compromised: 0.5590, honest: 0.5641
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.6264 ± 0.1009 | min=0.4822 max=0.8204
         : test loss mean=4.8434 ± 4.5326
         : individual accs = ['0.768421', '0.696891', '0.497782', '0.530225', '0.611993', '0.769432', '0.521397', '0.520852', '0.820423', '0.720745', '0.728147', '0.583111', '0.583333', '0.540517', '0.482206', '0.713537', '0.571057', '0.584439', '0.577355', '0.706398']
         : correct/total = [(876, 1140), (807, 1158), (561, 1127), (614, 1158), (694, 1134), (881, 1145), (597, 1145), (587, 1127), (932, 1136), (813, 1128), (833, 1144), (656, 1125), (672, 1152), (627, 1160), (542, 1124), (817, 1145), (659, 1154), (661, 1131), (668, 1157), (806, 1141)]
         : compromised: 0.6149, honest: 0.6436
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: ring, Aggregation: coarse
Attack: directed_deviation, 60.0% compromised
Final accuracy - Compromised: 0.6149, Honest: 0.6436
Overall test accuracy: mean=0.6264 ± 0.1009

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.048s (17.8%)
  - Filtering time: 0.003s (1.2%)
  - Aggregation time: 0.219s (81.0%)
  - Total time: 0.270s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
