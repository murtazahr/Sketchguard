Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 4500 samples per client per epoch
Graph: erdos, nodes: 20, edges: 126
Degree statistics: avg=12.60, min=8, max=16
Attack: Compromised 10/20 nodes: [1, 2, 5, 11, 12, 13, 14, 15, 17, 18]
Attack type: directed_deviation, lambda: 1.0
Model variant: baseline
Model parameters: 2,219,692
COARSE Node 0:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 2,219,692 → Sketch size: 1000
  Compression ratio: 2219.7x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 2,219,692 parameters
  - Config: COARSEConfig(gamma=2, kappa=1, alpha=0.5, min_neighbors=1, sketch_size=1000, network_seed=987654321, attack_detection_window=5)
  - Sketch size: 1000
  - Compression ratio: 2219.7x
  - Complexity: O(d + N×k) = O(2,219,692 + 20×1000)
  - Theoretical speedup vs BALANCE: 19.8x
Initial test acc across nodes: mean=0.4978 ± 0.0208
Round 001: test acc mean=0.6703 ± 0.0427 | min=0.5643 max=0.7236
         : test loss mean=0.6807 ± 0.0034
         : individual accs = ['0.697368', '0.691710', '0.564330', '0.708981', '0.617284', '0.662009', '0.684716', '0.628217', '0.607394', '0.703014', '0.644231', '0.723556', '0.707465', '0.704310', '0.639680', '0.687336', '0.714038', '0.661362', '0.719965', '0.638913']
         : correct/total = [(795, 1140), (801, 1158), (636, 1127), (821, 1158), (700, 1134), (758, 1145), (784, 1145), (708, 1127), (690, 1136), (793, 1128), (737, 1144), (814, 1125), (815, 1152), (817, 1160), (719, 1124), (787, 1145), (824, 1154), (748, 1131), (833, 1157), (729, 1141)]
         : compromised: 0.6762, honest: 0.6644
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.545', 'Node 2: acc_rate=0.417']...
Round 002: test acc mean=0.6435 ± 0.0481 | min=0.5178 max=0.7075
         : test loss mean=0.6731 ± 0.0070
         : individual accs = ['0.645614', '0.662349', '0.631766', '0.674439', '0.584656', '0.551092', '0.631441', '0.675244', '0.682218', '0.665780', '0.687063', '0.616889', '0.707465', '0.609483', '0.517794', '0.641921', '0.681976', '0.627763', '0.700086', '0.675723']
         : correct/total = [(736, 1140), (767, 1158), (712, 1127), (781, 1158), (663, 1134), (631, 1145), (723, 1145), (761, 1127), (775, 1136), (751, 1128), (786, 1144), (694, 1125), (815, 1152), (707, 1160), (582, 1124), (735, 1145), (787, 1154), (710, 1131), (810, 1157), (771, 1141)]
         : compromised: 0.6267, honest: 0.6604
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.545', 'Node 2: acc_rate=0.417']...
Round 003: test acc mean=0.6792 ± 0.0316 | min=0.5872 max=0.7270
         : test loss mean=0.6435 ± 0.0130
         : individual accs = ['0.649123', '0.675302', '0.685892', '0.724525', '0.650794', '0.655895', '0.686463', '0.684117', '0.713028', '0.701241', '0.719406', '0.658667', '0.673611', '0.690517', '0.587189', '0.659389', '0.727036', '0.662246', '0.691443', '0.687993']
         : correct/total = [(740, 1140), (782, 1158), (773, 1127), (839, 1158), (738, 1134), (751, 1145), (786, 1145), (771, 1127), (810, 1136), (791, 1128), (823, 1144), (741, 1125), (776, 1152), (801, 1160), (660, 1124), (755, 1145), (839, 1154), (749, 1131), (800, 1157), (785, 1141)]
         : compromised: 0.6640, honest: 0.6944
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.545', 'Node 2: acc_rate=0.417']...
Round 004: test acc mean=0.7423 ± 0.0171 | min=0.6949 max=0.7684
         : test loss mean=0.5649 ± 0.0177
         : individual accs = ['0.736842', '0.740069', '0.738243', '0.760794', '0.745150', '0.750218', '0.754585', '0.734694', '0.743838', '0.752660', '0.768357', '0.763556', '0.738715', '0.730172', '0.720641', '0.719651', '0.763432', '0.737401', '0.694901', '0.751972']
         : correct/total = [(840, 1140), (857, 1158), (832, 1127), (881, 1158), (845, 1134), (859, 1145), (864, 1145), (828, 1127), (845, 1136), (849, 1128), (879, 1144), (859, 1125), (851, 1152), (847, 1160), (810, 1124), (824, 1145), (881, 1154), (834, 1131), (804, 1157), (858, 1141)]
         : compromised: 0.7334, honest: 0.7512
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.545', 'Node 2: acc_rate=0.417']...
Round 005: test acc mean=0.7841 ± 0.0175 | min=0.7571 max=0.8200
         : test loss mean=0.4740 ± 0.0184
         : individual accs = ['0.766667', '0.791019', '0.761313', '0.784111', '0.783069', '0.772926', '0.798253', '0.764862', '0.798415', '0.820035', '0.805070', '0.795556', '0.769965', '0.777586', '0.790036', '0.776419', '0.817158', '0.765694', '0.757131', '0.787029']
         : correct/total = [(874, 1140), (916, 1158), (858, 1127), (908, 1158), (888, 1134), (885, 1145), (914, 1145), (862, 1127), (907, 1136), (925, 1128), (921, 1144), (895, 1125), (887, 1152), (902, 1160), (888, 1124), (889, 1145), (943, 1154), (866, 1131), (876, 1157), (898, 1141)]
         : compromised: 0.7758, honest: 0.7925
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.545', 'Node 2: acc_rate=0.417']...
Round 006: test acc mean=0.8265 ± 0.0162 | min=0.7891 max=0.8511
         : test loss mean=0.3943 ± 0.0165
         : individual accs = ['0.821930', '0.843696', '0.842946', '0.829016', '0.804233', '0.828821', '0.820087', '0.818988', '0.837148', '0.851064', '0.850524', '0.845333', '0.813368', '0.812931', '0.812278', '0.812227', '0.831023', '0.824050', '0.789110', '0.840491']
         : correct/total = [(937, 1140), (977, 1158), (950, 1127), (960, 1158), (912, 1134), (949, 1145), (939, 1145), (923, 1127), (951, 1136), (960, 1128), (973, 1144), (951, 1125), (937, 1152), (943, 1160), (913, 1124), (930, 1145), (959, 1154), (932, 1131), (913, 1157), (959, 1141)]
         : compromised: 0.8225, honest: 0.8305
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.545', 'Node 2: acc_rate=0.417']...
Round 007: test acc mean=0.8589 ± 0.0141 | min=0.8220 max=0.8800
         : test loss mean=0.3350 ± 0.0160
         : individual accs = ['0.854386', '0.879965', '0.855368', '0.854059', '0.851852', '0.865502', '0.867249', '0.858030', '0.868838', '0.863475', '0.870629', '0.875556', '0.845486', '0.869828', '0.864769', '0.837555', '0.867418', '0.837312', '0.821953', '0.868536']
         : correct/total = [(974, 1140), (1019, 1158), (964, 1127), (989, 1158), (966, 1134), (991, 1145), (993, 1145), (967, 1127), (987, 1136), (974, 1128), (996, 1144), (985, 1125), (974, 1152), (1009, 1160), (972, 1124), (959, 1145), (1001, 1154), (947, 1131), (951, 1157), (991, 1141)]
         : compromised: 0.8553, honest: 0.8624
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.545', 'Node 2: acc_rate=0.417']...
Round 008: test acc mean=0.8702 ± 0.0100 | min=0.8531 max=0.8891
         : test loss mean=0.3079 ± 0.0155
         : individual accs = ['0.864035', '0.884283', '0.865129', '0.861831', '0.862434', '0.889083', '0.868996', '0.868678', '0.873239', '0.875887', '0.876748', '0.888889', '0.871528', '0.868966', '0.882562', '0.855022', '0.870884', '0.859416', '0.853068', '0.864154']
         : correct/total = [(985, 1140), (1024, 1158), (975, 1127), (998, 1158), (978, 1134), (1018, 1145), (995, 1145), (979, 1127), (992, 1136), (988, 1128), (1003, 1144), (1000, 1125), (1004, 1152), (1008, 1160), (992, 1124), (979, 1145), (1005, 1154), (972, 1131), (987, 1157), (986, 1141)]
         : compromised: 0.8718, honest: 0.8687
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.545', 'Node 2: acc_rate=0.417']...
Round 009: test acc mean=0.8828 ± 0.0114 | min=0.8513 max=0.8963
         : test loss mean=0.2814 ± 0.0184
         : individual accs = ['0.878070', '0.894646', '0.876664', '0.894646', '0.877425', '0.892576', '0.887336', '0.889086', '0.883803', '0.896277', '0.891608', '0.892444', '0.881076', '0.883621', '0.887011', '0.868996', '0.883016', '0.860301', '0.851340', '0.886065']
         : correct/total = [(1001, 1140), (1036, 1158), (988, 1127), (1036, 1158), (995, 1134), (1022, 1145), (1016, 1145), (1002, 1127), (1004, 1136), (1011, 1128), (1020, 1144), (1004, 1125), (1015, 1152), (1025, 1160), (997, 1124), (995, 1145), (1019, 1154), (973, 1131), (985, 1157), (1011, 1141)]
         : compromised: 0.8789, honest: 0.8867
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.545', 'Node 2: acc_rate=0.417']...
Round 010: test acc mean=0.8899 ± 0.0090 | min=0.8683 max=0.9051
         : test loss mean=0.2683 ± 0.0154
         : individual accs = ['0.888596', '0.891192', '0.882875', '0.898100', '0.883598', '0.898690', '0.886463', '0.896185', '0.897887', '0.905142', '0.893357', '0.896889', '0.891493', '0.893966', '0.895907', '0.877729', '0.891681', '0.868258', '0.872947', '0.886065']
         : correct/total = [(1013, 1140), (1032, 1158), (995, 1127), (1040, 1158), (1002, 1134), (1029, 1145), (1015, 1145), (1010, 1127), (1020, 1136), (1021, 1128), (1022, 1144), (1009, 1125), (1027, 1152), (1037, 1160), (1007, 1124), (1005, 1145), (1029, 1154), (982, 1131), (1010, 1157), (1011, 1141)]
         : compromised: 0.8870, honest: 0.8927
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.545', 'Node 2: acc_rate=0.417']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: directed_deviation, 50.0% compromised
Final accuracy - Compromised: 0.8870, Honest: 0.8927
Overall test accuracy: mean=0.8899 ± 0.0090

=== COARSE SUMMARY ===
Node 0: acceptance=0.500
Node 1: acceptance=0.545
Node 2: acceptance=0.417
Node 3: acceptance=0.625
Node 4: acceptance=0.455
Node 5: acceptance=0.467
Node 6: acceptance=0.429
Node 7: acceptance=0.429
Node 8: acceptance=0.400
Node 9: acceptance=0.538
Node 10: acceptance=0.556
Node 11: acceptance=0.500
Node 12: acceptance=0.583
Node 13: acceptance=0.538
Node 14: acceptance=0.467
Node 15: acceptance=0.455
Node 16: acceptance=0.385
Node 17: acceptance=0.667
Node 18: acceptance=0.562
Node 19: acceptance=0.438

=== PARALLEL EXECUTION TIME (realistic for distributed system) ===
  COMMUNICATION (max across nodes):
    - Sketch transfer: 0.000s (0.0%)
    - Model fetch (accepted): 0.000s (0.0%)
  COMPUTATION (max across nodes):
    - Sketching: 0.264s (93.8%)
    - Filtering: 0.001s (0.4%)
    - Aggregation: 0.016s (5.7%)
  TOTALS:
    - Total computation: 0.282s (100.0%)
    - Total communication: 0.000s (0.0%)
    - Total parallel time: 0.282s

=== PER-NODE AVERAGE TIME ===
  - Sketching: 0.195s
  - Filtering: 0.001s
  - Aggregation: 0.010s
  - Sketch transfer: 0.000s
  - Model fetch: 0.000s
  - Total per node: 0.205s

=== TOTAL COMPUTATIONAL WORK (sum across all nodes) ===
  - Total sketching: 3.898s
  - Total filtering: 0.014s
  - Total aggregation: 0.194s
  - Total sketch transfer: 0.000s
  - Total model fetch: 0.000s
  - Grand total: 4.106s
  - Mean acceptance rate: 0.498

COARSE Algorithm Properties:
  - Original dimension: 2,219,692
  - Sketch size: 1000
  - Compression ratio: 19.8x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
