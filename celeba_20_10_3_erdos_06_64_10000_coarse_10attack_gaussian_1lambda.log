Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 126
Attack: Compromised 2/20 nodes: [5, 13]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8426 ± 0.0782
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5107, honest: 0.5170
         : coarse stats = ['Node 0: acc_rate=0.875', 'Node 1: acc_rate=0.909', 'Node 2: acc_rate=0.833']...
Round 002: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.7904 ± 0.0669
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5107, honest: 0.5170
         : coarse stats = ['Node 0: acc_rate=0.875', 'Node 1: acc_rate=0.909', 'Node 2: acc_rate=0.833']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5107, honest: 0.5170
         : coarse stats = ['Node 0: acc_rate=0.917', 'Node 1: acc_rate=0.939', 'Node 2: acc_rate=0.889']...
Round 004: test acc mean=0.4884 ± 0.0214 | min=0.4393 max=0.5297
         : test loss mean=28.3304 ± 27.8475
         : individual accs = ['0.471053', '0.507772', '0.505768', '0.468048', '0.469136', '0.486463', '0.475983', '0.529725', '0.439261', '0.488475', '0.508741', '0.501333', '0.490451', '0.501724', '0.486655', '0.466376', '0.480936', '0.528736', '0.475367', '0.485539']
         : correct/total = [(537, 1140), (588, 1158), (570, 1127), (542, 1158), (532, 1134), (557, 1145), (545, 1145), (597, 1127), (499, 1136), (551, 1128), (582, 1144), (564, 1125), (565, 1152), (582, 1160), (547, 1124), (534, 1145), (555, 1154), (598, 1131), (550, 1157), (554, 1141)]
         : compromised: 0.4941, honest: 0.4877
         : coarse stats = ['Node 0: acc_rate=0.938', 'Node 1: acc_rate=0.955', 'Node 2: acc_rate=0.917']...
Round 005: test acc mean=0.5114 ± 0.0174 | min=0.4821 max=0.5678
         : test loss mean=34.3625 ± 26.1153
         : individual accs = ['0.527193', '0.512953', '0.499556', '0.518135', '0.497354', '0.489083', '0.520524', '0.509317', '0.567782', '0.500887', '0.514860', '0.499556', '0.513889', '0.515517', '0.518683', '0.482096', '0.492201', '0.514589', '0.517718', '0.517090']
         : correct/total = [(601, 1140), (594, 1158), (563, 1127), (600, 1158), (564, 1134), (560, 1145), (596, 1145), (574, 1127), (645, 1136), (565, 1128), (589, 1144), (562, 1125), (592, 1152), (598, 1160), (583, 1124), (552, 1145), (568, 1154), (582, 1131), (599, 1157), (590, 1141)]
         : compromised: 0.5023, honest: 0.5125
         : coarse stats = ['Node 0: acc_rate=0.950', 'Node 1: acc_rate=0.964', 'Node 2: acc_rate=0.933']...
Round 006: test acc mean=0.5036 ± 0.0271 | min=0.4604 max=0.5756
         : test loss mean=8.7458 ± 14.0932
         : individual accs = ['0.520175', '0.491364', '0.524401', '0.487910', '0.477954', '0.485590', '0.478603', '0.496894', '0.460387', '0.508865', '0.517483', '0.493333', '0.477431', '0.493103', '0.523132', '0.528384', '0.484402', '0.495137', '0.575627', '0.552147']
         : correct/total = [(593, 1140), (569, 1158), (591, 1127), (565, 1158), (542, 1134), (556, 1145), (548, 1145), (560, 1127), (523, 1136), (574, 1128), (592, 1144), (555, 1125), (550, 1152), (572, 1160), (588, 1124), (605, 1145), (559, 1154), (560, 1131), (666, 1157), (630, 1141)]
         : compromised: 0.4893, honest: 0.5052
         : coarse stats = ['Node 0: acc_rate=0.938', 'Node 1: acc_rate=0.955', 'Node 2: acc_rate=0.944']...
Round 007: test acc mean=0.5454 ± 0.0525 | min=0.4715 max=0.6702
         : test loss mean=0.7266 ± 0.1141
         : individual accs = ['0.670175', '0.533679', '0.568767', '0.471503', '0.544092', '0.506550', '0.607860', '0.499556', '0.529049', '0.556738', '0.474650', '0.592889', '0.483507', '0.546552', '0.572954', '0.482096', '0.602253', '0.491600', '0.590320', '0.582822']
         : correct/total = [(764, 1140), (618, 1158), (641, 1127), (546, 1158), (617, 1134), (580, 1145), (696, 1145), (563, 1127), (601, 1136), (628, 1128), (543, 1144), (667, 1125), (557, 1152), (634, 1160), (644, 1124), (552, 1145), (695, 1154), (556, 1131), (683, 1157), (665, 1141)]
         : compromised: 0.5266, honest: 0.5475
         : coarse stats = ['Node 0: acc_rate=0.920', 'Node 1: acc_rate=0.948', 'Node 2: acc_rate=0.929']...
Round 008: test acc mean=0.6917 ± 0.0565 | min=0.5695 max=0.7747
         : test loss mean=0.5859 ± 0.0511
         : individual accs = ['0.761404', '0.721934', '0.630878', '0.620898', '0.753968', '0.774672', '0.744978', '0.642413', '0.569542', '0.730496', '0.628497', '0.692444', '0.671875', '0.694828', '0.684164', '0.623581', '0.760832', '0.676393', '0.709594', '0.740578']
         : correct/total = [(868, 1140), (836, 1158), (711, 1127), (719, 1158), (855, 1134), (887, 1145), (853, 1145), (724, 1127), (647, 1136), (824, 1128), (719, 1144), (779, 1125), (774, 1152), (806, 1160), (769, 1124), (714, 1145), (878, 1154), (765, 1131), (821, 1157), (845, 1141)]
         : compromised: 0.7348, honest: 0.6869
         : coarse stats = ['Node 0: acc_rate=0.914', 'Node 1: acc_rate=0.943', 'Node 2: acc_rate=0.917']...
Round 009: test acc mean=0.7789 ± 0.0283 | min=0.6976 max=0.8224
         : test loss mean=0.4759 ± 0.0385
         : individual accs = ['0.798246', '0.789292', '0.777285', '0.737478', '0.788360', '0.809607', '0.798253', '0.772848', '0.730634', '0.789894', '0.758741', '0.800889', '0.782118', '0.782759', '0.773132', '0.781659', '0.822357', '0.697613', '0.784788', '0.801052']
         : correct/total = [(910, 1140), (914, 1158), (876, 1127), (854, 1158), (894, 1134), (927, 1145), (914, 1145), (871, 1127), (830, 1136), (891, 1128), (868, 1144), (901, 1125), (901, 1152), (908, 1160), (869, 1124), (895, 1145), (949, 1154), (789, 1131), (908, 1157), (914, 1141)]
         : compromised: 0.7962, honest: 0.7769
         : coarse stats = ['Node 0: acc_rate=0.910', 'Node 1: acc_rate=0.939', 'Node 2: acc_rate=0.907']...
Round 010: test acc mean=0.8140 ± 0.0112 | min=0.7977 max=0.8391
         : test loss mean=0.4134 ± 0.0152
         : individual accs = ['0.811404', '0.815199', '0.797693', '0.805699', '0.799824', '0.821834', '0.819214', '0.810115', '0.825704', '0.823582', '0.817308', '0.839111', '0.802083', '0.827586', '0.801601', '0.812227', '0.830156', '0.803714', '0.802939', '0.813322']
         : correct/total = [(925, 1140), (944, 1158), (899, 1127), (933, 1158), (907, 1134), (941, 1145), (938, 1145), (913, 1127), (938, 1136), (929, 1128), (935, 1144), (944, 1125), (924, 1152), (960, 1160), (901, 1124), (930, 1145), (958, 1154), (909, 1131), (929, 1157), (928, 1141)]
         : compromised: 0.8247, honest: 0.8128
         : coarse stats = ['Node 0: acc_rate=0.906', 'Node 1: acc_rate=0.936', 'Node 2: acc_rate=0.900']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: gaussian, 10.0% compromised
Final accuracy - Compromised: 0.8247, Honest: 0.8128
Overall test accuracy: mean=0.8140 ± 0.0112

=== COARSE SUMMARY ===
Node 0: acceptance=0.906
Node 1: acceptance=0.936
Node 2: acceptance=0.900
Node 3: acceptance=0.925
Node 4: acceptance=0.936
Node 5: acceptance=0.947
Node 6: acceptance=0.900
Node 7: acceptance=0.943
Node 8: acceptance=0.880
Node 9: acceptance=0.938
Node 10: acceptance=0.933
Node 11: acceptance=0.907
Node 12: acceptance=0.933
Node 13: acceptance=0.931
Node 14: acceptance=0.907
Node 15: acceptance=0.936
Node 16: acceptance=0.938
Node 17: acceptance=0.933
Node 18: acceptance=0.906
Node 19: acceptance=0.906

Performance Summary:
  - Sketching time: 0.038s (4.0%)
  - Filtering time: 0.009s (1.0%)
  - Aggregation time: 0.905s (95.0%)
  - Total time: 0.952s
  - Mean acceptance rate: 0.922

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
