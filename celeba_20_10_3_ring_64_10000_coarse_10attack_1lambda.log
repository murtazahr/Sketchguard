Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: ring, nodes: 20, edges: 20
Attack: Compromised 2/20 nodes: [5, 13]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.529361', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (613, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5107, honest: 0.5170
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5534 ± 0.0602 | min=0.4911 max=0.6912
         : test loss mean=8.6852 ± 18.8944
         : individual accs = ['0.530702', '0.683938', '0.691216', '0.528497', '0.547619', '0.514410', '0.510917', '0.503993', '0.563380', '0.491135', '0.527972', '0.498667', '0.522569', '0.506897', '0.516014', '0.517031', '0.603986', '0.609195', '0.655143', '0.544259']
         : correct/total = [(605, 1140), (792, 1158), (779, 1127), (612, 1158), (621, 1134), (589, 1145), (585, 1145), (568, 1127), (640, 1136), (554, 1128), (604, 1144), (561, 1125), (602, 1152), (588, 1160), (580, 1124), (592, 1145), (697, 1154), (689, 1131), (758, 1157), (621, 1141)]
         : compromised: 0.5107, honest: 0.5581
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5949 ± 0.1170 | min=0.4987 max=0.8482
         : test loss mean=2.3934 ± 3.7871
         : individual accs = ['0.848246', '0.829879', '0.499556', '0.528497', '0.528219', '0.561572', '0.527511', '0.503993', '0.565141', '0.645390', '0.546329', '0.498667', '0.522569', '0.531034', '0.517794', '0.517031', '0.516464', '0.638373', '0.736387', '0.836109']
         : correct/total = [(967, 1140), (961, 1158), (563, 1127), (612, 1158), (599, 1134), (643, 1145), (604, 1145), (568, 1127), (642, 1136), (728, 1128), (625, 1144), (561, 1125), (602, 1152), (616, 1160), (582, 1124), (592, 1145), (596, 1154), (722, 1131), (852, 1157), (954, 1141)]
         : compromised: 0.5463, honest: 0.6003
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5901 ± 0.1171 | min=0.4800 max=0.8247
         : test loss mean=0.6990 ± 0.2191
         : individual accs = ['0.800877', '0.824698', '0.543922', '0.528497', '0.484127', '0.514410', '0.483843', '0.503993', '0.562500', '0.688830', '0.529720', '0.498667', '0.480035', '0.609483', '0.482206', '0.517031', '0.515598', '0.741821', '0.700951', '0.790535']
         : correct/total = [(913, 1140), (955, 1158), (613, 1127), (612, 1158), (549, 1134), (589, 1145), (554, 1145), (568, 1127), (639, 1136), (777, 1128), (606, 1144), (561, 1125), (553, 1152), (707, 1160), (542, 1124), (592, 1145), (595, 1154), (839, 1131), (811, 1157), (902, 1141)]
         : compromised: 0.5619, honest: 0.5932
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.6108 ± 0.1374 | min=0.4780 max=0.8705
         : test loss mean=1.7443 ± 2.9330
         : individual accs = ['0.826316', '0.870466', '0.677019', '0.538860', '0.477954', '0.514410', '0.478603', '0.503993', '0.576585', '0.724291', '0.552448', '0.498667', '0.481771', '0.536207', '0.497331', '0.517031', '0.522530', '0.824050', '0.810717', '0.787029']
         : correct/total = [(942, 1140), (1008, 1158), (763, 1127), (624, 1158), (542, 1134), (589, 1145), (548, 1145), (568, 1127), (655, 1136), (817, 1128), (632, 1144), (561, 1125), (555, 1152), (622, 1160), (559, 1124), (592, 1145), (603, 1154), (932, 1131), (938, 1157), (898, 1141)]
         : compromised: 0.5253, honest: 0.6203
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.6828 ± 0.1542 | min=0.4996 max=0.8982
         : test loss mean=1.7671 ± 2.8432
         : individual accs = ['0.898246', '0.892919', '0.838509', '0.533679', '0.583774', '0.514410', '0.546725', '0.503993', '0.822183', '0.803191', '0.746503', '0.499556', '0.559896', '0.506897', '0.526690', '0.584279', '0.708839', '0.845270', '0.851340', '0.889571']
         : correct/total = [(1024, 1140), (1034, 1158), (945, 1127), (618, 1158), (662, 1134), (589, 1145), (626, 1145), (568, 1127), (934, 1136), (906, 1128), (854, 1144), (562, 1125), (645, 1152), (588, 1160), (592, 1124), (669, 1145), (818, 1154), (956, 1131), (985, 1157), (1015, 1141)]
         : compromised: 0.5107, honest: 0.7020
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.7412 ± 0.1485 | min=0.5214 max=0.9035
         : test loss mean=1.2237 ± 1.7304
         : individual accs = ['0.903509', '0.884283', '0.881100', '0.619171', '0.543210', '0.837555', '0.521397', '0.567879', '0.872359', '0.854610', '0.866259', '0.528000', '0.528646', '0.750862', '0.548043', '0.703930', '0.779029', '0.880637', '0.868626', '0.885188']
         : correct/total = [(1030, 1140), (1024, 1158), (993, 1127), (717, 1158), (616, 1134), (959, 1145), (597, 1145), (640, 1127), (991, 1136), (964, 1128), (991, 1144), (594, 1125), (609, 1152), (871, 1160), (616, 1124), (806, 1145), (899, 1154), (996, 1131), (1005, 1157), (1010, 1141)]
         : compromised: 0.7942, honest: 0.7353
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.6936 ± 0.1624 | min=0.4859 max=0.8972
         : test loss mean=0.5286 ± 0.2158
         : individual accs = ['0.895614', '0.886874', '0.826087', '0.535406', '0.485891', '0.524891', '0.489956', '0.565217', '0.791373', '0.897163', '0.848776', '0.560889', '0.521701', '0.634483', '0.519573', '0.550218', '0.709705', '0.895668', '0.865169', '0.866784']
         : correct/total = [(1021, 1140), (1027, 1158), (931, 1127), (620, 1158), (551, 1134), (601, 1145), (561, 1145), (637, 1127), (899, 1136), (1012, 1128), (971, 1144), (631, 1125), (601, 1152), (736, 1160), (584, 1124), (630, 1145), (819, 1154), (1013, 1131), (1001, 1157), (989, 1141)]
         : compromised: 0.5797, honest: 0.7062
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.6969 ± 0.1734 | min=0.4774 max=0.8982
         : test loss mean=1.4685 ± 2.1756
         : individual accs = ['0.898246', '0.886874', '0.828749', '0.692573', '0.478836', '0.516157', '0.481223', '0.518190', '0.828345', '0.876773', '0.830420', '0.584000', '0.477431', '0.551724', '0.482206', '0.528384', '0.805026', '0.889478', '0.890233', '0.893953']
         : correct/total = [(1024, 1140), (1027, 1158), (934, 1127), (802, 1158), (543, 1134), (591, 1145), (551, 1145), (584, 1127), (941, 1136), (989, 1128), (950, 1144), (657, 1125), (550, 1152), (640, 1160), (542, 1124), (605, 1145), (929, 1154), (1006, 1131), (1030, 1157), (1020, 1141)]
         : compromised: 0.5339, honest: 0.7151
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.7130 ± 0.1753 | min=0.5069 max=0.9035
         : test loss mean=2.0051 ± 3.4793
         : individual accs = ['0.903509', '0.899827', '0.877551', '0.529361', '0.517637', '0.514410', '0.584279', '0.509317', '0.887324', '0.892730', '0.888986', '0.542222', '0.526910', '0.506897', '0.522242', '0.652402', '0.882149', '0.874447', '0.866033', '0.882559']
         : correct/total = [(1030, 1140), (1042, 1158), (989, 1127), (613, 1158), (587, 1134), (589, 1145), (669, 1145), (574, 1127), (1008, 1136), (1007, 1128), (1017, 1144), (610, 1125), (607, 1152), (588, 1160), (587, 1124), (747, 1145), (1018, 1154), (989, 1131), (1002, 1157), (1007, 1141)]
         : compromised: 0.5107, honest: 0.7355
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: ring, Aggregation: coarse
Attack: directed_deviation, 10.0% compromised
Final accuracy - Compromised: 0.5107, Honest: 0.7355
Overall test accuracy: mean=0.7130 ± 0.1753

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.038s (14.8%)
  - Filtering time: 0.004s (1.4%)
  - Aggregation time: 0.215s (83.8%)
  - Total time: 0.257s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
