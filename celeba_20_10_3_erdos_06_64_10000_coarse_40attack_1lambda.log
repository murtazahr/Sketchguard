Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 126
Attack: Compromised 8/20 nodes: [1, 5, 11, 12, 13, 14, 17, 18]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5171 ± 0.0152 | min=0.4951 max=0.5616
         : test loss mean=4.5322 ± 3.1328
         : individual accs = ['0.528947', '0.501727', '0.495120', '0.518998', '0.521164', '0.513537', '0.524017', '0.503993', '0.561620', '0.499113', '0.525350', '0.498667', '0.523438', '0.506897', '0.513345', '0.517031', '0.540728', '0.509284', '0.522904', '0.517090']
         : correct/total = [(603, 1140), (581, 1158), (558, 1127), (601, 1158), (591, 1134), (588, 1145), (600, 1145), (568, 1127), (638, 1136), (563, 1128), (601, 1144), (561, 1125), (603, 1152), (588, 1160), (577, 1124), (592, 1145), (624, 1154), (576, 1131), (605, 1157), (590, 1141)]
         : compromised: 0.5112, honest: 0.5211
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5150 ± 0.0158 | min=0.4902 max=0.5491
         : test loss mean=6.9256 ± 6.1303
         : individual accs = ['0.549123', '0.508636', '0.501331', '0.529361', '0.522046', '0.514410', '0.521397', '0.541260', '0.504401', '0.490248', '0.521853', '0.490667', '0.522569', '0.507759', '0.526690', '0.492576', '0.508666', '0.530504', '0.500432', '0.516214']
         : correct/total = [(626, 1140), (589, 1158), (565, 1127), (613, 1158), (592, 1134), (589, 1145), (597, 1145), (610, 1127), (573, 1136), (553, 1128), (597, 1144), (552, 1125), (602, 1152), (589, 1160), (592, 1124), (564, 1145), (587, 1154), (600, 1131), (579, 1157), (589, 1141)]
         : compromised: 0.5127, honest: 0.5165
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.4914 ± 0.0220 | min=0.4375 max=0.5367
         : test loss mean=0.7112 ± 0.0148
         : individual accs = ['0.471053', '0.508636', '0.506655', '0.471503', '0.477954', '0.485590', '0.478603', '0.496894', '0.437500', '0.508865', '0.474650', '0.501333', '0.477431', '0.506897', '0.482206', '0.517031', '0.484402', '0.536693', '0.522040', '0.482033']
         : correct/total = [(537, 1140), (589, 1158), (571, 1127), (546, 1158), (542, 1134), (556, 1145), (548, 1145), (560, 1127), (497, 1136), (574, 1128), (543, 1144), (564, 1125), (550, 1152), (588, 1160), (542, 1124), (592, 1145), (559, 1154), (607, 1131), (604, 1157), (550, 1141)]
         : compromised: 0.5026, honest: 0.4839
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5261 ± 0.0202 | min=0.4911 max=0.5836
         : test loss mean=4.0552 ± 1.8519
         : individual accs = ['0.532456', '0.508636', '0.573203', '0.534542', '0.534392', '0.516157', '0.529258', '0.528838', '0.583627', '0.491135', '0.525350', '0.511111', '0.522569', '0.527586', '0.517794', '0.520524', '0.515598', '0.508400', '0.523768', '0.517967']
         : correct/total = [(607, 1140), (589, 1158), (646, 1127), (619, 1158), (606, 1134), (591, 1145), (606, 1145), (596, 1127), (663, 1136), (554, 1128), (601, 1144), (575, 1125), (602, 1152), (612, 1160), (582, 1124), (596, 1145), (595, 1154), (575, 1131), (606, 1157), (591, 1141)]
         : compromised: 0.5170, honest: 0.5322
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5205 ± 0.0192 | min=0.4911 max=0.5651
         : test loss mean=0.6969 ± 0.0120
         : individual accs = ['0.528947', '0.508636', '0.497782', '0.528497', '0.544974', '0.565066', '0.517031', '0.503993', '0.565141', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.522530', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (561, 1127), (612, 1158), (618, 1134), (647, 1145), (592, 1145), (568, 1127), (642, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (603, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5188, honest: 0.5217
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.5413 ± 0.0274 | min=0.5093 max=0.6273
         : test loss mean=3.5431 ± 1.3587
         : individual accs = ['0.567544', '0.539724', '0.627329', '0.533679', '0.550265', '0.521397', '0.549345', '0.536823', '0.583627', '0.566489', '0.526224', '0.515556', '0.528646', '0.548276', '0.524021', '0.518777', '0.518198', '0.509284', '0.541054', '0.520596']
         : correct/total = [(647, 1140), (625, 1158), (707, 1127), (618, 1158), (624, 1134), (597, 1145), (629, 1145), (605, 1127), (663, 1136), (639, 1128), (602, 1144), (580, 1125), (609, 1152), (636, 1160), (589, 1124), (594, 1145), (598, 1154), (576, 1131), (626, 1157), (594, 1141)]
         : compromised: 0.5285, honest: 0.5499
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.5520 ± 0.0456 | min=0.4911 max=0.6515
         : test loss mean=0.6824 ± 0.0205
         : individual accs = ['0.529825', '0.508636', '0.580302', '0.529361', '0.597002', '0.584279', '0.565939', '0.598048', '0.617077', '0.491135', '0.527098', '0.523556', '0.522569', '0.506897', '0.521352', '0.651528', '0.525997', '0.508400', '0.522040', '0.629273']
         : correct/total = [(604, 1140), (589, 1158), (654, 1127), (613, 1158), (677, 1134), (669, 1145), (648, 1145), (674, 1127), (701, 1136), (554, 1128), (603, 1144), (589, 1125), (602, 1152), (588, 1160), (586, 1124), (746, 1145), (607, 1154), (575, 1131), (604, 1157), (718, 1141)]
         : compromised: 0.5247, honest: 0.5702
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.5377 ± 0.0246 | min=0.5120 max=0.6109
         : test loss mean=3.9568 ± 1.5216
         : individual accs = ['0.533333', '0.589810', '0.551908', '0.552677', '0.554674', '0.526638', '0.536245', '0.511979', '0.610915', '0.523050', '0.526224', '0.513778', '0.532118', '0.517241', '0.546263', '0.522271', '0.530329', '0.516357', '0.536733', '0.520596']
         : correct/total = [(608, 1140), (683, 1158), (622, 1127), (640, 1158), (629, 1134), (603, 1145), (614, 1145), (577, 1127), (694, 1136), (590, 1128), (602, 1144), (578, 1125), (613, 1152), (600, 1160), (614, 1124), (598, 1145), (612, 1154), (584, 1131), (621, 1157), (594, 1141)]
         : compromised: 0.5349, honest: 0.5395
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.6121 ± 0.0953 | min=0.4911 max=0.7843
         : test loss mean=0.6544 ± 0.0287
         : individual accs = ['0.561404', '0.508636', '0.711624', '0.529361', '0.660494', '0.671616', '0.693450', '0.728483', '0.732394', '0.491135', '0.548951', '0.703111', '0.522569', '0.506897', '0.558719', '0.784279', '0.575390', '0.508400', '0.522040', '0.723926']
         : correct/total = [(640, 1140), (589, 1158), (802, 1127), (613, 1158), (749, 1134), (769, 1145), (794, 1145), (821, 1127), (832, 1136), (554, 1128), (628, 1144), (791, 1125), (602, 1152), (588, 1160), (628, 1124), (898, 1145), (664, 1154), (575, 1131), (604, 1157), (826, 1141)]
         : compromised: 0.5627, honest: 0.6451
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.5641 ± 0.0358 | min=0.5013 max=0.6708
         : test loss mean=3.0526 ± 1.0565
         : individual accs = ['0.536842', '0.590674', '0.588287', '0.572539', '0.562610', '0.522271', '0.553712', '0.566105', '0.670775', '0.576241', '0.553322', '0.501333', '0.547743', '0.535345', '0.620107', '0.558952', '0.578856', '0.530504', '0.573034', '0.542507']
         : correct/total = [(612, 1140), (684, 1158), (663, 1127), (663, 1158), (638, 1134), (598, 1145), (634, 1145), (638, 1127), (762, 1136), (650, 1128), (633, 1144), (564, 1125), (631, 1152), (621, 1160), (697, 1124), (640, 1145), (668, 1154), (600, 1131), (663, 1157), (619, 1141)]
         : compromised: 0.5526, honest: 0.5717
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: directed_deviation, 40.0% compromised
Final accuracy - Compromised: 0.5526, Honest: 0.5717
Overall test accuracy: mean=0.5641 ± 0.0358

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.045s (4.5%)
  - Filtering time: 0.010s (1.0%)
  - Aggregation time: 0.941s (94.5%)
  - Total time: 0.996s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
