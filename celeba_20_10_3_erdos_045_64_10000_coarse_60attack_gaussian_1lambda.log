Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 99
Attack: Compromised 12/20 nodes: [1, 2, 3, 5, 8, 11, 12, 13, 14, 15, 17, 18]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8482 ± 0.0828
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5167, honest: 0.5158
         : coarse stats = ['Node 0: acc_rate=0.417', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.500']...
Round 002: test acc mean=0.5168 ± 0.0152 | min=0.4911 max=0.5625
         : test loss mean=0.7987 ± 0.0826
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.525764', '0.503993', '0.562500', '0.491135', '0.527972', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.520596']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (602, 1145), (568, 1127), (639, 1136), (554, 1128), (604, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (594, 1141)]
         : compromised: 0.5167, honest: 0.5170
         : coarse stats = ['Node 0: acc_rate=0.417', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.500']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5167, honest: 0.5158
         : coarse stats = ['Node 0: acc_rate=0.611', 'Node 1: acc_rate=0.667', 'Node 2: acc_rate=0.667']...
Round 004: test acc mean=0.5089 ± 0.0169 | min=0.4747 max=0.5337
         : test loss mean=1428.6128 ± 1681.1399
         : individual accs = ['0.528947', '0.518998', '0.492458', '0.533679', '0.520282', '0.493450', '0.522271', '0.487134', '0.481514', '0.523936', '0.474650', '0.505778', '0.522569', '0.507759', '0.521352', '0.524017', '0.507799', '0.491600', '0.522040', '0.498685']
         : correct/total = [(603, 1140), (601, 1158), (555, 1127), (618, 1158), (590, 1134), (565, 1145), (598, 1145), (549, 1127), (547, 1136), (591, 1128), (543, 1144), (569, 1125), (602, 1152), (589, 1160), (586, 1124), (600, 1145), (586, 1154), (556, 1131), (604, 1157), (569, 1141)]
         : compromised: 0.5096, honest: 0.5080
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.700', 'Node 2: acc_rate=0.750']...
Round 005: test acc mean=0.4971 ± 0.0202 | min=0.4557 max=0.5290
         : test loss mean=402.0251 ± 323.3727
         : individual accs = ['0.503509', '0.515544', '0.504880', '0.528497', '0.520282', '0.485590', '0.474236', '0.496894', '0.529049', '0.513298', '0.474650', '0.499556', '0.455729', '0.506034', '0.467972', '0.482969', '0.489601', '0.496905', '0.477960', '0.518843']
         : correct/total = [(574, 1140), (597, 1158), (569, 1127), (612, 1158), (590, 1134), (556, 1145), (543, 1145), (560, 1127), (601, 1136), (579, 1128), (543, 1144), (562, 1125), (525, 1152), (587, 1160), (526, 1124), (553, 1145), (565, 1154), (562, 1131), (553, 1157), (592, 1141)]
         : compromised: 0.4959, honest: 0.4989
         : coarse stats = ['Node 0: acc_rate=0.700', 'Node 1: acc_rate=0.760', 'Node 2: acc_rate=0.800']...
Round 006: test acc mean=0.5054 ± 0.0222 | min=0.4619 max=0.5458
         : test loss mean=280.2395 ± 261.5964
         : individual accs = ['0.471053', '0.474093', '0.511091', '0.493955', '0.512346', '0.506550', '0.508297', '0.500444', '0.478873', '0.461879', '0.528846', '0.545778', '0.506076', '0.506897', '0.517794', '0.483843', '0.517331', '0.543767', '0.522904', '0.515337']
         : correct/total = [(537, 1140), (549, 1158), (576, 1127), (572, 1158), (581, 1134), (580, 1145), (582, 1145), (564, 1127), (544, 1136), (521, 1128), (605, 1144), (614, 1125), (583, 1152), (588, 1160), (582, 1124), (554, 1145), (597, 1154), (615, 1131), (605, 1157), (588, 1141)]
         : compromised: 0.5076, honest: 0.5019
         : coarse stats = ['Node 0: acc_rate=0.736', 'Node 1: acc_rate=0.783', 'Node 2: acc_rate=0.833']...
Round 007: test acc mean=0.4862 ± 0.0159 | min=0.4375 max=0.5089
         : test loss mean=1.0560 ± 0.3174
         : individual accs = ['0.471053', '0.508636', '0.506655', '0.486183', '0.477954', '0.485590', '0.478603', '0.496007', '0.437500', '0.508865', '0.475524', '0.501333', '0.477431', '0.493103', '0.482206', '0.482969', '0.484402', '0.491600', '0.477960', '0.499562']
         : correct/total = [(537, 1140), (589, 1158), (571, 1127), (563, 1158), (542, 1134), (556, 1145), (548, 1145), (559, 1127), (497, 1136), (574, 1128), (544, 1144), (564, 1125), (550, 1152), (572, 1160), (542, 1124), (553, 1145), (559, 1154), (556, 1131), (553, 1157), (570, 1141)]
         : compromised: 0.4859, honest: 0.4865
         : coarse stats = ['Node 0: acc_rate=0.655', 'Node 1: acc_rate=0.729', 'Node 2: acc_rate=0.786']...
Round 008: test acc mean=0.4898 ± 0.0195 | min=0.4375 max=0.5408
         : test loss mean=0.7396 ± 0.0545
         : individual accs = ['0.471053', '0.491364', '0.506655', '0.494819', '0.482363', '0.479476', '0.478603', '0.497782', '0.437500', '0.511525', '0.502622', '0.501333', '0.477431', '0.496552', '0.481317', '0.482969', '0.491334', '0.491600', '0.477960', '0.540754']
         : correct/total = [(537, 1140), (569, 1158), (571, 1127), (573, 1158), (547, 1134), (549, 1145), (548, 1145), (561, 1127), (497, 1136), (577, 1128), (575, 1144), (564, 1125), (550, 1152), (576, 1160), (541, 1124), (553, 1145), (567, 1154), (556, 1131), (553, 1157), (617, 1141)]
         : compromised: 0.4849, honest: 0.4970
         : coarse stats = ['Node 0: acc_rate=0.615', 'Node 1: acc_rate=0.688', 'Node 2: acc_rate=0.750']...
Round 009: test acc mean=0.5154 ± 0.0198 | min=0.4745 max=0.5452
         : test loss mean=0.6978 ± 0.0068
         : individual accs = ['0.498246', '0.503454', '0.509317', '0.520725', '0.503527', '0.506550', '0.527511', '0.524401', '0.474472', '0.545213', '0.541958', '0.501333', '0.519965', '0.498276', '0.506228', '0.482969', '0.538995', '0.543767', '0.521175', '0.539001']
         : correct/total = [(568, 1140), (583, 1158), (574, 1127), (603, 1158), (571, 1134), (580, 1145), (604, 1145), (591, 1127), (539, 1136), (615, 1128), (620, 1144), (564, 1125), (599, 1152), (578, 1160), (569, 1124), (553, 1145), (622, 1154), (615, 1131), (603, 1157), (615, 1141)]
         : compromised: 0.5074, honest: 0.5274
         : coarse stats = ['Node 0: acc_rate=0.593', 'Node 1: acc_rate=0.667', 'Node 2: acc_rate=0.722']...
Round 010: test acc mean=0.5302 ± 0.0275 | min=0.4569 max=0.5782
         : test loss mean=0.6898 ± 0.0047
         : individual accs = ['0.524561', '0.516408', '0.517303', '0.543178', '0.521164', '0.538865', '0.546725', '0.546584', '0.456866', '0.526596', '0.541084', '0.523556', '0.471354', '0.516379', '0.535587', '0.542358', '0.548527', '0.578249', '0.535869', '0.572305']
         : correct/total = [(598, 1140), (598, 1158), (583, 1127), (629, 1158), (591, 1134), (617, 1145), (626, 1145), (616, 1127), (519, 1136), (594, 1128), (619, 1144), (589, 1125), (543, 1152), (599, 1160), (602, 1124), (621, 1145), (633, 1154), (654, 1131), (620, 1157), (653, 1141)]
         : compromised: 0.5230, honest: 0.5409
         : coarse stats = ['Node 0: acc_rate=0.575', 'Node 1: acc_rate=0.650', 'Node 2: acc_rate=0.700']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: gaussian, 60.0% compromised
Final accuracy - Compromised: 0.5230, Honest: 0.5409
Overall test accuracy: mean=0.5302 ± 0.0275

=== COARSE SUMMARY ===
Node 0: acceptance=0.575
Node 1: acceptance=0.650
Node 2: acceptance=0.700
Node 3: acceptance=0.714
Node 4: acceptance=0.600
Node 5: acceptance=0.640
Node 6: acceptance=0.558
Node 7: acceptance=0.536
Node 8: acceptance=0.571
Node 9: acceptance=0.636
Node 10: acceptance=0.688
Node 11: acceptance=0.550
Node 12: acceptance=0.633
Node 13: acceptance=0.600
Node 14: acceptance=0.564
Node 15: acceptance=0.633
Node 16: acceptance=0.571
Node 17: acceptance=0.688
Node 18: acceptance=0.583
Node 19: acceptance=0.580

Performance Summary:
  - Sketching time: 0.048s (8.5%)
  - Filtering time: 0.008s (1.4%)
  - Aggregation time: 0.507s (90.2%)
  - Total time: 0.562s
  - Mean acceptance rate: 0.614

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
