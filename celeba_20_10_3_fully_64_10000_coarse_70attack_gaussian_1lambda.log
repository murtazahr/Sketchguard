Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: fully, nodes: 20, edges: 190
Attack: Compromised 14/20 nodes: [1, 2, 3, 5, 6, 8, 11, 12, 13, 14, 15, 17, 18, 19]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8492 ± 0.0737
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5172, honest: 0.5145
         : coarse stats = ['Node 0: acc_rate=0.263', 'Node 1: acc_rate=0.316', 'Node 2: acc_rate=0.316']...
Round 002: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8454 ± 0.0813
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5172, honest: 0.5145
         : coarse stats = ['Node 0: acc_rate=0.263', 'Node 1: acc_rate=0.316', 'Node 2: acc_rate=0.316']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5172, honest: 0.5145
         : coarse stats = ['Node 0: acc_rate=0.509', 'Node 1: acc_rate=0.544', 'Node 2: acc_rate=0.544']...
Round 004: test acc mean=0.4938 ± 0.0177 | min=0.4715 max=0.5320
         : test loss mean=287.2791 ± 153.9243
         : individual accs = ['0.471930', '0.531952', '0.511979', '0.471503', '0.475309', '0.485590', '0.472489', '0.496894', '0.496479', '0.513298', '0.478147', '0.487111', '0.517361', '0.498276', '0.520463', '0.507424', '0.478336', '0.493369', '0.486603', '0.481157']
         : correct/total = [(538, 1140), (616, 1158), (577, 1127), (546, 1158), (539, 1134), (556, 1145), (541, 1145), (560, 1127), (564, 1136), (579, 1128), (547, 1144), (548, 1125), (596, 1152), (578, 1160), (585, 1124), (581, 1145), (552, 1154), (558, 1131), (563, 1157), (549, 1141)]
         : compromised: 0.4973, honest: 0.4857
         : coarse stats = ['Node 0: acc_rate=0.632', 'Node 1: acc_rate=0.658', 'Node 2: acc_rate=0.658']...
Round 005: test acc mean=0.4804 ± 0.0198 | min=0.4366 max=0.5089
         : test loss mean=143.1497 ± 76.2535
         : individual accs = ['0.471053', '0.491364', '0.507542', '0.472366', '0.476190', '0.441921', '0.482096', '0.496894', '0.436620', '0.508865', '0.473776', '0.500444', '0.453993', '0.490517', '0.508007', '0.482969', '0.484402', '0.489832', '0.469317', '0.470640']
         : correct/total = [(537, 1140), (569, 1158), (572, 1127), (547, 1158), (540, 1134), (506, 1145), (552, 1145), (560, 1127), (496, 1136), (574, 1128), (542, 1144), (563, 1125), (523, 1152), (569, 1160), (571, 1124), (553, 1145), (559, 1154), (554, 1131), (543, 1157), (537, 1141)]
         : compromised: 0.4784, honest: 0.4852
         : coarse stats = ['Node 0: acc_rate=0.705', 'Node 1: acc_rate=0.726', 'Node 2: acc_rate=0.726']...
Round 006: test acc mean=0.5061 ± 0.0237 | min=0.4598 max=0.5625
         : test loss mean=70.4652 ± 37.9178
         : individual accs = ['0.528070', '0.479275', '0.522626', '0.481865', '0.533510', '0.500437', '0.478603', '0.507542', '0.562500', '0.492021', '0.529720', '0.498667', '0.513889', '0.502586', '0.480427', '0.494323', '0.523397', '0.459770', '0.522904', '0.510079']
         : correct/total = [(602, 1140), (555, 1158), (589, 1127), (558, 1158), (605, 1134), (573, 1145), (548, 1145), (572, 1127), (639, 1136), (555, 1128), (606, 1144), (561, 1125), (592, 1152), (583, 1160), (540, 1124), (566, 1145), (604, 1154), (520, 1131), (605, 1157), (582, 1141)]
         : compromised: 0.5006, honest: 0.5190
         : coarse stats = ['Node 0: acc_rate=0.754', 'Node 1: acc_rate=0.772', 'Node 2: acc_rate=0.772']...
Round 007: test acc mean=0.5044 ± 0.0304 | min=0.4715 max=0.5813
         : test loss mean=0.8369 ± 0.1568
         : individual accs = ['0.476316', '0.491364', '0.506655', '0.471503', '0.476190', '0.513537', '0.478603', '0.497782', '0.536092', '0.508865', '0.581294', '0.501333', '0.576389', '0.493103', '0.489324', '0.482969', '0.492201', '0.493369', '0.538462', '0.482033']
         : correct/total = [(543, 1140), (569, 1158), (571, 1127), (546, 1158), (540, 1134), (588, 1145), (548, 1145), (561, 1127), (609, 1136), (574, 1128), (665, 1144), (564, 1125), (664, 1152), (572, 1160), (550, 1124), (553, 1145), (568, 1154), (558, 1131), (623, 1157), (550, 1141)]
         : compromised: 0.5039, honest: 0.5054
         : coarse stats = ['Node 0: acc_rate=0.684', 'Node 1: acc_rate=0.707', 'Node 2: acc_rate=0.707']...
Round 008: test acc mean=0.5716 ± 0.0353 | min=0.4944 max=0.6285
         : test loss mean=0.6840 ± 0.0252
         : individual accs = ['0.569298', '0.561313', '0.535049', '0.513817', '0.601411', '0.610480', '0.592140', '0.553682', '0.594190', '0.578014', '0.628497', '0.570667', '0.573785', '0.553448', '0.590747', '0.557205', '0.624783', '0.523431', '0.494382', '0.605609']
         : correct/total = [(649, 1140), (650, 1158), (603, 1127), (595, 1158), (682, 1134), (699, 1145), (678, 1145), (624, 1127), (675, 1136), (652, 1128), (719, 1144), (642, 1125), (661, 1152), (642, 1160), (664, 1124), (638, 1145), (721, 1154), (592, 1131), (572, 1157), (691, 1141)]
         : compromised: 0.5626, honest: 0.5926
         : coarse stats = ['Node 0: acc_rate=0.632', 'Node 1: acc_rate=0.658', 'Node 2: acc_rate=0.658']...
Round 009: test acc mean=0.6292 ± 0.0212 | min=0.5874 max=0.6658
         : test loss mean=0.6465 ± 0.0158
         : individual accs = ['0.625439', '0.623489', '0.587400', '0.592401', '0.640212', '0.631441', '0.651528', '0.623780', '0.617958', '0.638298', '0.636364', '0.637333', '0.665799', '0.591379', '0.636121', '0.648035', '0.655979', '0.618921', '0.610199', '0.651183']
         : correct/total = [(713, 1140), (722, 1158), (662, 1127), (686, 1158), (726, 1134), (723, 1145), (746, 1145), (703, 1127), (702, 1136), (720, 1128), (728, 1144), (717, 1125), (767, 1152), (686, 1160), (715, 1124), (742, 1145), (757, 1154), (700, 1131), (706, 1157), (743, 1141)]
         : compromised: 0.6259, honest: 0.6367
         : coarse stats = ['Node 0: acc_rate=0.591', 'Node 1: acc_rate=0.620', 'Node 2: acc_rate=0.620']...
Round 010: test acc mean=0.6804 ± 0.0151 | min=0.6474 max=0.7055
         : test loss mean=0.6014 ± 0.0146
         : individual accs = ['0.670175', '0.686528', '0.684117', '0.650259', '0.677249', '0.668122', '0.703057', '0.669920', '0.688380', '0.686170', '0.685315', '0.674667', '0.682292', '0.647414', '0.670819', '0.694323', '0.680243', '0.679929', '0.703544', '0.705521']
         : correct/total = [(764, 1140), (795, 1158), (771, 1127), (753, 1158), (768, 1134), (765, 1145), (805, 1145), (755, 1127), (782, 1136), (774, 1128), (784, 1144), (759, 1125), (786, 1152), (751, 1160), (754, 1124), (795, 1145), (785, 1154), (769, 1131), (814, 1157), (805, 1141)]
         : compromised: 0.6814, honest: 0.6782
         : coarse stats = ['Node 0: acc_rate=0.558', 'Node 1: acc_rate=0.589', 'Node 2: acc_rate=0.589']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: fully, Aggregation: coarse
Attack: gaussian, 70.0% compromised
Final accuracy - Compromised: 0.6814, Honest: 0.6782
Overall test accuracy: mean=0.6804 ± 0.0151

=== COARSE SUMMARY ===
Node 0: acceptance=0.558
Node 1: acceptance=0.589
Node 2: acceptance=0.589
Node 3: acceptance=0.589
Node 4: acceptance=0.558
Node 5: acceptance=0.589
Node 6: acceptance=0.589
Node 7: acceptance=0.558
Node 8: acceptance=0.589
Node 9: acceptance=0.558
Node 10: acceptance=0.558
Node 11: acceptance=0.589
Node 12: acceptance=0.589
Node 13: acceptance=0.589
Node 14: acceptance=0.589
Node 15: acceptance=0.589
Node 16: acceptance=0.558
Node 17: acceptance=0.589
Node 18: acceptance=0.589
Node 19: acceptance=0.589

Performance Summary:
  - Sketching time: 0.049s (5.5%)
  - Filtering time: 0.013s (1.4%)
  - Aggregation time: 0.838s (93.1%)
  - Total time: 0.900s
  - Mean acceptance rate: 0.580

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
