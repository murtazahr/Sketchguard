Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: ring, nodes: 20, edges: 20
Attack: Compromised 6/20 nodes: [5, 12, 13, 14, 17, 18]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5168 ± 0.0149 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.529361', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.523438', '0.506897', '0.517794', '0.517031', '0.515598', '0.515473', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (613, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (603, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (583, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5167, honest: 0.5169
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5189 ± 0.0613 | min=0.4373 max=0.6912
         : test loss mean=7.5859 ± 16.4508
         : individual accs = ['0.528947', '0.683938', '0.691216', '0.528497', '0.483245', '0.514410', '0.504803', '0.503993', '0.563380', '0.491135', '0.525350', '0.437333', '0.477431', '0.493103', '0.482206', '0.490830', '0.495667', '0.501326', '0.489196', '0.492550']
         : correct/total = [(603, 1140), (792, 1158), (779, 1127), (612, 1158), (548, 1134), (589, 1145), (578, 1145), (568, 1127), (640, 1136), (554, 1128), (601, 1144), (492, 1125), (550, 1152), (572, 1160), (542, 1124), (562, 1145), (572, 1154), (567, 1131), (566, 1157), (562, 1141)]
         : compromised: 0.4929, honest: 0.5301
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5253 ± 0.0218 | min=0.4947 max=0.5817
         : test loss mean=1.0732 ± 0.6294
         : individual accs = ['0.528947', '0.547496', '0.555457', '0.528497', '0.522046', '0.581659', '0.521397', '0.503993', '0.568662', '0.494681', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.514731', '0.508400', '0.522040', '0.518843']
         : correct/total = [(603, 1140), (634, 1158), (626, 1127), (612, 1158), (592, 1134), (666, 1145), (597, 1145), (568, 1127), (646, 1136), (558, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (594, 1154), (575, 1131), (604, 1157), (592, 1141)]
         : compromised: 0.5266, honest: 0.5247
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5807 ± 0.0783 | min=0.4840 max=0.7660
         : test loss mean=2.3661 ± 3.0227
         : individual accs = ['0.621053', '0.566494', '0.680568', '0.765976', '0.512346', '0.663755', '0.593013', '0.692990', '0.578345', '0.506206', '0.673951', '0.498667', '0.495660', '0.508621', '0.483986', '0.594760', '0.553726', '0.511052', '0.521175', '0.592463']
         : correct/total = [(708, 1140), (656, 1158), (767, 1127), (887, 1158), (581, 1134), (760, 1145), (679, 1145), (781, 1127), (657, 1136), (571, 1128), (771, 1144), (561, 1125), (571, 1152), (590, 1160), (544, 1124), (681, 1145), (639, 1154), (578, 1131), (603, 1157), (676, 1141)]
         : compromised: 0.5307, honest: 0.6022
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.6115 ± 0.1188 | min=0.4987 max=0.8707
         : test loss mean=0.8785 ± 0.5434
         : individual accs = ['0.577193', '0.709845', '0.822538', '0.727979', '0.522046', '0.870742', '0.521397', '0.622893', '0.740317', '0.688830', '0.772727', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.545136']
         : correct/total = [(658, 1140), (822, 1158), (927, 1127), (843, 1158), (592, 1134), (997, 1145), (597, 1145), (702, 1127), (841, 1136), (777, 1128), (884, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (622, 1141)]
         : compromised: 0.5747, honest: 0.6273
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.6743 ± 0.1234 | min=0.5164 max=0.8749
         : test loss mean=nan ± nan
         : individual accs = ['0.739474', '0.771157', '0.863354', '0.824698', '0.522046', '0.694323', '0.632314', '0.874889', '0.824824', '0.796986', '0.818182', '0.593778', '0.580729', '0.516379', '0.555160', '0.633188', '0.551993', '0.573828', '0.535869', '0.583699']
         : correct/total = [(843, 1140), (893, 1158), (973, 1127), (955, 1158), (592, 1134), (795, 1145), (724, 1145), (986, 1127), (937, 1136), (899, 1128), (936, 1144), (668, 1125), (669, 1152), (599, 1160), (624, 1124), (725, 1145), (637, 1154), (649, 1131), (620, 1157), (666, 1141)]
         : compromised: 0.5760, honest: 0.7165
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.6677 ± 0.1676 | min=0.4987 max=0.8912
         : test loss mean=0.8286 ± 0.6509
         : individual accs = ['0.826316', '0.891192', '0.890861', '0.845423', '0.522046', '0.885590', '0.521397', '0.740018', '0.861796', '0.868794', '0.836538', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.554777']
         : correct/total = [(942, 1140), (1032, 1158), (1004, 1127), (979, 1158), (592, 1134), (1014, 1145), (597, 1145), (834, 1127), (979, 1136), (980, 1128), (957, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (633, 1141)]
         : compromised: 0.5772, honest: 0.7065
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.6945 ± 0.1442 | min=0.5138 max=0.8891
         : test loss mean=nan ± nan
         : individual accs = ['0.794737', '0.860104', '0.885537', '0.860104', '0.535273', '0.727511', '0.567686', '0.889086', '0.866197', '0.855496', '0.877622', '0.628444', '0.599826', '0.513793', '0.629893', '0.601747', '0.551127', '0.583554', '0.544512', '0.517967']
         : correct/total = [(906, 1140), (996, 1158), (998, 1127), (996, 1158), (607, 1134), (833, 1145), (650, 1145), (1002, 1127), (984, 1136), (965, 1128), (1004, 1144), (707, 1125), (691, 1152), (596, 1160), (708, 1124), (689, 1145), (636, 1154), (660, 1131), (630, 1157), (591, 1141)]
         : compromised: 0.5998, honest: 0.7351
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.6749 ± 0.1750 | min=0.4987 max=0.8971
         : test loss mean=0.8830 ± 0.7870
         : individual accs = ['0.816667', '0.886874', '0.897072', '0.855786', '0.522046', '0.878603', '0.521397', '0.852706', '0.874120', '0.866135', '0.878497', '0.498667', '0.522569', '0.506034', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.539001']
         : correct/total = [(931, 1140), (1027, 1158), (1011, 1127), (991, 1158), (592, 1134), (1006, 1145), (597, 1145), (961, 1127), (993, 1136), (977, 1128), (1005, 1144), (561, 1125), (602, 1152), (587, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (615, 1141)]
         : compromised: 0.5759, honest: 0.7173
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.7087 ± 0.1463 | min=0.5121 max=0.8909
         : test loss mean=1.4924 ± 1.4011
         : individual accs = ['0.807018', '0.890328', '0.883762', '0.868739', '0.537037', '0.801747', '0.576419', '0.890861', '0.871479', '0.887411', '0.885490', '0.606222', '0.587674', '0.512069', '0.646797', '0.641921', '0.593588', '0.586207', '0.556612', '0.543383']
         : correct/total = [(920, 1140), (1031, 1158), (996, 1127), (1006, 1158), (609, 1134), (918, 1145), (660, 1145), (1004, 1127), (990, 1136), (1001, 1128), (1013, 1144), (682, 1125), (677, 1152), (594, 1160), (727, 1124), (735, 1145), (685, 1154), (663, 1131), (644, 1157), (620, 1141)]
         : compromised: 0.6152, honest: 0.7488
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: ring, Aggregation: coarse
Attack: directed_deviation, 30.0% compromised
Final accuracy - Compromised: 0.6152, Honest: 0.7488
Overall test accuracy: mean=0.7087 ± 0.1463

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.041s (15.5%)
  - Filtering time: 0.003s (1.2%)
  - Aggregation time: 0.220s (83.3%)
  - Total time: 0.264s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
