Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 126
Attack: Compromised 12/20 nodes: [1, 2, 3, 5, 8, 11, 12, 13, 14, 15, 17, 18]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8460 ± 0.0794
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5167, honest: 0.5158
         : coarse stats = ['Node 0: acc_rate=0.438', 'Node 1: acc_rate=0.545', 'Node 2: acc_rate=0.417']...
Round 002: test acc mean=0.5168 ± 0.0148 | min=0.4911 max=0.5625
         : test loss mean=0.7743 ± 0.0730
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.511979', '0.562500', '0.491135', '0.527098', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (577, 1127), (639, 1136), (554, 1128), (603, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5167, honest: 0.5170
         : coarse stats = ['Node 0: acc_rate=0.438', 'Node 1: acc_rate=0.545', 'Node 2: acc_rate=0.417']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5167, honest: 0.5158
         : coarse stats = ['Node 0: acc_rate=0.625', 'Node 1: acc_rate=0.697', 'Node 2: acc_rate=0.583']...
Round 004: test acc mean=0.5086 ± 0.0259 | min=0.4500 max=0.5616
         : test loss mean=938.4371 ± 1082.5259
         : individual accs = ['0.528947', '0.491364', '0.491571', '0.528497', '0.509700', '0.520524', '0.521397', '0.531500', '0.561620', '0.473404', '0.526224', '0.498667', '0.496528', '0.450000', '0.481317', '0.517031', '0.540728', '0.504863', '0.476232', '0.522349']
         : correct/total = [(603, 1140), (569, 1158), (554, 1127), (612, 1158), (578, 1134), (596, 1145), (597, 1145), (599, 1127), (638, 1136), (534, 1128), (602, 1144), (561, 1125), (572, 1152), (522, 1160), (541, 1124), (592, 1145), (624, 1154), (571, 1131), (551, 1157), (596, 1141)]
         : compromised: 0.5015, honest: 0.5193
         : coarse stats = ['Node 0: acc_rate=0.672', 'Node 1: acc_rate=0.773', 'Node 2: acc_rate=0.688']...
Round 005: test acc mean=0.5009 ± 0.0243 | min=0.4331 max=0.5563
         : test loss mean=119.5194 ± 103.2537
         : individual accs = ['0.501754', '0.505181', '0.477374', '0.508636', '0.530864', '0.491703', '0.502183', '0.511091', '0.433099', '0.515071', '0.523601', '0.477333', '0.489583', '0.496552', '0.516014', '0.516157', '0.556326', '0.492485', '0.483146', '0.489921']
         : correct/total = [(572, 1140), (585, 1158), (538, 1127), (589, 1158), (602, 1134), (563, 1145), (575, 1145), (576, 1127), (492, 1136), (581, 1128), (599, 1144), (537, 1125), (564, 1152), (576, 1160), (580, 1124), (591, 1145), (642, 1154), (557, 1131), (559, 1157), (559, 1141)]
         : compromised: 0.4906, honest: 0.5164
         : coarse stats = ['Node 0: acc_rate=0.738', 'Node 1: acc_rate=0.818', 'Node 2: acc_rate=0.750']...
Round 006: test acc mean=0.4977 ± 0.0229 | min=0.4665 max=0.5625
         : test loss mean=110.8293 ± 112.3871
         : individual accs = ['0.507018', '0.469775', '0.471162', '0.473230', '0.466490', '0.489083', '0.511790', '0.508429', '0.562500', '0.509752', '0.506993', '0.512000', '0.473958', '0.496552', '0.511566', '0.482969', '0.515598', '0.479222', '0.521175', '0.484663']
         : correct/total = [(578, 1140), (544, 1158), (531, 1127), (548, 1158), (529, 1134), (560, 1145), (586, 1145), (573, 1127), (639, 1136), (575, 1128), (580, 1144), (576, 1125), (546, 1152), (576, 1160), (575, 1124), (553, 1145), (595, 1154), (542, 1131), (603, 1157), (553, 1141)]
         : compromised: 0.4953, honest: 0.5013
         : coarse stats = ['Node 0: acc_rate=0.750', 'Node 1: acc_rate=0.848', 'Node 2: acc_rate=0.792']...
Round 007: test acc mean=0.4849 ± 0.0155 | min=0.4375 max=0.5089
         : test loss mean=1.7472 ± 0.8161
         : individual accs = ['0.471053', '0.491364', '0.506655', '0.471503', '0.477954', '0.485590', '0.478603', '0.496007', '0.437500', '0.508865', '0.474650', '0.501333', '0.477431', '0.493103', '0.482206', '0.482969', '0.484402', '0.491600', '0.503025', '0.482033']
         : correct/total = [(537, 1140), (569, 1158), (571, 1127), (546, 1158), (542, 1134), (556, 1145), (548, 1145), (559, 1127), (497, 1136), (574, 1128), (543, 1144), (564, 1125), (550, 1152), (572, 1160), (542, 1124), (553, 1145), (559, 1154), (556, 1131), (582, 1157), (550, 1141)]
         : compromised: 0.4854, honest: 0.4842
         : coarse stats = ['Node 0: acc_rate=0.696', 'Node 1: acc_rate=0.805', 'Node 2: acc_rate=0.738']...
Round 008: test acc mean=0.5077 ± 0.0298 | min=0.4498 max=0.5764
         : test loss mean=0.7188 ± 0.0260
         : individual accs = ['0.478947', '0.504318', '0.506655', '0.478411', '0.511464', '0.576419', '0.545852', '0.496007', '0.449824', '0.543440', '0.480769', '0.545778', '0.503472', '0.493103', '0.482206', '0.544105', '0.506066', '0.503095', '0.519447', '0.484663']
         : correct/total = [(546, 1140), (584, 1158), (571, 1127), (554, 1158), (580, 1134), (660, 1145), (625, 1145), (559, 1127), (511, 1136), (613, 1128), (550, 1144), (614, 1125), (580, 1152), (572, 1160), (542, 1124), (623, 1145), (584, 1154), (569, 1131), (601, 1157), (553, 1141)]
         : compromised: 0.5089, honest: 0.5059
         : coarse stats = ['Node 0: acc_rate=0.664', 'Node 1: acc_rate=0.773', 'Node 2: acc_rate=0.698']...
Round 009: test acc mean=0.5808 ± 0.0390 | min=0.4715 max=0.6468
         : test loss mean=0.6700 ± 0.0193
         : individual accs = ['0.622807', '0.646805', '0.568767', '0.471503', '0.576720', '0.593886', '0.556332', '0.549246', '0.609155', '0.576241', '0.546329', '0.598222', '0.640625', '0.571552', '0.566726', '0.548472', '0.630849', '0.564103', '0.599827', '0.577564']
         : correct/total = [(710, 1140), (749, 1158), (641, 1127), (546, 1158), (654, 1134), (680, 1145), (637, 1145), (619, 1127), (692, 1136), (650, 1128), (625, 1144), (673, 1125), (738, 1152), (663, 1160), (637, 1124), (628, 1145), (728, 1154), (638, 1131), (694, 1157), (659, 1141)]
         : compromised: 0.5816, honest: 0.5795
         : coarse stats = ['Node 0: acc_rate=0.639', 'Node 1: acc_rate=0.747', 'Node 2: acc_rate=0.667']...
Round 010: test acc mean=0.6385 ± 0.0250 | min=0.5927 max=0.6839
         : test loss mean=0.6363 ± 0.0227
         : individual accs = ['0.650000', '0.683938', '0.629104', '0.601900', '0.635802', '0.647162', '0.634934', '0.622893', '0.660211', '0.624113', '0.592657', '0.650667', '0.667535', '0.599138', '0.616548', '0.616594', '0.677643', '0.654288', '0.660328', '0.644172']
         : correct/total = [(741, 1140), (792, 1158), (709, 1127), (697, 1158), (721, 1134), (741, 1145), (727, 1145), (702, 1127), (750, 1136), (704, 1128), (678, 1144), (732, 1125), (769, 1152), (695, 1160), (693, 1124), (706, 1145), (782, 1154), (740, 1131), (764, 1157), (735, 1141)]
         : compromised: 0.6406, honest: 0.6353
         : coarse stats = ['Node 0: acc_rate=0.619', 'Node 1: acc_rate=0.727', 'Node 2: acc_rate=0.642']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: gaussian, 60.0% compromised
Final accuracy - Compromised: 0.6406, Honest: 0.6353
Overall test accuracy: mean=0.6385 ± 0.0250

=== COARSE SUMMARY ===
Node 0: acceptance=0.619
Node 1: acceptance=0.727
Node 2: acceptance=0.642
Node 3: acceptance=0.700
Node 4: acceptance=0.673
Node 5: acceptance=0.613
Node 6: acceptance=0.586
Node 7: acceptance=0.600
Node 8: acceptance=0.580
Node 9: acceptance=0.669
Node 10: acceptance=0.667
Node 11: acceptance=0.621
Node 12: acceptance=0.675
Node 13: acceptance=0.631
Node 14: acceptance=0.633
Node 15: acceptance=0.618
Node 16: acceptance=0.585
Node 17: acceptance=0.744
Node 18: acceptance=0.619
Node 19: acceptance=0.600

Performance Summary:
  - Sketching time: 0.046s (6.6%)
  - Filtering time: 0.010s (1.4%)
  - Aggregation time: 0.645s (92.0%)
  - Total time: 0.700s
  - Mean acceptance rate: 0.640

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
