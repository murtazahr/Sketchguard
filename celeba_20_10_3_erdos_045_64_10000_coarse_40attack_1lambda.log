Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 99
Attack: Compromised 8/20 nodes: [1, 5, 11, 12, 13, 14, 17, 18]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5016 ± 0.0191 | min=0.4701 max=0.5432
         : test loss mean=12.8548 ± 15.1629
         : individual accs = ['0.499123', '0.490501', '0.504880', '0.543178', '0.535273', '0.485590', '0.517904', '0.500444', '0.470070', '0.508865', '0.475524', '0.519111', '0.480903', '0.495690', '0.517794', '0.517904', '0.484402', '0.507515', '0.482282', '0.494303']
         : correct/total = [(569, 1140), (568, 1158), (569, 1127), (629, 1158), (607, 1134), (556, 1145), (593, 1145), (564, 1127), (534, 1136), (574, 1128), (544, 1144), (584, 1125), (554, 1152), (575, 1160), (582, 1124), (593, 1145), (559, 1154), (574, 1131), (558, 1157), (564, 1141)]
         : compromised: 0.4974, honest: 0.5043
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5140 ± 0.0164 | min=0.4911 max=0.5660
         : test loss mean=26.0558 ± 39.1961
         : individual accs = ['0.518421', '0.508636', '0.494232', '0.529361', '0.515873', '0.505677', '0.518777', '0.503106', '0.566021', '0.491135', '0.523601', '0.498667', '0.522569', '0.506897', '0.516904', '0.511790', '0.491334', '0.507515', '0.522040', '0.526731']
         : correct/total = [(591, 1140), (589, 1158), (557, 1127), (613, 1158), (585, 1134), (579, 1145), (594, 1145), (567, 1127), (643, 1136), (554, 1128), (599, 1144), (561, 1125), (602, 1152), (588, 1160), (581, 1124), (586, 1145), (567, 1154), (574, 1131), (604, 1157), (601, 1141)]
         : compromised: 0.5111, honest: 0.5159
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.7869 ± 0.0720
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5124, honest: 0.5190
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5218 ± 0.0163 | min=0.4911 max=0.5625
         : test loss mean=11.2140 ± 9.2395
         : individual accs = ['0.528947', '0.537997', '0.525288', '0.528497', '0.557319', '0.514410', '0.522271', '0.503993', '0.562500', '0.491135', '0.525350', '0.507556', '0.522569', '0.506897', '0.517794', '0.516157', '0.515598', '0.508400', '0.522040', '0.520596']
         : correct/total = [(603, 1140), (623, 1158), (592, 1127), (612, 1158), (632, 1134), (589, 1145), (598, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (571, 1125), (602, 1152), (588, 1160), (582, 1124), (591, 1145), (595, 1154), (575, 1131), (604, 1157), (594, 1141)]
         : compromised: 0.5172, honest: 0.5248
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.7641 ± 0.0324
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5124, honest: 0.5190
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.5183 ± 0.0142 | min=0.4911 max=0.5625
         : test loss mean=11.6971 ± 6.7227
         : individual accs = ['0.528947', '0.518135', '0.507542', '0.528497', '0.527337', '0.514410', '0.522271', '0.503993', '0.562500', '0.491135', '0.525350', '0.500444', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.510168', '0.527226', '0.518843']
         : correct/total = [(603, 1140), (600, 1158), (572, 1127), (612, 1158), (598, 1134), (589, 1145), (598, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (563, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (577, 1131), (610, 1157), (592, 1141)]
         : compromised: 0.5147, honest: 0.5208
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.5166 ± 0.0155 | min=0.4911 max=0.5660
         : test loss mean=0.7504 ± 0.0293
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.566021', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.516464', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (643, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (596, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5124, honest: 0.5193
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.5259 ± 0.0177 | min=0.5031 max=0.5803
         : test loss mean=10.5487 ± 5.6447
         : individual accs = ['0.529825', '0.580311', '0.509317', '0.529361', '0.530864', '0.518777', '0.521397', '0.504880', '0.563380', '0.534574', '0.525350', '0.503111', '0.527778', '0.513793', '0.519573', '0.517031', '0.518198', '0.518126', '0.532411', '0.519720']
         : correct/total = [(604, 1140), (672, 1158), (574, 1127), (613, 1158), (602, 1134), (594, 1145), (597, 1145), (569, 1127), (640, 1136), (603, 1128), (601, 1144), (566, 1125), (608, 1152), (596, 1160), (584, 1124), (592, 1145), (598, 1154), (586, 1131), (616, 1157), (593, 1141)]
         : compromised: 0.5267, honest: 0.5253
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.5167 ± 0.0160 | min=0.4911 max=0.5687
         : test loss mean=0.7563 ± 0.0283
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.568662', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (646, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5124, honest: 0.5195
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.5511 ± 0.0385 | min=0.5084 max=0.6817
         : test loss mean=9.1196 ± 5.2172
         : individual accs = ['0.535088', '0.607081', '0.536823', '0.573402', '0.552028', '0.529258', '0.528384', '0.508429', '0.565141', '0.681738', '0.527098', '0.566222', '0.585069', '0.531897', '0.524911', '0.526638', '0.532062', '0.531388', '0.560069', '0.519720']
         : correct/total = [(610, 1140), (703, 1158), (605, 1127), (664, 1158), (626, 1134), (606, 1145), (605, 1145), (573, 1127), (642, 1136), (769, 1128), (603, 1144), (637, 1125), (674, 1152), (617, 1160), (590, 1124), (603, 1145), (614, 1154), (601, 1131), (648, 1157), (593, 1141)]
         : compromised: 0.5545, honest: 0.5489
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: directed_deviation, 40.0% compromised
Final accuracy - Compromised: 0.5545, Honest: 0.5489
Overall test accuracy: mean=0.5511 ± 0.0385

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.047s (5.7%)
  - Filtering time: 0.008s (0.9%)
  - Aggregation time: 0.765s (93.4%)
  - Total time: 0.819s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
