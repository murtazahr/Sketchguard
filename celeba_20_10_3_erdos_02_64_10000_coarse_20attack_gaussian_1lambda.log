Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
Attack: Compromised 4/20 nodes: [5, 12, 13, 17]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8685 ± 0.1005
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5131, honest: 0.5172
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5225 ± 0.0154 | min=0.4911 max=0.5625
         : test loss mean=0.7301 ± 0.0773
         : individual accs = ['0.528947', '0.508636', '0.540373', '0.529361', '0.522928', '0.514410', '0.521397', '0.536823', '0.562500', '0.491135', '0.532343', '0.502222', '0.522569', '0.506897', '0.537367', '0.527511', '0.515598', '0.508400', '0.522904', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (609, 1127), (613, 1158), (593, 1134), (589, 1145), (597, 1145), (605, 1127), (639, 1136), (554, 1128), (609, 1144), (565, 1125), (602, 1152), (588, 1160), (604, 1124), (604, 1145), (595, 1154), (575, 1131), (605, 1157), (591, 1141)]
         : compromised: 0.5131, honest: 0.5249
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5263 ± 0.0286 | min=0.4982 max=0.6109
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.512953', '0.519077', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.595070', '0.498227', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.557476', '0.610868']
         : correct/total = [(603, 1140), (594, 1158), (585, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (676, 1136), (562, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (645, 1157), (697, 1141)]
         : compromised: 0.5131, honest: 0.5296
         : coarse stats = ['Node 0: acc_rate=0.889', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5578 ± 0.1043 | min=0.4777 max=0.7905
         : test loss mean=nan ± nan
         : individual accs = ['0.478070', '0.735751', '0.677906', '0.527634', '0.522046', '0.485590', '0.477729', '0.496894', '0.790493', '0.491135', '0.525350', '0.501333', '0.530382', '0.493103', '0.487544', '0.484716', '0.485269', '0.508400', '0.685393', '0.771253']
         : correct/total = [(545, 1140), (852, 1158), (764, 1127), (611, 1158), (592, 1134), (556, 1145), (547, 1145), (560, 1127), (898, 1136), (554, 1128), (601, 1144), (564, 1125), (611, 1152), (572, 1160), (548, 1124), (555, 1145), (560, 1154), (575, 1131), (793, 1157), (880, 1141)]
         : compromised: 0.5044, honest: 0.5712
         : coarse stats = ['Node 0: acc_rate=0.875', 'Node 1: acc_rate=0.792', 'Node 2: acc_rate=0.900']...
Round 005: test acc mean=0.5906 ± 0.1663 | min=0.4747 max=0.8992
         : test loss mean=394.6441 ± 1268.8830
         : individual accs = ['0.514912', '0.898964', '0.860692', '0.528497', '0.477954', '0.511790', '0.532751', '0.483585', '0.883803', '0.491135', '0.474650', '0.517333', '0.477431', '0.493103', '0.482206', '0.475109', '0.478336', '0.491600', '0.839239', '0.899211']
         : correct/total = [(587, 1140), (1041, 1158), (970, 1127), (612, 1158), (542, 1134), (586, 1145), (610, 1145), (545, 1127), (1004, 1136), (554, 1128), (543, 1144), (582, 1125), (550, 1152), (572, 1160), (542, 1124), (544, 1145), (552, 1154), (556, 1131), (971, 1157), (1026, 1141)]
         : compromised: 0.4935, honest: 0.6149
         : coarse stats = ['Node 0: acc_rate=0.867', 'Node 1: acc_rate=0.667', 'Node 2: acc_rate=0.840']...
Round 006: test acc mean=0.6028 ± 0.1754 | min=0.4318 max=0.9167
         : test loss mean=1251.7367 ± 3979.6271
         : individual accs = ['0.513158', '0.912781', '0.901508', '0.532815', '0.461199', '0.503930', '0.517031', '0.527950', '0.905810', '0.491135', '0.431818', '0.498667', '0.526042', '0.493103', '0.525801', '0.509170', '0.510399', '0.494253', '0.882455', '0.916740']
         : correct/total = [(585, 1140), (1057, 1158), (1016, 1127), (617, 1158), (523, 1134), (577, 1145), (592, 1145), (595, 1127), (1029, 1136), (554, 1128), (494, 1144), (561, 1125), (606, 1152), (572, 1160), (591, 1124), (583, 1145), (589, 1154), (559, 1131), (1021, 1157), (1046, 1141)]
         : compromised: 0.5043, honest: 0.6274
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=0.583', 'Node 2: acc_rate=0.800']...
Round 007: test acc mean=0.5994 ± 0.1798 | min=0.4715 max=0.9229
         : test loss mean=748763.1031 ± 3263778.5828
         : individual accs = ['0.528947', '0.913644', '0.897959', '0.471503', '0.477954', '0.485590', '0.521397', '0.498669', '0.916373', '0.508865', '0.474650', '0.504000', '0.477431', '0.506897', '0.482206', '0.482969', '0.510399', '0.508400', '0.897148', '0.922875']
         : correct/total = [(603, 1140), (1058, 1158), (1012, 1127), (546, 1158), (542, 1134), (556, 1145), (597, 1145), (562, 1127), (1041, 1136), (574, 1128), (543, 1144), (567, 1125), (550, 1152), (588, 1160), (542, 1124), (553, 1145), (589, 1154), (575, 1131), (1038, 1157), (1053, 1141)]
         : compromised: 0.4946, honest: 0.6256
         : coarse stats = ['Node 0: acc_rate=0.810', 'Node 1: acc_rate=0.524', 'Node 2: acc_rate=0.771']...
Round 008: test acc mean=0.5643 ± 0.1469 | min=0.4715 max=0.9246
         : test loss mean=0.8279 ± 0.6902
         : individual accs = ['0.528947', '0.491364', '0.903283', '0.471503', '0.477954', '0.517904', '0.521397', '0.496007', '0.905810', '0.508865', '0.474650', '0.513778', '0.522569', '0.529310', '0.517794', '0.479476', '0.517331', '0.504863', '0.477960', '0.924628']
         : correct/total = [(603, 1140), (569, 1158), (1018, 1127), (546, 1158), (542, 1134), (593, 1145), (597, 1145), (559, 1127), (1029, 1136), (574, 1128), (543, 1144), (578, 1125), (602, 1152), (614, 1160), (582, 1124), (549, 1145), (597, 1154), (571, 1131), (553, 1157), (1055, 1141)]
         : compromised: 0.5187, honest: 0.5757
         : coarse stats = ['Node 0: acc_rate=0.792', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.750']...
Round 009: test acc mean=0.5145 ± 0.0215 | min=0.4781 max=0.5625
         : test loss mean=0.7025 ± 0.0136
         : individual accs = ['0.528947', '0.513817', '0.493345', '0.525907', '0.523810', '0.501310', '0.521397', '0.503993', '0.562500', '0.510638', '0.478147', '0.506667', '0.522569', '0.534483', '0.503559', '0.510917', '0.558925', '0.491600', '0.478825', '0.517967']
         : correct/total = [(603, 1140), (595, 1158), (556, 1127), (609, 1158), (594, 1134), (574, 1145), (597, 1145), (568, 1127), (639, 1136), (576, 1128), (547, 1144), (570, 1125), (602, 1152), (620, 1160), (566, 1124), (585, 1145), (645, 1154), (556, 1131), (554, 1157), (591, 1141)]
         : compromised: 0.5125, honest: 0.5150
         : coarse stats = ['Node 0: acc_rate=0.778', 'Node 1: acc_rate=0.519', 'Node 2: acc_rate=0.756']...
Round 010: test acc mean=0.5635 ± 0.0763 | min=0.4867 max=0.7220
         : test loss mean=0.6759 ± 0.0391
         : individual accs = ['0.530702', '0.508636', '0.494232', '0.529361', '0.679012', '0.531878', '0.521397', '0.503993', '0.563380', '0.486702', '0.722028', '0.612444', '0.522569', '0.662931', '0.516904', '0.501310', '0.523397', '0.500442', '0.637857', '0.720421']
         : correct/total = [(605, 1140), (589, 1158), (557, 1127), (613, 1158), (770, 1134), (609, 1145), (597, 1145), (568, 1127), (640, 1136), (549, 1128), (826, 1144), (689, 1125), (602, 1152), (769, 1160), (581, 1124), (574, 1145), (604, 1154), (566, 1131), (738, 1157), (822, 1141)]
         : compromised: 0.5545, honest: 0.5657
         : coarse stats = ['Node 0: acc_rate=0.767', 'Node 1: acc_rate=0.533', 'Node 2: acc_rate=0.760']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: gaussian, 20.0% compromised
Final accuracy - Compromised: 0.5545, Honest: 0.5657
Overall test accuracy: mean=0.5635 ± 0.0763

=== COARSE SUMMARY ===
Node 0: acceptance=0.767
Node 1: acceptance=0.533
Node 2: acceptance=0.760
Node 3: acceptance=0.825
Node 4: acceptance=0.650
Node 5: acceptance=0.640
Node 6: acceptance=0.740
Node 7: acceptance=0.540
Node 8: acceptance=0.750
Node 9: acceptance=0.567
Node 10: acceptance=0.700
Node 11: acceptance=0.729
Node 12: acceptance=0.600
Node 13: acceptance=0.425
Node 14: acceptance=0.571
Node 15: acceptance=0.567
Node 16: acceptance=0.640
Node 17: acceptance=0.660
Node 18: acceptance=0.775
Node 19: acceptance=0.750

Performance Summary:
  - Sketching time: 0.039s (11.1%)
  - Filtering time: 0.005s (1.4%)
  - Aggregation time: 0.311s (87.6%)
  - Total time: 0.356s
  - Mean acceptance rate: 0.659

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
