Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: ring, nodes: 20, edges: 20
Attack: Compromised 8/20 nodes: [1, 5, 11, 12, 13, 14, 17, 18]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5200 ± 0.0178 | min=0.4911 max=0.5653
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.529361', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.565333', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.511936', '0.522040', '0.518843']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (613, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (636, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (579, 1131), (604, 1157), (592, 1141)]
         : compromised: 0.5212, honest: 0.5191
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5173 ± 0.0140 | min=0.4911 max=0.5634
         : test loss mean=17.6981 ± 31.6658
         : individual accs = ['0.528070', '0.508636', '0.516415', '0.528497', '0.514991', '0.514410', '0.521397', '0.503993', '0.563380', '0.491135', '0.525350', '0.499556', '0.522569', '0.506034', '0.517794', '0.517031', '0.515598', '0.510168', '0.522040', '0.518843']
         : correct/total = [(602, 1140), (589, 1158), (582, 1127), (612, 1158), (584, 1134), (589, 1145), (597, 1145), (568, 1127), (640, 1136), (554, 1128), (601, 1144), (562, 1125), (602, 1152), (587, 1160), (582, 1124), (592, 1145), (595, 1154), (577, 1131), (604, 1157), (592, 1141)]
         : compromised: 0.5127, honest: 0.5204
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5209 ± 0.0190 | min=0.4911 max=0.5677
         : test loss mean=0.8979 ± 0.1955
         : individual accs = ['0.528947', '0.526770', '0.493345', '0.528497', '0.522046', '0.567686', '0.521397', '0.503993', '0.562500', '0.491135', '0.530594', '0.498667', '0.536458', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (610, 1158), (556, 1127), (612, 1158), (592, 1134), (650, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (607, 1144), (561, 1125), (618, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5231, honest: 0.5194
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5744 ± 0.0988 | min=0.4933 max=0.8489
         : test loss mean=5.1284 ± 3.7532
         : individual accs = ['0.542105', '0.848877', '0.493345', '0.530225', '0.535273', '0.693450', '0.581659', '0.754215', '0.562500', '0.750887', '0.525350', '0.498667', '0.512153', '0.518103', '0.517794', '0.521397', '0.520797', '0.526083', '0.522040', '0.532866']
         : correct/total = [(618, 1140), (983, 1158), (556, 1127), (614, 1158), (607, 1134), (794, 1145), (666, 1145), (850, 1127), (639, 1136), (847, 1128), (601, 1144), (561, 1125), (590, 1152), (601, 1160), (582, 1124), (597, 1145), (601, 1154), (595, 1131), (604, 1157), (608, 1141)]
         : compromised: 0.5796, honest: 0.5709
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5649 ± 0.1043 | min=0.4933 max=0.8368
         : test loss mean=0.8801 ± 0.2910
         : individual accs = ['0.528947', '0.836788', '0.493345', '0.704663', '0.522046', '0.836681', '0.521397', '0.518190', '0.660211', '0.494681', '0.553322', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (969, 1158), (556, 1127), (816, 1158), (592, 1134), (958, 1145), (597, 1145), (584, 1127), (750, 1136), (558, 1128), (633, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5937, honest: 0.5456
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.6017 ± 0.1286 | min=0.4960 max=0.8882
         : test loss mean=5.2248 ± 3.4051
         : individual accs = ['0.538596', '0.858377', '0.496007', '0.675302', '0.551146', '0.703057', '0.550218', '0.888199', '0.672535', '0.877660', '0.525350', '0.498667', '0.527778', '0.526724', '0.517794', '0.518777', '0.515598', '0.509284', '0.522904', '0.559159']
         : correct/total = [(614, 1140), (994, 1158), (559, 1127), (782, 1158), (625, 1134), (805, 1145), (630, 1145), (1001, 1127), (764, 1136), (990, 1128), (601, 1144), (561, 1125), (608, 1152), (611, 1160), (582, 1124), (594, 1145), (595, 1154), (576, 1131), (605, 1157), (638, 1141)]
         : compromised: 0.5831, honest: 0.6140
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.5882 ± 0.1288 | min=0.4933 max=0.8672
         : test loss mean=0.8582 ± 0.3484
         : individual accs = ['0.528947', '0.867012', '0.493345', '0.813472', '0.524691', '0.867249', '0.521397', '0.627329', '0.808979', '0.540780', '0.540210', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.520596']
         : correct/total = [(603, 1140), (1004, 1158), (556, 1127), (942, 1158), (595, 1134), (993, 1145), (597, 1145), (707, 1127), (919, 1136), (610, 1128), (618, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (594, 1141)]
         : compromised: 0.6013, honest: 0.5794
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.6174 ± 0.1437 | min=0.4987 max=0.9024
         : test loss mean=5.8174 ± 3.8706
         : individual accs = ['0.539474', '0.849741', '0.508429', '0.795337', '0.537037', '0.781659', '0.545852', '0.902396', '0.776408', '0.884752', '0.525350', '0.498667', '0.530382', '0.517241', '0.517794', '0.519651', '0.519064', '0.508400', '0.522040', '0.567923']
         : correct/total = [(615, 1140), (984, 1158), (573, 1127), (921, 1158), (609, 1134), (895, 1145), (625, 1145), (1017, 1127), (882, 1136), (998, 1128), (601, 1144), (561, 1125), (611, 1152), (600, 1160), (582, 1124), (595, 1145), (599, 1154), (575, 1131), (604, 1157), (648, 1141)]
         : compromised: 0.5907, honest: 0.6351
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.6011 ± 0.1365 | min=0.4933 max=0.8690
         : test loss mean=0.8879 ± 0.4629
         : individual accs = ['0.528947', '0.860104', '0.493345', '0.861831', '0.522046', '0.868996', '0.521397', '0.722272', '0.826585', '0.625887', '0.563811', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (996, 1158), (556, 1127), (998, 1158), (592, 1134), (995, 1145), (597, 1145), (814, 1127), (939, 1136), (706, 1128), (645, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.6007, honest: 0.6014
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.6232 ± 0.1464 | min=0.4987 max=0.9068
         : test loss mean=6.3054 ± 5.6833
         : individual accs = ['0.544737', '0.862694', '0.499556', '0.798791', '0.552028', '0.783406', '0.522271', '0.906832', '0.822183', '0.878546', '0.525350', '0.498667', '0.534722', '0.524138', '0.523132', '0.555459', '0.523397', '0.508400', '0.522040', '0.576687']
         : correct/total = [(621, 1140), (999, 1158), (563, 1127), (925, 1158), (626, 1134), (897, 1145), (598, 1145), (1022, 1127), (934, 1136), (991, 1128), (601, 1144), (561, 1125), (616, 1152), (608, 1160), (588, 1124), (636, 1145), (604, 1154), (575, 1131), (604, 1157), (658, 1141)]
         : compromised: 0.5946, honest: 0.6422
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: ring, Aggregation: coarse
Attack: directed_deviation, 40.0% compromised
Final accuracy - Compromised: 0.5946, Honest: 0.6422
Overall test accuracy: mean=0.6232 ± 0.1464

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.043s (16.2%)
  - Filtering time: 0.003s (1.2%)
  - Aggregation time: 0.221s (82.6%)
  - Total time: 0.267s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
