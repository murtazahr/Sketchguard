Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
Attack: Compromised 2/20 nodes: [5, 13]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5192 ± 0.0171 | min=0.4911 max=0.5625
         : test loss mean=2.9032 ± 5.2917
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.528838', '0.562500', '0.491135', '0.525350', '0.495111', '0.554688', '0.506897', '0.516014', '0.517031', '0.515598', '0.513705', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (596, 1127), (639, 1136), (554, 1128), (601, 1144), (557, 1125), (639, 1152), (588, 1160), (580, 1124), (592, 1145), (595, 1154), (581, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5107, honest: 0.5202
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5162 ± 0.0153 | min=0.4911 max=0.5625
         : test loss mean=4.4893 ± 7.7737
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.530225', '0.522046', '0.514410', '0.521397', '0.503106', '0.562500', '0.491135', '0.525350', '0.495111', '0.520833', '0.506897', '0.517794', '0.518777', '0.515598', '0.507515', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (614, 1158), (592, 1134), (589, 1145), (597, 1145), (567, 1127), (639, 1136), (554, 1128), (601, 1144), (557, 1125), (600, 1152), (588, 1160), (582, 1124), (594, 1145), (595, 1154), (574, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5107, honest: 0.5168
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5228 ± 0.0254 | min=0.4907 max=0.5924
         : test loss mean=1.0499 ± 0.6899
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.514680', '0.522046', '0.514410', '0.521397', '0.565217', '0.592430', '0.491135', '0.525350', '0.515556', '0.542535', '0.506897', '0.491103', '0.549345', '0.515598', '0.490716', '0.522040', '0.545136']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (596, 1158), (592, 1134), (589, 1145), (597, 1145), (637, 1127), (673, 1136), (554, 1128), (601, 1144), (580, 1125), (625, 1152), (588, 1160), (552, 1124), (629, 1145), (595, 1154), (555, 1131), (604, 1157), (622, 1141)]
         : compromised: 0.5107, honest: 0.5242
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5173 ± 0.0168 | min=0.4911 max=0.5731
         : test loss mean=1.0523 ± 0.3656
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.573063', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.526731']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (651, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (601, 1141)]
         : compromised: 0.5107, honest: 0.5181
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5290 ± 0.0474 | min=0.4911 max=0.6866
         : test loss mean=1.4357 ± 1.1096
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.686620', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.645925']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (780, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (737, 1141)]
         : compromised: 0.5107, honest: 0.5310
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.5563 ± 0.0971 | min=0.4911 max=0.8203
         : test loss mean=2.6074 ± 3.4002
         : individual accs = ['0.703509', '0.508636', '0.561668', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.815141', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522904', '0.820333']
         : correct/total = [(802, 1140), (589, 1158), (633, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (926, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (605, 1157), (936, 1141)]
         : compromised: 0.5107, honest: 0.5614
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.6203 ± 0.1055 | min=0.5086 max=0.8896
         : test loss mean=0.6964 ± 0.2683
         : individual accs = ['0.719298', '0.508636', '0.535049', '0.532815', '0.532628', '0.691703', '0.550218', '0.570541', '0.846831', '0.642730', '0.578671', '0.544000', '0.693576', '0.528448', '0.548043', '0.667249', '0.668111', '0.636605', '0.522040', '0.889571']
         : correct/total = [(820, 1140), (589, 1158), (603, 1127), (617, 1158), (604, 1134), (792, 1145), (630, 1145), (643, 1127), (962, 1136), (725, 1128), (662, 1144), (612, 1125), (799, 1152), (613, 1160), (616, 1124), (764, 1145), (771, 1154), (720, 1131), (604, 1157), (1015, 1141)]
         : compromised: 0.6101, honest: 0.6215
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.5925 ± 0.1143 | min=0.4987 max=0.8556
         : test loss mean=0.7039 ± 0.2206
         : individual accs = ['0.750000', '0.508636', '0.556344', '0.528497', '0.524691', '0.762445', '0.597380', '0.503993', '0.855634', '0.541667', '0.532343', '0.498667', '0.522569', '0.606897', '0.517794', '0.517031', '0.643847', '0.508400', '0.522040', '0.851884']
         : correct/total = [(855, 1140), (589, 1158), (627, 1127), (612, 1158), (595, 1134), (873, 1145), (684, 1145), (568, 1127), (972, 1136), (611, 1128), (609, 1144), (561, 1125), (602, 1152), (704, 1160), (582, 1124), (592, 1145), (743, 1154), (575, 1131), (604, 1157), (972, 1141)]
         : compromised: 0.6847, honest: 0.5823
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.5820 ± 0.1094 | min=0.4911 max=0.8548
         : test loss mean=1.1925 ± 1.0701
         : individual accs = ['0.777193', '0.522453', '0.578527', '0.528497', '0.541446', '0.544105', '0.648035', '0.503993', '0.854754', '0.491135', '0.556818', '0.498667', '0.522569', '0.533621', '0.517794', '0.517031', '0.574523', '0.508400', '0.572169', '0.849255']
         : correct/total = [(886, 1140), (605, 1158), (652, 1127), (612, 1158), (614, 1134), (623, 1145), (742, 1145), (568, 1127), (971, 1136), (554, 1128), (637, 1144), (561, 1125), (602, 1152), (619, 1160), (582, 1124), (592, 1145), (663, 1154), (575, 1131), (662, 1157), (969, 1141)]
         : compromised: 0.5389, honest: 0.5868
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.6236 ± 0.1200 | min=0.4911 max=0.8878
         : test loss mean=1.0250 ± 0.8744
         : individual accs = ['0.829825', '0.568221', '0.639752', '0.569085', '0.558201', '0.514410', '0.636681', '0.579414', '0.875880', '0.491135', '0.525350', '0.525333', '0.753472', '0.506897', '0.531139', '0.662882', '0.596187', '0.544651', '0.675886', '0.887818']
         : correct/total = [(946, 1140), (658, 1158), (721, 1127), (659, 1158), (633, 1134), (589, 1145), (729, 1145), (653, 1127), (995, 1136), (554, 1128), (601, 1144), (591, 1125), (868, 1152), (588, 1160), (597, 1124), (759, 1145), (688, 1154), (616, 1131), (782, 1157), (1013, 1141)]
         : compromised: 0.5107, honest: 0.6362
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: directed_deviation, 10.0% compromised
Final accuracy - Compromised: 0.5107, Honest: 0.6362
Overall test accuracy: mean=0.6236 ± 0.1200

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.039s (8.5%)
  - Filtering time: 0.005s (1.1%)
  - Aggregation time: 0.415s (90.4%)
  - Total time: 0.459s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
