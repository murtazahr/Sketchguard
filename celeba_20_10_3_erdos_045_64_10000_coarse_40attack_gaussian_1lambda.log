Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 99
Attack: Compromised 8/20 nodes: [1, 5, 11, 12, 13, 14, 17, 18]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8460 ± 0.0809
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5124, honest: 0.5190
         : coarse stats = ['Node 0: acc_rate=0.583', 'Node 1: acc_rate=0.700', 'Node 2: acc_rate=0.500']...
Round 002: test acc mean=0.5167 ± 0.0149 | min=0.4911 max=0.5625
         : test loss mean=0.7680 ± 0.0749
         : individual accs = ['0.528947', '0.508636', '0.495120', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.526224', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.522349']
         : correct/total = [(603, 1140), (589, 1158), (558, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (602, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (596, 1141)]
         : compromised: 0.5124, honest: 0.5196
         : coarse stats = ['Node 0: acc_rate=0.583', 'Node 1: acc_rate=0.700', 'Node 2: acc_rate=0.500']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5124, honest: 0.5190
         : coarse stats = ['Node 0: acc_rate=0.722', 'Node 1: acc_rate=0.800', 'Node 2: acc_rate=0.667']...
Round 004: test acc mean=0.5012 ± 0.0209 | min=0.4366 max=0.5326
         : test loss mean=nan ± nan
         : individual accs = ['0.490351', '0.508636', '0.493345', '0.476684', '0.514109', '0.512664', '0.513537', '0.507542', '0.532570', '0.491135', '0.525350', '0.503111', '0.436632', '0.505172', '0.513345', '0.470742', '0.502600', '0.502210', '0.523768', '0.499562']
         : correct/total = [(559, 1140), (589, 1158), (556, 1127), (552, 1158), (583, 1134), (587, 1145), (588, 1145), (572, 1127), (605, 1136), (554, 1128), (601, 1144), (566, 1125), (503, 1152), (586, 1160), (577, 1124), (539, 1145), (580, 1154), (568, 1131), (606, 1157), (570, 1141)]
         : compromised: 0.5007, honest: 0.5015
         : coarse stats = ['Node 0: acc_rate=0.729', 'Node 1: acc_rate=0.750', 'Node 2: acc_rate=0.750']...
Round 005: test acc mean=0.4931 ± 0.0181 | min=0.4655 max=0.5253
         : test loss mean=402.0306 ± 495.7100
         : individual accs = ['0.469298', '0.522453', '0.509317', '0.465458', '0.522046', '0.490830', '0.478603', '0.518190', '0.471831', '0.491135', '0.525350', '0.501333', '0.477431', '0.493103', '0.476868', '0.481223', '0.484402', '0.491600', '0.503889', '0.488168']
         : correct/total = [(535, 1140), (605, 1158), (574, 1127), (539, 1158), (592, 1134), (562, 1145), (548, 1145), (584, 1127), (536, 1136), (554, 1128), (601, 1144), (564, 1125), (550, 1152), (572, 1160), (536, 1124), (551, 1145), (559, 1154), (556, 1131), (583, 1157), (557, 1141)]
         : compromised: 0.4947, honest: 0.4921
         : coarse stats = ['Node 0: acc_rate=0.733', 'Node 1: acc_rate=0.800', 'Node 2: acc_rate=0.775']...
Round 006: test acc mean=0.5127 ± 0.0240 | min=0.4707 max=0.5555
         : test loss mean=32443.3028 ± 135576.4978
         : individual accs = ['0.482456', '0.481865', '0.494232', '0.528497', '0.521164', '0.517904', '0.540611', '0.502218', '0.555458', '0.491135', '0.481643', '0.539556', '0.513889', '0.514655', '0.516904', '0.470742', '0.551127', '0.503979', '0.539326', '0.506573']
         : correct/total = [(550, 1140), (558, 1158), (557, 1127), (612, 1158), (591, 1134), (593, 1145), (619, 1145), (566, 1127), (631, 1136), (554, 1128), (551, 1144), (607, 1125), (592, 1152), (597, 1160), (581, 1124), (539, 1145), (636, 1154), (570, 1131), (624, 1157), (578, 1141)]
         : compromised: 0.5160, honest: 0.5105
         : coarse stats = ['Node 0: acc_rate=0.750', 'Node 1: acc_rate=0.717', 'Node 2: acc_rate=0.792']...
Round 007: test acc mean=0.4897 ± 0.0133 | min=0.4711 max=0.5092
         : test loss mean=0.9962 ± 0.4256
         : individual accs = ['0.471053', '0.491364', '0.506655', '0.471503', '0.477954', '0.497817', '0.478603', '0.496007', '0.480634', '0.508865', '0.474650', '0.501333', '0.477431', '0.493103', '0.482206', '0.482969', '0.506066', '0.508400', '0.477960', '0.509202']
         : correct/total = [(537, 1140), (569, 1158), (571, 1127), (546, 1158), (542, 1134), (570, 1145), (548, 1145), (559, 1127), (546, 1136), (574, 1128), (543, 1144), (564, 1125), (550, 1152), (572, 1160), (542, 1124), (553, 1145), (584, 1154), (575, 1131), (553, 1157), (581, 1141)]
         : compromised: 0.4912, honest: 0.4887
         : coarse stats = ['Node 0: acc_rate=0.679', 'Node 1: acc_rate=0.714', 'Node 2: acc_rate=0.750']...
Round 008: test acc mean=0.4929 ± 0.0227 | min=0.4711 max=0.5713
         : test loss mean=0.8020 ± 0.1619
         : individual accs = ['0.471053', '0.491364', '0.506655', '0.471503', '0.477954', '0.487336', '0.478603', '0.496007', '0.571303', '0.508865', '0.474650', '0.501333', '0.480903', '0.493103', '0.484875', '0.482969', '0.527730', '0.491600', '0.477960', '0.482033']
         : correct/total = [(537, 1140), (569, 1158), (571, 1127), (546, 1158), (542, 1134), (558, 1145), (548, 1145), (559, 1127), (649, 1136), (574, 1128), (543, 1144), (564, 1125), (554, 1152), (572, 1160), (545, 1124), (553, 1145), (609, 1154), (556, 1131), (553, 1157), (550, 1141)]
         : compromised: 0.4886, honest: 0.4958
         : coarse stats = ['Node 0: acc_rate=0.656', 'Node 1: acc_rate=0.713', 'Node 2: acc_rate=0.719']...
Round 009: test acc mean=0.5319 ± 0.0441 | min=0.4715 max=0.6135
         : test loss mean=0.6869 ± 0.0107
         : individual accs = ['0.547368', '0.507772', '0.590062', '0.471503', '0.573192', '0.610480', '0.521397', '0.515528', '0.548415', '0.508865', '0.474650', '0.501333', '0.562500', '0.504310', '0.587189', '0.482096', '0.613518', '0.540230', '0.495246', '0.482033']
         : correct/total = [(624, 1140), (588, 1158), (665, 1127), (546, 1158), (650, 1134), (699, 1145), (597, 1145), (581, 1127), (623, 1136), (574, 1128), (543, 1144), (564, 1125), (648, 1152), (585, 1160), (660, 1124), (552, 1145), (708, 1154), (611, 1131), (573, 1157), (550, 1141)]
         : compromised: 0.5386, honest: 0.5274
         : coarse stats = ['Node 0: acc_rate=0.639', 'Node 1: acc_rate=0.711', 'Node 2: acc_rate=0.694']...
Round 010: test acc mean=0.5741 ± 0.0557 | min=0.4876 max=0.6411
         : test loss mean=0.6716 ± 0.0192
         : individual accs = ['0.610526', '0.588083', '0.627329', '0.528497', '0.641093', '0.624454', '0.521397', '0.503993', '0.589789', '0.487589', '0.525350', '0.501333', '0.621528', '0.603448', '0.635231', '0.517031', '0.629116', '0.598585', '0.639585', '0.488168']
         : correct/total = [(696, 1140), (681, 1158), (707, 1127), (612, 1158), (727, 1134), (715, 1145), (597, 1145), (568, 1127), (670, 1136), (550, 1128), (601, 1144), (564, 1125), (716, 1152), (700, 1160), (714, 1124), (592, 1145), (726, 1154), (677, 1131), (740, 1157), (557, 1141)]
         : compromised: 0.6015, honest: 0.5558
         : coarse stats = ['Node 0: acc_rate=0.633', 'Node 1: acc_rate=0.710', 'Node 2: acc_rate=0.675']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: gaussian, 40.0% compromised
Final accuracy - Compromised: 0.6015, Honest: 0.5558
Overall test accuracy: mean=0.5741 ± 0.0557

=== COARSE SUMMARY ===
Node 0: acceptance=0.633
Node 1: acceptance=0.710
Node 2: acceptance=0.675
Node 3: acceptance=0.714
Node 4: acceptance=0.644
Node 5: acceptance=0.630
Node 6: acceptance=0.633
Node 7: acceptance=0.627
Node 8: acceptance=0.571
Node 9: acceptance=0.709
Node 10: acceptance=0.738
Node 11: acceptance=0.633
Node 12: acceptance=0.675
Node 13: acceptance=0.711
Node 14: acceptance=0.643
Node 15: acceptance=0.644
Node 16: acceptance=0.643
Node 17: acceptance=0.725
Node 18: acceptance=0.683
Node 19: acceptance=0.620

Performance Summary:
  - Sketching time: 0.044s (7.3%)
  - Filtering time: 0.008s (1.3%)
  - Aggregation time: 0.546s (91.4%)
  - Total time: 0.598s
  - Mean acceptance rate: 0.663

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
