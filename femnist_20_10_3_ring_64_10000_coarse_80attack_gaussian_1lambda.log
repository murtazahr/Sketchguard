Device: cuda
Seed: 987654321
Loading 36 LEAF FEMNIST train files...
LEAF FEMNIST train: 3597 users, 734463 samples
Loading 36 LEAF FEMNIST test files...
LEAF FEMNIST test: 3597 users, 83388 samples
Found 3597 train users, 3597 test users, 3597 common users
User sample counts range: 525 (max) to 17 (min)
Distributed ALL 3597 users across 20 clients
Users per client: 179 (with 17 clients getting +1 user)
Train partition sizes: [36360, 37070, 35957, 38262, 36024, 37732, 36921, 38328, 36867, 37683, 36507, 36915, 36007, 37001, 35681, 35453, 36585, 36801, 35964, 36345]
Test partition sizes: [4128, 4203, 4081, 4333, 4091, 4287, 4193, 4349, 4191, 4277, 4143, 4193, 4093, 4197, 4052, 4029, 4153, 4183, 4084, 4128]
  Client 0: 36360 train samples, 62 unique classes
  Client 1: 37070 train samples, 62 unique classes
  Client 2: 35957 train samples, 62 unique classes
  Client 3: 38262 train samples, 62 unique classes
  Client 4: 36024 train samples, 62 unique classes
  Client 5: 37732 train samples, 62 unique classes
  Client 6: 36921 train samples, 62 unique classes
  Client 7: 38328 train samples, 62 unique classes
  Client 8: 36867 train samples, 62 unique classes
  Client 9: 37683 train samples, 62 unique classes
  Client 10: 36507 train samples, 62 unique classes
  Client 11: 36915 train samples, 62 unique classes
  Client 12: 36007 train samples, 62 unique classes
  Client 13: 37001 train samples, 62 unique classes
  Client 14: 35681 train samples, 62 unique classes
  Client 15: 35453 train samples, 62 unique classes
  Client 16: 36585 train samples, 62 unique classes
  Client 17: 36801 train samples, 62 unique classes
  Client 18: 35964 train samples, 62 unique classes
  Client 19: 36345 train samples, 62 unique classes
Will sample 10000 samples per client per epoch
Graph: ring, nodes: 20, edges: 20
Attack: Compromised 16/20 nodes: [1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 6,603,710 → Sketch size: 1000
  Compression ratio: 6603.7x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 6,603,710 parameters
  - Sketch size: 1000
  - Compression ratio: 6603.7x
  - Complexity: O(d + N×k) = O(6,603,710 + 20×1000)
  - Theoretical speedup vs BALANCE: 19.9x
Initial test acc across nodes: mean=0.0162 ± 0.0138
Round 001: test acc mean=0.1832 ± 0.2097 | min=0.0027 max=0.4755
         : test loss mean=537586061.5997 ± 475366586.0029
         : individual accs = ['0.002665', '0.447537', '0.012497', '0.435726', '0.006111', '0.441801', '0.451944', '0.005978', '0.460511', '0.015665', '0.027034', '0.011925', '0.032495', '0.014772', '0.014067', '0.455944', '0.009391', '0.475496', '0.007591', '0.334787']
         : correct/total = [(11, 4128), (1881, 4203), (51, 4081), (1888, 4333), (25, 4091), (1894, 4287), (1895, 4193), (26, 4349), (1930, 4191), (67, 4277), (112, 4143), (50, 4193), (133, 4093), (62, 4197), (57, 4052), (1837, 4029), (39, 4153), (1989, 4183), (31, 4084), (1382, 4128)]
         : compromised: 0.2275, honest: 0.0060
         : coarse stats = ['Node 0: acc_rate=0.000', 'Node 1: acc_rate=0.500', 'Node 2: acc_rate=0.000']...
Round 002: test acc mean=0.0406 ± 0.0167 | min=0.0045 max=0.0548
         : test loss mean=nan ± nan
         : individual accs = ['0.050630', '0.004521', '0.045577', '0.007154', '0.045710', '0.052484', '0.010255', '0.049897', '0.051062', '0.050736', '0.048033', '0.048891', '0.047398', '0.034787', '0.054788', '0.048151', '0.047436', '0.049247', '0.054358', '0.011628']
         : correct/total = [(209, 4128), (19, 4203), (186, 4081), (31, 4333), (187, 4091), (225, 4287), (43, 4193), (217, 4349), (214, 4191), (217, 4277), (199, 4143), (205, 4193), (194, 4093), (146, 4197), (222, 4052), (194, 4029), (197, 4153), (206, 4183), (222, 4084), (48, 4128)]
         : compromised: 0.0387, honest: 0.0484
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.250', 'Node 2: acc_rate=0.500']...
Round 003: test acc mean=0.0489 ± 0.0047 | min=0.0348 max=0.0550
         : test loss mean=nan ± nan
         : individual accs = ['0.050630', '0.048775', '0.045577', '0.046619', '0.045710', '0.052484', '0.041498', '0.049897', '0.051062', '0.050736', '0.048033', '0.048891', '0.047398', '0.034787', '0.054788', '0.054604', '0.047436', '0.049247', '0.054358', '0.054990']
         : correct/total = [(209, 4128), (205, 4203), (186, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (217, 4349), (214, 4191), (217, 4277), (199, 4143), (205, 4193), (194, 4093), (146, 4197), (222, 4052), (220, 4029), (197, 4153), (206, 4183), (222, 4084), (227, 4128)]
         : compromised: 0.0490, honest: 0.0484
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.167', 'Node 2: acc_rate=0.667']...
Round 004: test acc mean=0.0489 ± 0.0047 | min=0.0348 max=0.0550
         : test loss mean=nan ± nan
         : individual accs = ['0.050630', '0.048775', '0.045577', '0.046619', '0.045710', '0.052484', '0.041498', '0.049897', '0.051062', '0.050736', '0.048033', '0.048891', '0.047398', '0.034787', '0.054788', '0.054604', '0.047436', '0.049247', '0.054358', '0.054990']
         : correct/total = [(209, 4128), (205, 4203), (186, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (217, 4349), (214, 4191), (217, 4277), (199, 4143), (205, 4193), (194, 4093), (146, 4197), (222, 4052), (220, 4029), (197, 4153), (206, 4183), (222, 4084), (227, 4128)]
         : compromised: 0.0490, honest: 0.0484
         : coarse stats = ['Node 0: acc_rate=0.750', 'Node 1: acc_rate=0.125', 'Node 2: acc_rate=0.750']...
Round 005: test acc mean=0.0489 ± 0.0047 | min=0.0348 max=0.0550
         : test loss mean=nan ± nan
         : individual accs = ['0.050630', '0.048775', '0.045577', '0.046619', '0.045710', '0.052484', '0.041498', '0.049897', '0.051062', '0.050736', '0.048033', '0.048891', '0.047398', '0.034787', '0.054788', '0.054604', '0.047436', '0.049247', '0.054358', '0.054990']
         : correct/total = [(209, 4128), (205, 4203), (186, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (217, 4349), (214, 4191), (217, 4277), (199, 4143), (205, 4193), (194, 4093), (146, 4197), (222, 4052), (220, 4029), (197, 4153), (206, 4183), (222, 4084), (227, 4128)]
         : compromised: 0.0490, honest: 0.0484
         : coarse stats = ['Node 0: acc_rate=0.800', 'Node 1: acc_rate=0.100', 'Node 2: acc_rate=0.800']...
Round 006: test acc mean=0.0489 ± 0.0047 | min=0.0348 max=0.0550
         : test loss mean=nan ± nan
         : individual accs = ['0.050630', '0.048775', '0.045577', '0.046619', '0.045710', '0.052484', '0.041498', '0.049897', '0.051062', '0.050736', '0.048033', '0.048891', '0.047398', '0.034787', '0.054788', '0.054604', '0.047436', '0.049247', '0.054358', '0.054990']
         : correct/total = [(209, 4128), (205, 4203), (186, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (217, 4349), (214, 4191), (217, 4277), (199, 4143), (205, 4193), (194, 4093), (146, 4197), (222, 4052), (220, 4029), (197, 4153), (206, 4183), (222, 4084), (227, 4128)]
         : compromised: 0.0490, honest: 0.0484
         : coarse stats = ['Node 0: acc_rate=0.833', 'Node 1: acc_rate=0.083', 'Node 2: acc_rate=0.833']...
Round 007: test acc mean=0.0494 ± 0.0035 | min=0.0415 max=0.0550
         : test loss mean=nan ± nan
         : individual accs = ['0.050630', '0.048775', '0.045577', '0.046619', '0.045710', '0.052484', '0.041498', '0.049897', '0.051062', '0.050736', '0.048033', '0.048891', '0.047398', '0.045509', '0.054788', '0.054604', '0.047436', '0.049247', '0.054358', '0.054990']
         : correct/total = [(209, 4128), (205, 4203), (186, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (217, 4349), (214, 4191), (217, 4277), (199, 4143), (205, 4193), (194, 4093), (191, 4197), (222, 4052), (220, 4029), (197, 4153), (206, 4183), (222, 4084), (227, 4128)]
         : compromised: 0.0497, honest: 0.0484
         : coarse stats = ['Node 0: acc_rate=0.714', 'Node 1: acc_rate=0.071', 'Node 2: acc_rate=0.714']...
Round 008: test acc mean=0.0494 ± 0.0035 | min=0.0415 max=0.0550
         : test loss mean=nan ± nan
         : individual accs = ['0.049661', '0.048775', '0.045577', '0.046619', '0.045710', '0.052484', '0.041498', '0.049897', '0.051062', '0.050736', '0.048033', '0.048891', '0.047398', '0.045509', '0.054788', '0.054604', '0.047436', '0.049247', '0.054358', '0.054990']
         : correct/total = [(205, 4128), (205, 4203), (186, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (217, 4349), (214, 4191), (217, 4277), (199, 4143), (205, 4193), (194, 4093), (191, 4197), (222, 4052), (220, 4029), (197, 4153), (206, 4183), (222, 4084), (227, 4128)]
         : compromised: 0.0497, honest: 0.0482
         : coarse stats = ['Node 0: acc_rate=0.625', 'Node 1: acc_rate=0.062', 'Node 2: acc_rate=0.625']...
Round 009: test acc mean=0.0494 ± 0.0035 | min=0.0415 max=0.0550
         : test loss mean=nan ± nan
         : individual accs = ['0.049661', '0.048775', '0.045577', '0.046619', '0.045710', '0.052484', '0.041498', '0.049897', '0.051062', '0.050736', '0.048033', '0.048891', '0.047398', '0.045509', '0.054788', '0.054604', '0.047436', '0.049247', '0.054358', '0.054990']
         : correct/total = [(205, 4128), (205, 4203), (186, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (217, 4349), (214, 4191), (217, 4277), (199, 4143), (205, 4193), (194, 4093), (191, 4197), (222, 4052), (220, 4029), (197, 4153), (206, 4183), (222, 4084), (227, 4128)]
         : compromised: 0.0497, honest: 0.0482
         : coarse stats = ['Node 0: acc_rate=0.556', 'Node 1: acc_rate=0.056', 'Node 2: acc_rate=0.556']...
Round 010: test acc mean=0.0502 ± 0.0041 | min=0.0415 max=0.0591
         : test loss mean=nan ± nan
         : individual accs = ['0.059109', '0.048775', '0.052928', '0.046619', '0.045710', '0.052484', '0.041498', '0.049897', '0.051062', '0.050736', '0.048033', '0.048891', '0.047398', '0.045509', '0.054788', '0.054604', '0.047436', '0.049247', '0.054358', '0.054990']
         : correct/total = [(244, 4128), (205, 4203), (216, 4081), (202, 4333), (187, 4091), (225, 4287), (174, 4193), (217, 4349), (214, 4191), (217, 4277), (199, 4143), (205, 4193), (194, 4093), (191, 4197), (222, 4052), (220, 4029), (197, 4153), (206, 4183), (222, 4084), (227, 4128)]
         : compromised: 0.0501, honest: 0.0505
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.050', 'Node 2: acc_rate=0.500']...

=== FINAL RESULTS ===
Dataset: femnist, Nodes: 20, Graph: ring, Aggregation: coarse
Attack: gaussian, 80.0% compromised
Final accuracy - Compromised: 0.0501, Honest: 0.0505
Overall test accuracy: mean=0.0502 ± 0.0041

=== COARSE SUMMARY ===
Node 0: acceptance=0.500
Node 1: acceptance=0.050
Node 2: acceptance=0.500
Node 3: acceptance=0.050
Node 4: acceptance=0.000
Node 5: acceptance=0.050
Node 6: acceptance=0.050
Node 7: acceptance=0.000
Node 8: acceptance=0.050
Node 9: acceptance=0.000
Node 10: acceptance=0.000
Node 11: acceptance=0.000
Node 12: acceptance=0.000
Node 13: acceptance=0.500
Node 14: acceptance=0.000
Node 15: acceptance=0.050
Node 16: acceptance=0.000
Node 17: acceptance=0.050
Node 18: acceptance=0.000
Node 19: acceptance=0.050

Performance Summary:
  - Sketching time: 20.607s (98.7%)
  - Filtering time: 0.014s (0.1%)
  - Aggregation time: 0.249s (1.2%)
  - Total time: 20.871s
  - Mean acceptance rate: 0.095

COARSE Algorithm Properties:
  - Original dimension: 6,603,710
  - Sketch size: 1000
  - Compression ratio: 19.9x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
