Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 99
Attack: Compromised 16/20 nodes: [1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
Attack type: directed_deviation, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5144 ± 0.0176 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.495614', '0.506908', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.494232', '0.562500', '0.491135', '0.550699', '0.498667', '0.522569', '0.506897', '0.508007', '0.517031', '0.515598', '0.508400', '0.515125', '0.515337']
         : correct/total = [(565, 1140), (587, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (557, 1127), (639, 1136), (554, 1128), (630, 1144), (561, 1125), (602, 1152), (588, 1160), (571, 1124), (592, 1145), (595, 1154), (575, 1131), (596, 1157), (588, 1141)]
         : compromised: 0.5163, honest: 0.5069
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5099 ± 0.0150 | min=0.4718 max=0.5328
         : test loss mean=46.4931 ± 34.7666
         : individual accs = ['0.478947', '0.506908', '0.524401', '0.525043', '0.504409', '0.497817', '0.508297', '0.496894', '0.471831', '0.516844', '0.519231', '0.509333', '0.513889', '0.512069', '0.515125', '0.532751', '0.517331', '0.532272', '0.512532', '0.503067']
         : correct/total = [(546, 1140), (587, 1158), (591, 1127), (608, 1158), (572, 1134), (570, 1145), (582, 1145), (560, 1127), (536, 1136), (583, 1128), (594, 1144), (573, 1125), (592, 1152), (594, 1160), (579, 1124), (610, 1145), (597, 1154), (602, 1131), (593, 1157), (574, 1141)]
         : compromised: 0.5126, honest: 0.4994
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=1.2984 ± 0.2335
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5160, honest: 0.5176
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5823 ± 0.0308 | min=0.5219 max=0.6454
         : test loss mean=8.7981 ± 2.9180
         : individual accs = ['0.521930', '0.578584', '0.611358', '0.564767', '0.585538', '0.547598', '0.584279', '0.582964', '0.583627', '0.645390', '0.634615', '0.572444', '0.605903', '0.542241', '0.572954', '0.565939', '0.587522', '0.610080', '0.610199', '0.537248']
         : correct/total = [(595, 1140), (670, 1158), (689, 1127), (654, 1158), (664, 1134), (627, 1145), (669, 1145), (657, 1127), (663, 1136), (728, 1128), (726, 1144), (644, 1125), (698, 1152), (629, 1160), (644, 1124), (648, 1145), (678, 1154), (690, 1131), (706, 1157), (613, 1141)]
         : compromised: 0.5855, honest: 0.5695
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 005: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8400 ± 0.0745
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5160, honest: 0.5176
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 006: test acc mean=0.6276 ± 0.0329 | min=0.5837 max=0.6941
         : test loss mean=7.5035 ± 2.2606
         : individual accs = ['0.598246', '0.677893', '0.668146', '0.594128', '0.619929', '0.621834', '0.643668', '0.589175', '0.597711', '0.694149', '0.607517', '0.599111', '0.621528', '0.600000', '0.626335', '0.655895', '0.624783', '0.685234', '0.642178', '0.583699']
         : correct/total = [(682, 1140), (785, 1158), (753, 1127), (688, 1158), (703, 1134), (712, 1145), (737, 1145), (664, 1127), (679, 1136), (783, 1128), (695, 1144), (674, 1125), (716, 1152), (696, 1160), (704, 1124), (751, 1145), (721, 1154), (775, 1131), (743, 1157), (666, 1141)]
         : compromised: 0.6324, honest: 0.6080
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 007: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8091 ± 0.0589
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5160, honest: 0.5176
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 008: test acc mean=0.6491 ± 0.0337 | min=0.6039 max=0.7234
         : test loss mean=6.9782 ± 2.3716
         : individual accs = ['0.616667', '0.691710', '0.653949', '0.619171', '0.622575', '0.673362', '0.666376', '0.607808', '0.603873', '0.723404', '0.653846', '0.623111', '0.663194', '0.627586', '0.622776', '0.669869', '0.639515', '0.719717', '0.655143', '0.628396']
         : correct/total = [(703, 1140), (801, 1158), (737, 1127), (717, 1158), (706, 1134), (771, 1145), (763, 1145), (685, 1127), (686, 1136), (816, 1128), (748, 1144), (701, 1125), (764, 1152), (728, 1160), (700, 1124), (767, 1145), (738, 1154), (814, 1131), (758, 1157), (717, 1141)]
         : compromised: 0.6560, honest: 0.6216
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 009: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8070 ± 0.0704
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5160, honest: 0.5176
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 010: test acc mean=0.6901 ± 0.0377 | min=0.6379 max=0.7798
         : test loss mean=5.2092 ± 1.6500
         : individual accs = ['0.659649', '0.768566', '0.692990', '0.670121', '0.687831', '0.705677', '0.718777', '0.660160', '0.640845', '0.749113', '0.695804', '0.660444', '0.677951', '0.637931', '0.663701', '0.682969', '0.681976', '0.779841', '0.697494', '0.670465']
         : correct/total = [(752, 1140), (890, 1158), (781, 1127), (776, 1158), (780, 1134), (808, 1145), (823, 1145), (744, 1127), (728, 1136), (845, 1128), (796, 1144), (743, 1125), (781, 1152), (740, 1160), (746, 1124), (782, 1145), (787, 1154), (882, 1131), (807, 1157), (765, 1141)]
         : compromised: 0.6945, honest: 0.6724
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: directed_deviation, 80.0% compromised
Final accuracy - Compromised: 0.6945, Honest: 0.6724
Overall test accuracy: mean=0.6901 ± 0.0377

=== COARSE SUMMARY ===
Node 0: acceptance=1.000
Node 1: acceptance=1.000
Node 2: acceptance=1.000
Node 3: acceptance=1.000
Node 4: acceptance=1.000
Node 5: acceptance=1.000
Node 6: acceptance=1.000
Node 7: acceptance=1.000
Node 8: acceptance=1.000
Node 9: acceptance=1.000
Node 10: acceptance=1.000
Node 11: acceptance=1.000
Node 12: acceptance=1.000
Node 13: acceptance=1.000
Node 14: acceptance=1.000
Node 15: acceptance=1.000
Node 16: acceptance=1.000
Node 17: acceptance=1.000
Node 18: acceptance=1.000
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.055s (6.9%)
  - Filtering time: 0.008s (1.0%)
  - Aggregation time: 0.738s (92.1%)
  - Total time: 0.801s
  - Mean acceptance rate: 1.000

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
