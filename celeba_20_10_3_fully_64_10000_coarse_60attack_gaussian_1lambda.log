Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: fully, nodes: 20, edges: 190
Attack: Compromised 12/20 nodes: [1, 2, 3, 5, 8, 11, 12, 13, 14, 15, 17, 18]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8340 ± 0.0709
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5167, honest: 0.5158
         : coarse stats = ['Node 0: acc_rate=0.368', 'Node 1: acc_rate=0.421', 'Node 2: acc_rate=0.421']...
Round 002: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.7905 ± 0.0745
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5167, honest: 0.5158
         : coarse stats = ['Node 0: acc_rate=0.368', 'Node 1: acc_rate=0.421', 'Node 2: acc_rate=0.421']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5167, honest: 0.5158
         : coarse stats = ['Node 0: acc_rate=0.579', 'Node 1: acc_rate=0.614', 'Node 2: acc_rate=0.614']...
Round 004: test acc mean=0.4886 ± 0.0182 | min=0.4375 max=0.5307
         : test loss mean=364.7531 ± 134.5148
         : individual accs = ['0.472807', '0.491364', '0.513753', '0.478411', '0.479718', '0.488210', '0.479476', '0.498669', '0.437500', '0.508865', '0.481643', '0.530667', '0.477431', '0.501724', '0.483986', '0.487336', '0.494801', '0.497790', '0.486603', '0.481157']
         : correct/total = [(539, 1140), (569, 1158), (579, 1127), (554, 1158), (544, 1134), (559, 1145), (549, 1145), (562, 1127), (497, 1136), (574, 1128), (551, 1144), (597, 1125), (550, 1152), (582, 1160), (544, 1124), (558, 1145), (571, 1154), (563, 1131), (563, 1157), (549, 1141)]
         : compromised: 0.4896, honest: 0.4871
         : coarse stats = ['Node 0: acc_rate=0.684', 'Node 1: acc_rate=0.711', 'Node 2: acc_rate=0.711']...
Round 005: test acc mean=0.5096 ± 0.0132 | min=0.4718 max=0.5285
         : test loss mean=154.5406 ± 73.3108
         : individual accs = ['0.508772', '0.501727', '0.506655', '0.528497', '0.521164', '0.514410', '0.522271', '0.502218', '0.471831', '0.487589', '0.515734', '0.501333', '0.515625', '0.508621', '0.500890', '0.527511', '0.516464', '0.505747', '0.522040', '0.513585']
         : correct/total = [(580, 1140), (581, 1158), (571, 1127), (612, 1158), (591, 1134), (589, 1145), (598, 1145), (566, 1127), (536, 1136), (550, 1128), (590, 1144), (564, 1125), (594, 1152), (590, 1160), (563, 1124), (604, 1145), (596, 1154), (572, 1131), (604, 1157), (586, 1141)]
         : compromised: 0.5087, honest: 0.5110
         : coarse stats = ['Node 0: acc_rate=0.747', 'Node 1: acc_rate=0.768', 'Node 2: acc_rate=0.768']...
Round 006: test acc mean=0.5100 ± 0.0205 | min=0.4489 max=0.5581
         : test loss mean=151.3588 ± 57.6709
         : individual accs = ['0.527193', '0.505181', '0.494232', '0.528497', '0.510582', '0.448908', '0.511790', '0.504880', '0.558099', '0.487589', '0.525350', '0.496889', '0.496528', '0.506897', '0.516904', '0.517904', '0.513865', '0.508400', '0.522040', '0.518843']
         : correct/total = [(601, 1140), (585, 1158), (557, 1127), (612, 1158), (579, 1134), (514, 1145), (586, 1145), (569, 1127), (634, 1136), (550, 1128), (601, 1144), (559, 1125), (572, 1152), (588, 1160), (581, 1124), (593, 1145), (593, 1154), (575, 1131), (604, 1157), (592, 1141)]
         : compromised: 0.5084, honest: 0.5125
         : coarse stats = ['Node 0: acc_rate=0.789', 'Node 1: acc_rate=0.807', 'Node 2: acc_rate=0.807']...
Round 007: test acc mean=0.5368 ± 0.0432 | min=0.4724 max=0.6232
         : test loss mean=0.7037 ± 0.0332
         : individual accs = ['0.474561', '0.510363', '0.568767', '0.472366', '0.565256', '0.488210', '0.579039', '0.622005', '0.564261', '0.623227', '0.554196', '0.565333', '0.517361', '0.519828', '0.517794', '0.482969', '0.518198', '0.506631', '0.522904', '0.563541']
         : correct/total = [(541, 1140), (591, 1158), (641, 1127), (547, 1158), (641, 1134), (559, 1145), (663, 1145), (701, 1127), (641, 1136), (703, 1128), (634, 1144), (636, 1125), (596, 1152), (603, 1160), (582, 1124), (553, 1145), (598, 1154), (573, 1131), (605, 1157), (643, 1141)]
         : compromised: 0.5197, honest: 0.5625
         : coarse stats = ['Node 0: acc_rate=0.729', 'Node 1: acc_rate=0.752', 'Node 2: acc_rate=0.752']...
Round 008: test acc mean=0.5986 ± 0.0368 | min=0.5284 max=0.6428
         : test loss mean=0.6611 ± 0.0197
         : individual accs = ['0.606140', '0.627807', '0.623780', '0.537133', '0.641093', '0.528384', '0.642795', '0.621118', '0.614437', '0.640957', '0.606643', '0.626667', '0.534722', '0.568966', '0.562278', '0.580786', '0.610052', '0.607427', '0.557476', '0.632778']
         : correct/total = [(691, 1140), (727, 1158), (703, 1127), (622, 1158), (727, 1134), (605, 1145), (736, 1145), (700, 1127), (698, 1136), (723, 1128), (694, 1144), (705, 1125), (616, 1152), (660, 1160), (632, 1124), (665, 1145), (704, 1154), (687, 1131), (645, 1157), (722, 1141)]
         : compromised: 0.5808, honest: 0.6252
         : coarse stats = ['Node 0: acc_rate=0.684', 'Node 1: acc_rate=0.711', 'Node 2: acc_rate=0.711']...
Round 009: test acc mean=0.6505 ± 0.0213 | min=0.6000 max=0.6786
         : test loss mean=0.6249 ± 0.0166
         : individual accs = ['0.647368', '0.649396', '0.666371', '0.614853', '0.653439', '0.678603', '0.668996', '0.666371', '0.644366', '0.669326', '0.670455', '0.653333', '0.618924', '0.628448', '0.653025', '0.600000', '0.655979', '0.671088', '0.629213', '0.671341']
         : correct/total = [(738, 1140), (752, 1158), (751, 1127), (712, 1158), (741, 1134), (777, 1145), (766, 1145), (751, 1127), (732, 1136), (755, 1128), (767, 1144), (735, 1125), (713, 1152), (729, 1160), (734, 1124), (687, 1145), (757, 1154), (759, 1131), (728, 1157), (766, 1141)]
         : compromised: 0.6423, honest: 0.6629
         : coarse stats = ['Node 0: acc_rate=0.649', 'Node 1: acc_rate=0.678', 'Node 2: acc_rate=0.678']...
Round 010: test acc mean=0.6879 ± 0.0178 | min=0.6562 max=0.7274
         : test loss mean=0.5898 ± 0.0158
         : individual accs = ['0.663158', '0.685665', '0.686779', '0.658031', '0.686067', '0.712664', '0.698690', '0.702751', '0.678697', '0.695035', '0.689685', '0.705778', '0.656250', '0.668103', '0.683274', '0.680349', '0.685442', '0.706454', '0.687986', '0.727432']
         : correct/total = [(756, 1140), (794, 1158), (774, 1127), (762, 1158), (778, 1134), (816, 1145), (800, 1145), (792, 1127), (771, 1136), (784, 1128), (789, 1144), (794, 1125), (756, 1152), (775, 1160), (768, 1124), (779, 1145), (791, 1154), (799, 1131), (796, 1157), (830, 1141)]
         : compromised: 0.6842, honest: 0.6935
         : coarse stats = ['Node 0: acc_rate=0.621', 'Node 1: acc_rate=0.653', 'Node 2: acc_rate=0.653']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: fully, Aggregation: coarse
Attack: gaussian, 60.0% compromised
Final accuracy - Compromised: 0.6842, Honest: 0.6935
Overall test accuracy: mean=0.6879 ± 0.0178

=== COARSE SUMMARY ===
Node 0: acceptance=0.621
Node 1: acceptance=0.653
Node 2: acceptance=0.653
Node 3: acceptance=0.653
Node 4: acceptance=0.621
Node 5: acceptance=0.653
Node 6: acceptance=0.621
Node 7: acceptance=0.621
Node 8: acceptance=0.653
Node 9: acceptance=0.621
Node 10: acceptance=0.621
Node 11: acceptance=0.653
Node 12: acceptance=0.653
Node 13: acceptance=0.653
Node 14: acceptance=0.653
Node 15: acceptance=0.653
Node 16: acceptance=0.621
Node 17: acceptance=0.653
Node 18: acceptance=0.653
Node 19: acceptance=0.621

Performance Summary:
  - Sketching time: 0.049s (4.9%)
  - Filtering time: 0.013s (1.3%)
  - Aggregation time: 0.941s (93.8%)
  - Total time: 1.003s
  - Mean acceptance rate: 0.640

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
