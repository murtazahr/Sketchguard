Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 126
Attack: Compromised 10/20 nodes: [1, 2, 5, 11, 12, 13, 14, 15, 17, 18]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8429 ± 0.0771
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5110, honest: 0.5217
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.545', 'Node 2: acc_rate=0.417']...
Round 002: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8088 ± 0.0620
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5110, honest: 0.5217
         : coarse stats = ['Node 0: acc_rate=0.500', 'Node 1: acc_rate=0.545', 'Node 2: acc_rate=0.417']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5110, honest: 0.5217
         : coarse stats = ['Node 0: acc_rate=0.667', 'Node 1: acc_rate=0.697', 'Node 2: acc_rate=0.611']...
Round 004: test acc mean=0.5042 ± 0.0157 | min=0.4774 max=0.5253
         : test loss mean=506.4678 ± 655.2039
         : individual accs = ['0.520175', '0.508636', '0.488909', '0.512953', '0.520282', '0.512664', '0.522271', '0.501331', '0.517606', '0.506206', '0.525350', '0.478222', '0.477431', '0.488793', '0.516014', '0.483843', '0.493068', '0.511052', '0.481417', '0.517967']
         : correct/total = [(593, 1140), (589, 1158), (551, 1127), (594, 1158), (590, 1134), (587, 1145), (598, 1145), (565, 1127), (588, 1136), (571, 1128), (601, 1144), (538, 1125), (550, 1152), (567, 1160), (580, 1124), (554, 1145), (569, 1154), (578, 1131), (557, 1157), (591, 1141)]
         : compromised: 0.4947, honest: 0.5137
         : coarse stats = ['Node 0: acc_rate=0.672', 'Node 1: acc_rate=0.773', 'Node 2: acc_rate=0.708']...
Round 005: test acc mean=0.4998 ± 0.0166 | min=0.4737 max=0.5285
         : test loss mean=251.0923 ± 355.5491
         : individual accs = ['0.473684', '0.492228', '0.510204', '0.528497', '0.511464', '0.514410', '0.513537', '0.501331', '0.514965', '0.508865', '0.479895', '0.519111', '0.477431', '0.482759', '0.494662', '0.517904', '0.502600', '0.499558', '0.474503', '0.478528']
         : correct/total = [(540, 1140), (570, 1158), (575, 1127), (612, 1158), (580, 1134), (589, 1145), (588, 1145), (565, 1127), (585, 1136), (574, 1128), (549, 1144), (584, 1125), (550, 1152), (560, 1160), (556, 1124), (593, 1145), (580, 1154), (565, 1131), (549, 1157), (546, 1141)]
         : compromised: 0.4983, honest: 0.5013
         : coarse stats = ['Node 0: acc_rate=0.738', 'Node 1: acc_rate=0.800', 'Node 2: acc_rate=0.767']...
Round 006: test acc mean=0.5129 ± 0.0161 | min=0.4896 max=0.5625
         : test loss mean=556.2103 ± 475.9229
         : individual accs = ['0.528947', '0.507772', '0.491571', '0.521589', '0.522046', '0.514410', '0.517904', '0.498669', '0.562500', '0.492021', '0.517483', '0.498667', '0.489583', '0.500862', '0.517794', '0.517031', '0.515598', '0.503979', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (588, 1158), (554, 1127), (604, 1158), (592, 1134), (589, 1145), (593, 1145), (562, 1127), (639, 1136), (555, 1128), (592, 1144), (561, 1125), (564, 1152), (581, 1160), (582, 1124), (592, 1145), (595, 1154), (570, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5064, honest: 0.5195
         : coarse stats = ['Node 0: acc_rate=0.760', 'Node 1: acc_rate=0.818', 'Node 2: acc_rate=0.806']...
Round 007: test acc mean=0.4974 ± 0.0233 | min=0.4375 max=0.5509
         : test loss mean=1.1534 ± 0.3451
         : individual accs = ['0.550877', '0.508636', '0.506655', '0.471503', '0.477954', '0.485590', '0.502183', '0.514641', '0.437500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.482969', '0.484402', '0.491600', '0.488332', '0.482910']
         : correct/total = [(628, 1140), (589, 1158), (571, 1127), (546, 1158), (542, 1134), (556, 1145), (575, 1145), (580, 1127), (497, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (553, 1145), (559, 1154), (556, 1131), (565, 1157), (551, 1141)]
         : compromised: 0.5010, honest: 0.4938
         : coarse stats = ['Node 0: acc_rate=0.696', 'Node 1: acc_rate=0.766', 'Node 2: acc_rate=0.750']...
Round 008: test acc mean=0.5353 ± 0.0285 | min=0.4987 max=0.6030
         : test loss mean=0.7119 ± 0.0368
         : individual accs = ['0.517544', '0.508636', '0.556344', '0.555268', '0.547619', '0.502183', '0.521397', '0.553682', '0.602993', '0.506206', '0.526224', '0.498667', '0.533854', '0.560345', '0.517794', '0.562445', '0.512998', '0.508400', '0.587727', '0.524978']
         : correct/total = [(590, 1140), (589, 1158), (627, 1127), (643, 1158), (621, 1134), (575, 1145), (597, 1145), (624, 1127), (685, 1136), (571, 1128), (602, 1144), (561, 1125), (615, 1152), (650, 1160), (582, 1124), (644, 1145), (592, 1154), (575, 1131), (680, 1157), (599, 1141)]
         : compromised: 0.5336, honest: 0.5369
         : coarse stats = ['Node 0: acc_rate=0.672', 'Node 1: acc_rate=0.739', 'Node 2: acc_rate=0.708']...
Round 009: test acc mean=0.5831 ± 0.0486 | min=0.4987 max=0.6748
         : test loss mean=0.6787 ± 0.0386
         : individual accs = ['0.564912', '0.642487', '0.607808', '0.550950', '0.606702', '0.522271', '0.607860', '0.584738', '0.622359', '0.623227', '0.524476', '0.498667', '0.585069', '0.506897', '0.606762', '0.600873', '0.593588', '0.507515', '0.629213', '0.674847']
         : correct/total = [(644, 1140), (744, 1158), (685, 1127), (638, 1158), (688, 1134), (598, 1145), (696, 1145), (659, 1127), (707, 1136), (703, 1128), (600, 1144), (561, 1125), (674, 1152), (588, 1160), (682, 1124), (688, 1145), (685, 1154), (574, 1131), (728, 1157), (770, 1141)]
         : compromised: 0.5708, honest: 0.5954
         : coarse stats = ['Node 0: acc_rate=0.653', 'Node 1: acc_rate=0.717', 'Node 2: acc_rate=0.676']...
Round 010: test acc mean=0.6674 ± 0.0329 | min=0.5449 max=0.7003
         : test loss mean=0.6071 ± 0.0245
         : individual accs = ['0.659649', '0.700345', '0.699201', '0.639896', '0.692240', '0.673362', '0.682096', '0.650399', '0.668134', '0.675532', '0.667832', '0.544889', '0.686632', '0.663793', '0.648577', '0.663755', '0.700173', '0.665782', '0.672429', '0.692375']
         : correct/total = [(752, 1140), (811, 1158), (788, 1127), (741, 1158), (785, 1134), (771, 1145), (781, 1145), (733, 1127), (759, 1136), (762, 1128), (764, 1144), (613, 1125), (791, 1152), (770, 1160), (729, 1124), (760, 1145), (808, 1154), (753, 1131), (778, 1157), (790, 1141)]
         : compromised: 0.6619, honest: 0.6728
         : coarse stats = ['Node 0: acc_rate=0.637', 'Node 1: acc_rate=0.700', 'Node 2: acc_rate=0.650']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: gaussian, 50.0% compromised
Final accuracy - Compromised: 0.6619, Honest: 0.6728
Overall test accuracy: mean=0.6674 ± 0.0329

=== COARSE SUMMARY ===
Node 0: acceptance=0.637
Node 1: acceptance=0.700
Node 2: acceptance=0.650
Node 3: acceptance=0.762
Node 4: acceptance=0.664
Node 5: acceptance=0.640
Node 6: acceptance=0.607
Node 7: acceptance=0.629
Node 8: acceptance=0.640
Node 9: acceptance=0.677
Node 10: acceptance=0.722
Node 11: acceptance=0.643
Node 12: acceptance=0.725
Node 13: acceptance=0.677
Node 14: acceptance=0.647
Node 15: acceptance=0.664
Node 16: acceptance=0.623
Node 17: acceptance=0.756
Node 18: acceptance=0.669
Node 19: acceptance=0.625

Performance Summary:
  - Sketching time: 0.045s (6.2%)
  - Filtering time: 0.010s (1.4%)
  - Aggregation time: 0.669s (92.4%)
  - Total time: 0.723s
  - Mean acceptance rate: 0.668

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
