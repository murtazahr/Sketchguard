Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 126
Attack: Compromised 4/20 nodes: [5, 12, 13, 17]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8476 ± 0.0784
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5131, honest: 0.5172
         : coarse stats = ['Node 0: acc_rate=0.812', 'Node 1: acc_rate=0.818', 'Node 2: acc_rate=0.833']...
Round 002: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.7724 ± 0.0522
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5131, honest: 0.5172
         : coarse stats = ['Node 0: acc_rate=0.812', 'Node 1: acc_rate=0.818', 'Node 2: acc_rate=0.833']...
Round 003: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5131, honest: 0.5172
         : coarse stats = ['Node 0: acc_rate=0.875', 'Node 1: acc_rate=0.879', 'Node 2: acc_rate=0.889']...
Round 004: test acc mean=0.5007 ± 0.0211 | min=0.4736 max=0.5565
         : test loss mean=41.8466 ± 35.0888
         : individual accs = ['0.483333', '0.503454', '0.528838', '0.524180', '0.480600', '0.489083', '0.524891', '0.489796', '0.473592', '0.498227', '0.474650', '0.486222', '0.520833', '0.493103', '0.520463', '0.496070', '0.489601', '0.489832', '0.490061', '0.556529']
         : correct/total = [(551, 1140), (583, 1158), (596, 1127), (607, 1158), (545, 1134), (560, 1145), (601, 1145), (552, 1127), (538, 1136), (562, 1128), (543, 1144), (547, 1125), (600, 1152), (572, 1160), (585, 1124), (568, 1145), (565, 1154), (554, 1131), (567, 1157), (635, 1141)]
         : compromised: 0.4982, honest: 0.5013
         : coarse stats = ['Node 0: acc_rate=0.875', 'Node 1: acc_rate=0.909', 'Node 2: acc_rate=0.917']...
Round 005: test acc mean=0.4885 ± 0.0204 | min=0.4424 max=0.5276
         : test loss mean=64.0007 ± 53.1700
         : individual accs = ['0.475439', '0.491364', '0.485359', '0.527634', '0.521164', '0.507424', '0.482096', '0.481810', '0.468310', '0.442376', '0.488636', '0.496000', '0.484375', '0.457759', '0.487544', '0.516157', '0.512998', '0.480990', '0.481417', '0.481157']
         : correct/total = [(542, 1140), (569, 1158), (547, 1127), (611, 1158), (591, 1134), (581, 1145), (552, 1145), (543, 1127), (532, 1136), (499, 1128), (559, 1144), (558, 1125), (558, 1152), (531, 1160), (548, 1124), (591, 1145), (592, 1154), (544, 1131), (557, 1157), (549, 1141)]
         : compromised: 0.4826, honest: 0.4900
         : coarse stats = ['Node 0: acc_rate=0.875', 'Node 1: acc_rate=0.927', 'Node 2: acc_rate=0.933']...
Round 006: test acc mean=0.5055 ± 0.0211 | min=0.4587 max=0.5495
         : test loss mean=31.7523 ± 19.3710
         : individual accs = ['0.509649', '0.522453', '0.496007', '0.515544', '0.476190', '0.506550', '0.495197', '0.543035', '0.474472', '0.521277', '0.507867', '0.458667', '0.507812', '0.508621', '0.483986', '0.507424', '0.515598', '0.512821', '0.497839', '0.549518']
         : correct/total = [(581, 1140), (605, 1158), (559, 1127), (597, 1158), (540, 1134), (580, 1145), (567, 1145), (612, 1127), (539, 1136), (588, 1128), (581, 1144), (516, 1125), (585, 1152), (590, 1160), (544, 1124), (581, 1145), (595, 1154), (580, 1131), (576, 1157), (627, 1141)]
         : compromised: 0.5090, honest: 0.5047
         : coarse stats = ['Node 0: acc_rate=0.875', 'Node 1: acc_rate=0.939', 'Node 2: acc_rate=0.944']...
Round 007: test acc mean=0.5216 ± 0.0253 | min=0.4911 max=0.5946
         : test loss mean=1.0164 ± 0.3644
         : individual accs = ['0.535965', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.585387', '0.491135', '0.525350', '0.500444', '0.594618', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522904', '0.518843']
         : correct/total = [(611, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (665, 1136), (554, 1128), (601, 1144), (563, 1125), (685, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (605, 1157), (592, 1141)]
         : compromised: 0.5311, honest: 0.5193
         : coarse stats = ['Node 0: acc_rate=0.848', 'Node 1: acc_rate=0.922', 'Node 2: acc_rate=0.929']...
Round 008: test acc mean=0.6490 ± 0.0276 | min=0.5941 max=0.7076
         : test loss mean=0.6283 ± 0.0228
         : individual accs = ['0.678070', '0.605354', '0.656610', '0.594128', '0.636684', '0.634934', '0.677729', '0.642413', '0.648768', '0.646277', '0.638986', '0.707556', '0.629340', '0.637069', '0.694840', '0.649782', '0.632582', '0.631300', '0.687122', '0.651183']
         : correct/total = [(773, 1140), (701, 1158), (740, 1127), (688, 1158), (722, 1134), (727, 1145), (776, 1145), (724, 1127), (737, 1136), (729, 1128), (731, 1144), (796, 1125), (725, 1152), (739, 1160), (781, 1124), (744, 1145), (730, 1154), (714, 1131), (795, 1157), (743, 1141)]
         : compromised: 0.6332, honest: 0.6530
         : coarse stats = ['Node 0: acc_rate=0.844', 'Node 1: acc_rate=0.909', 'Node 2: acc_rate=0.917']...
Round 009: test acc mean=0.7211 ± 0.0157 | min=0.6870 max=0.7468
         : test loss mean=0.5491 ± 0.0224
         : individual accs = ['0.731579', '0.700345', '0.720497', '0.735751', '0.701058', '0.720524', '0.726638', '0.695652', '0.722711', '0.725177', '0.713287', '0.740444', '0.717014', '0.739655', '0.740214', '0.723144', '0.724437', '0.687003', '0.746759', '0.710780']
         : correct/total = [(834, 1140), (811, 1158), (812, 1127), (852, 1158), (795, 1134), (825, 1145), (832, 1145), (784, 1127), (821, 1136), (818, 1128), (816, 1144), (833, 1125), (826, 1152), (858, 1160), (832, 1124), (828, 1145), (836, 1154), (777, 1131), (864, 1157), (811, 1141)]
         : compromised: 0.7160, honest: 0.7224
         : coarse stats = ['Node 0: acc_rate=0.840', 'Node 1: acc_rate=0.899', 'Node 2: acc_rate=0.907']...
Round 010: test acc mean=0.7745 ± 0.0171 | min=0.7434 max=0.8095
         : test loss mean=0.4748 ± 0.0232
         : individual accs = ['0.789474', '0.746978', '0.779059', '0.798791', '0.743386', '0.770306', '0.775546', '0.768412', '0.779049', '0.780142', '0.761364', '0.799111', '0.756076', '0.809483', '0.792705', '0.768559', '0.776430', '0.765694', '0.774417', '0.755478']
         : correct/total = [(900, 1140), (865, 1158), (878, 1127), (925, 1158), (843, 1134), (882, 1145), (888, 1145), (866, 1127), (885, 1136), (880, 1128), (871, 1144), (899, 1125), (871, 1152), (939, 1160), (891, 1124), (880, 1145), (896, 1154), (866, 1131), (896, 1157), (862, 1141)]
         : compromised: 0.7754, honest: 0.7743
         : coarse stats = ['Node 0: acc_rate=0.838', 'Node 1: acc_rate=0.891', 'Node 2: acc_rate=0.900']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: gaussian, 20.0% compromised
Final accuracy - Compromised: 0.7754, Honest: 0.7743
Overall test accuracy: mean=0.7745 ± 0.0171

=== COARSE SUMMARY ===
Node 0: acceptance=0.838
Node 1: acceptance=0.891
Node 2: acceptance=0.900
Node 3: acceptance=0.863
Node 4: acceptance=0.891
Node 5: acceptance=0.833
Node 6: acceptance=0.807
Node 7: acceptance=0.843
Node 8: acceptance=0.820
Node 9: acceptance=0.915
Node 10: acceptance=0.800
Node 11: acceptance=0.843
Node 12: acceptance=0.883
Node 13: acceptance=0.900
Node 14: acceptance=0.833
Node 15: acceptance=0.873
Node 16: acceptance=0.854
Node 17: acceptance=0.889
Node 18: acceptance=0.863
Node 19: acceptance=0.819

Performance Summary:
  - Sketching time: 0.039s (4.4%)
  - Filtering time: 0.009s (1.0%)
  - Aggregation time: 0.849s (94.6%)
  - Total time: 0.898s
  - Mean acceptance rate: 0.858

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
