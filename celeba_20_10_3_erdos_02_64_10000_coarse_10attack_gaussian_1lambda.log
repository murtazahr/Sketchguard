Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
Attack: Compromised 2/20 nodes: [5, 13]
Attack type: gaussian, lambda: 1.0
COARSE Node 0:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 1:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 2:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 3:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 4:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 5:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 6:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 7:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 8:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 9:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 10:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 11:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 12:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 13:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 14:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 15:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 16:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 17:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 18:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE Node 19:
  Model dim: 30,758 → Sketch size: 1000
  Compression ratio: 30.8x
  Using model parameters for aggregation, sketches for filtering
COARSE ALGORITHM (Sketch-based Filtering + State Aggregation)
  - Model dimension: 30,758 parameters
  - Sketch size: 1000
  - Compression ratio: 30.8x
  - Complexity: O(d + N×k) = O(30,758 + 20×1000)
  - Theoretical speedup vs BALANCE: 12.1x
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.8564 ± 0.0948
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5107, honest: 0.5170
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 002: test acc mean=0.5191 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=0.7377 ± 0.0728
         : individual accs = ['0.528947', '0.508636', '0.527063', '0.529361', '0.522046', '0.514410', '0.539738', '0.504880', '0.562500', '0.491135', '0.526224', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522904', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (594, 1127), (613, 1158), (592, 1134), (589, 1145), (618, 1145), (569, 1127), (639, 1136), (554, 1128), (602, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (605, 1157), (591, 1141)]
         : compromised: 0.5107, honest: 0.5201
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 003: test acc mean=0.5542 ± 0.0585 | min=0.4987 max=0.7205
         : test loss mean=nan ± nan
         : individual accs = ['0.585088', '0.594991', '0.543922', '0.528497', '0.542328', '0.517904', '0.720524', '0.503993', '0.602113', '0.499113', '0.582168', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.671577', '0.508400', '0.526361', '0.593339']
         : correct/total = [(667, 1140), (689, 1158), (613, 1127), (612, 1158), (615, 1134), (593, 1145), (825, 1145), (568, 1127), (684, 1136), (563, 1128), (666, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (775, 1154), (575, 1131), (609, 1157), (677, 1141)]
         : compromised: 0.5124, honest: 0.5588
         : coarse stats = ['Node 0: acc_rate=1.000', 'Node 1: acc_rate=1.000', 'Node 2: acc_rate=1.000']...
Round 004: test acc mean=0.5641 ± 0.0865 | min=0.4715 max=0.8374
         : test loss mean=163.1097 ± 328.0625
         : individual accs = ['0.581579', '0.522453', '0.616681', '0.471503', '0.582892', '0.556332', '0.544978', '0.508429', '0.614437', '0.643617', '0.837413', '0.504000', '0.498264', '0.508621', '0.479537', '0.489083', '0.515598', '0.503095', '0.610199', '0.693252']
         : correct/total = [(663, 1140), (605, 1158), (695, 1127), (546, 1158), (661, 1134), (637, 1145), (624, 1145), (573, 1127), (698, 1136), (726, 1128), (958, 1144), (567, 1125), (574, 1152), (590, 1160), (539, 1124), (560, 1145), (595, 1154), (569, 1131), (706, 1157), (791, 1141)]
         : compromised: 0.5325, honest: 0.5676
         : coarse stats = ['Node 0: acc_rate=0.958', 'Node 1: acc_rate=0.917', 'Node 2: acc_rate=0.950']...
Round 005: test acc mean=0.6577 ± 0.1524 | min=0.4601 max=0.8829
         : test loss mean=87.8812 ± 213.6835
         : individual accs = ['0.807018', '0.834197', '0.740018', '0.522453', '0.771605', '0.514410', '0.730131', '0.496894', '0.764965', '0.873227', '0.882867', '0.502222', '0.460069', '0.506897', '0.487544', '0.521397', '0.617851', '0.491600', '0.791703', '0.836109']
         : correct/total = [(920, 1140), (966, 1158), (834, 1127), (605, 1158), (875, 1134), (589, 1145), (836, 1145), (560, 1127), (869, 1136), (985, 1128), (1010, 1144), (565, 1125), (530, 1152), (588, 1160), (548, 1124), (597, 1145), (713, 1154), (556, 1131), (916, 1157), (954, 1141)]
         : compromised: 0.5107, honest: 0.6740
         : coarse stats = ['Node 0: acc_rate=0.933', 'Node 1: acc_rate=0.867', 'Node 2: acc_rate=0.920']...
Round 006: test acc mean=0.6889 ± 0.1723 | min=0.4760 max=0.9087
         : test loss mean=134.9386 ± 353.2460
         : individual accs = ['0.889474', '0.834197', '0.826087', '0.529361', '0.805996', '0.489083', '0.764192', '0.498669', '0.842430', '0.908688', '0.907343', '0.486222', '0.522569', '0.493103', '0.475979', '0.494323', '0.748700', '0.546419', '0.828003', '0.886941']
         : correct/total = [(1014, 1140), (966, 1158), (931, 1127), (613, 1158), (914, 1134), (560, 1145), (875, 1145), (562, 1127), (957, 1136), (1025, 1128), (1038, 1144), (547, 1125), (602, 1152), (572, 1160), (535, 1124), (566, 1145), (864, 1154), (618, 1131), (958, 1157), (1012, 1141)]
         : compromised: 0.4911, honest: 0.7109
         : coarse stats = ['Node 0: acc_rate=0.917', 'Node 1: acc_rate=0.833', 'Node 2: acc_rate=0.900']...
Round 007: test acc mean=0.7004 ± 0.1888 | min=0.4667 max=0.9152
         : test loss mean=0.6790 ± 0.5734
         : individual accs = ['0.893860', '0.886874', '0.816327', '0.471503', '0.874780', '0.514410', '0.828821', '0.503993', '0.860035', '0.908688', '0.915210', '0.466667', '0.522569', '0.493103', '0.482206', '0.482969', '0.834489', '0.508400', '0.837511', '0.906223']
         : correct/total = [(1019, 1140), (1027, 1158), (920, 1127), (546, 1158), (992, 1134), (589, 1145), (949, 1145), (568, 1127), (977, 1136), (1025, 1128), (1047, 1144), (525, 1125), (602, 1152), (572, 1160), (542, 1124), (553, 1145), (963, 1154), (575, 1131), (969, 1157), (1034, 1141)]
         : compromised: 0.5038, honest: 0.7223
         : coarse stats = ['Node 0: acc_rate=0.905', 'Node 1: acc_rate=0.810', 'Node 2: acc_rate=0.886']...
Round 008: test acc mean=0.5624 ± 0.1337 | min=0.4715 max=0.9045
         : test loss mean=0.6721 ± 0.1810
         : individual accs = ['0.528947', '0.508636', '0.863354', '0.471503', '0.522046', '0.514410', '0.521397', '0.503993', '0.866197', '0.491135', '0.525350', '0.501333', '0.522569', '0.493103', '0.481317', '0.482969', '0.515598', '0.508400', '0.522040', '0.904470']
         : correct/total = [(603, 1140), (589, 1158), (973, 1127), (546, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (984, 1136), (554, 1128), (601, 1144), (564, 1125), (602, 1152), (572, 1160), (541, 1124), (553, 1145), (595, 1154), (575, 1131), (604, 1157), (1032, 1141)]
         : compromised: 0.5038, honest: 0.5690
         : coarse stats = ['Node 0: acc_rate=0.917', 'Node 1: acc_rate=0.833', 'Node 2: acc_rate=0.875']...
Round 009: test acc mean=0.5184 ± 0.0215 | min=0.4724 max=0.5787
         : test loss mean=0.7075 ± 0.0216
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.472366', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.508865', '0.525350', '0.578667', '0.523438', '0.505172', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (547, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (574, 1128), (601, 1144), (651, 1125), (603, 1152), (586, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5098, honest: 0.5194
         : coarse stats = ['Node 0: acc_rate=0.926', 'Node 1: acc_rate=0.852', 'Node 2: acc_rate=0.889']...
Round 010: test acc mean=0.5713 ± 0.0850 | min=0.4933 max=0.7858
         : test loss mean=0.6760 ± 0.0542
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.746114', '0.527337', '0.514410', '0.521397', '0.502218', '0.658451', '0.714539', '0.544580', '0.785778', '0.526042', '0.615517', '0.517794', '0.524017', '0.545927', '0.601238', '0.522040', '0.527607']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (864, 1158), (598, 1134), (589, 1145), (597, 1145), (566, 1127), (748, 1136), (806, 1128), (623, 1144), (884, 1125), (606, 1152), (714, 1160), (582, 1124), (600, 1145), (630, 1154), (680, 1131), (604, 1157), (602, 1141)]
         : compromised: 0.5650, honest: 0.5720
         : coarse stats = ['Node 0: acc_rate=0.933', 'Node 1: acc_rate=0.867', 'Node 2: acc_rate=0.900']...

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: coarse
Attack: gaussian, 10.0% compromised
Final accuracy - Compromised: 0.5650, Honest: 0.5720
Overall test accuracy: mean=0.5713 ± 0.0850

=== COARSE SUMMARY ===
Node 0: acceptance=0.933
Node 1: acceptance=0.867
Node 2: acceptance=0.900
Node 3: acceptance=0.850
Node 4: acceptance=0.800
Node 5: acceptance=0.600
Node 6: acceptance=0.740
Node 7: acceptance=0.880
Node 8: acceptance=1.000
Node 9: acceptance=0.700
Node 10: acceptance=0.700
Node 11: acceptance=0.800
Node 12: acceptance=0.843
Node 13: acceptance=0.600
Node 14: acceptance=0.829
Node 15: acceptance=0.850
Node 16: acceptance=0.740
Node 17: acceptance=0.880
Node 18: acceptance=0.900
Node 19: acceptance=1.000

Performance Summary:
  - Sketching time: 0.040s (9.8%)
  - Filtering time: 0.005s (1.2%)
  - Aggregation time: 0.367s (89.0%)
  - Total time: 0.412s
  - Mean acceptance rate: 0.821

COARSE Algorithm Properties:
  - Original dimension: 30,758
  - Sketch size: 1000
  - Compression ratio: 12.1x
  - Single repetition: No repetitions needed
  - Theoretical complexity: O(d + N×k)
  - Approach: Sketch filtering + state aggregation
