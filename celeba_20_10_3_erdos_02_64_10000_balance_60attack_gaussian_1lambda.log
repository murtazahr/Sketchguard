Device: cuda
Seed: 987654321
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA train files...
LEAF CelebA train: 9343 users (celebrities), 177457 samples
Looking for images in: /home/student.unimelb.edu.au/mrangwala/Trust-Monitor/leaf/data/celeba/data/raw/img_align_celeba
Loading 1 LEAF CelebA test files...
LEAF CelebA test: 9343 users (celebrities), 22831 samples
Found 9343 train users, 9343 test users, 9343 common users
User sample counts range: 31 (max) to 4 (min)
Distributed ALL 9343 users across 20 clients
Users per client: 467 (with 3 clients getting +1 user)
Train partition sizes: [8843, 8998, 8728, 9034, 8866, 8946, 8873, 8776, 8816, 8801, 8913, 8656, 9115, 8921, 8699, 8823, 8912, 8766, 9102, 8869]
Test partition sizes: [1140, 1158, 1127, 1158, 1134, 1145, 1145, 1127, 1136, 1128, 1144, 1125, 1152, 1160, 1124, 1145, 1154, 1131, 1157, 1141]
  Client 0: 8843 train samples, 2 unique classes
  Client 1: 8998 train samples, 2 unique classes
  Client 2: 8728 train samples, 2 unique classes
  Client 3: 9034 train samples, 2 unique classes
  Client 4: 8866 train samples, 2 unique classes
  Client 5: 8946 train samples, 2 unique classes
  Client 6: 8873 train samples, 2 unique classes
  Client 7: 8776 train samples, 2 unique classes
  Client 8: 8816 train samples, 2 unique classes
  Client 9: 8801 train samples, 2 unique classes
  Client 10: 8913 train samples, 2 unique classes
  Client 11: 8656 train samples, 2 unique classes
  Client 12: 9115 train samples, 2 unique classes
  Client 13: 8921 train samples, 2 unique classes
  Client 14: 8699 train samples, 2 unique classes
  Client 15: 8823 train samples, 2 unique classes
  Client 16: 8912 train samples, 2 unique classes
  Client 17: 8766 train samples, 2 unique classes
  Client 18: 9102 train samples, 2 unique classes
  Client 19: 8869 train samples, 2 unique classes
Will sample 10000 samples per client per epoch
Graph: erdos, nodes: 20, edges: 48
Attack: Compromised 12/20 nodes: [1, 2, 3, 5, 8, 11, 12, 13, 14, 15, 17, 18]
Attack type: gaussian, lambda: 1.0
BALANCE algorithm:
  - Model dimension: 30,758 parameters
  - Complexity: O(N×d) = O(20×30,758)
Initial test acc across nodes: mean=0.4969 ± 0.0214
Round 001: test acc mean=0.5164 ± 0.0150 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522928', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.506897', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (593, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (588, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5167, honest: 0.5159
Round 002: test acc mean=0.7293 ± 0.1823 | min=0.4922 max=0.9224
         : test loss mean=6.9290 ± 28.0849
         : individual accs = ['0.900000', '0.508636', '0.493345', '0.528497', '0.922399', '0.915284', '0.902183', '0.841171', '0.852113', '0.864362', '0.829545', '0.498667', '0.522569', '0.492241', '0.820285', '0.517031', '0.909879', '0.508400', '0.853068', '0.905346']
         : correct/total = [(1026, 1140), (589, 1158), (556, 1127), (612, 1158), (1046, 1134), (1048, 1145), (1033, 1145), (948, 1127), (968, 1136), (975, 1128), (949, 1144), (561, 1125), (602, 1152), (571, 1160), (922, 1124), (592, 1145), (1050, 1154), (575, 1131), (987, 1157), (1033, 1141)]
         : compromised: 0.6258, honest: 0.8844
Round 003: test acc mean=0.5158 ± 0.0155 | min=0.4911 max=0.5625
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.522046', '0.514410', '0.521397', '0.503993', '0.562500', '0.491135', '0.525350', '0.498667', '0.522569', '0.495690', '0.517794', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (592, 1134), (589, 1145), (597, 1145), (568, 1127), (639, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (575, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5158, honest: 0.5158
Round 004: test acc mean=0.4982 ± 0.0231 | min=0.4658 max=0.5466
         : test loss mean=47827.1650 ± 126489.8892
         : individual accs = ['0.468421', '0.501727', '0.506655', '0.473230', '0.522928', '0.514410', '0.480349', '0.465839', '0.493838', '0.523050', '0.474650', '0.510222', '0.485243', '0.546552', '0.517794', '0.517031', '0.470537', '0.507515', '0.465860', '0.517967']
         : correct/total = [(534, 1140), (581, 1158), (571, 1127), (548, 1158), (593, 1134), (589, 1145), (550, 1145), (525, 1127), (561, 1136), (590, 1128), (543, 1144), (574, 1125), (559, 1152), (634, 1160), (582, 1124), (592, 1145), (543, 1154), (574, 1131), (539, 1157), (591, 1141)]
         : compromised: 0.5033, honest: 0.4905
Round 005: test acc mean=0.4988 ± 0.0186 | min=0.4747 max=0.5301
         : test loss mean=5248.7728 ± 8844.5912
         : individual accs = ['0.528947', '0.491364', '0.503993', '0.526770', '0.477954', '0.530131', '0.475109', '0.501331', '0.500880', '0.492021', '0.474650', '0.498667', '0.477431', '0.524138', '0.484875', '0.487336', '0.489601', '0.508400', '0.522904', '0.479404']
         : correct/total = [(603, 1140), (569, 1158), (568, 1127), (610, 1158), (542, 1134), (607, 1145), (544, 1145), (565, 1127), (569, 1136), (555, 1128), (543, 1144), (561, 1125), (550, 1152), (608, 1160), (545, 1124), (558, 1145), (565, 1154), (575, 1131), (605, 1157), (547, 1141)]
         : compromised: 0.5047, honest: 0.4899
Round 006: test acc mean=0.5013 ± 0.0206 | min=0.4711 max=0.5414
         : test loss mean=34613.2747 ± 66777.9919
         : individual accs = ['0.471053', '0.532815', '0.492458', '0.487047', '0.477954', '0.483843', '0.475983', '0.521739', '0.541373', '0.535461', '0.506119', '0.501333', '0.513021', '0.505172', '0.517794', '0.482096', '0.484402', '0.500442', '0.513397', '0.482033']
         : correct/total = [(537, 1140), (617, 1158), (555, 1127), (564, 1158), (542, 1134), (554, 1145), (545, 1145), (588, 1127), (615, 1136), (604, 1128), (579, 1144), (564, 1125), (591, 1152), (586, 1160), (582, 1124), (552, 1145), (559, 1154), (566, 1131), (594, 1157), (550, 1141)]
         : compromised: 0.5059, honest: 0.4943
Round 007: test acc mean=0.5060 ± 0.0212 | min=0.4375 max=0.5289
         : test loss mean=1318400.9575 ± 2964452.2721
         : individual accs = ['0.528947', '0.508636', '0.493345', '0.528497', '0.477954', '0.520524', '0.510917', '0.503993', '0.437500', '0.491135', '0.525350', '0.498667', '0.522569', '0.505172', '0.517794', '0.517031', '0.484402', '0.508400', '0.522040', '0.517967']
         : correct/total = [(603, 1140), (589, 1158), (556, 1127), (612, 1158), (542, 1134), (596, 1145), (585, 1145), (568, 1127), (497, 1136), (554, 1128), (601, 1144), (561, 1125), (602, 1152), (586, 1160), (582, 1124), (592, 1145), (559, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5067, honest: 0.5051
Round 008: test acc mean=0.4998 ± 0.0209 | min=0.4758 max=0.5475
         : test loss mean=nan ± nan
         : individual accs = ['0.528947', '0.475820', '0.493345', '0.475820', '0.477954', '0.485590', '0.478603', '0.477374', '0.547535', '0.508865', '0.525350', '0.501333', '0.476562', '0.491379', '0.517794', '0.517031', '0.515598', '0.508400', '0.481417', '0.510955']
         : correct/total = [(603, 1140), (551, 1158), (556, 1127), (551, 1158), (542, 1134), (556, 1145), (548, 1145), (538, 1127), (622, 1136), (574, 1128), (601, 1144), (564, 1125), (549, 1152), (570, 1160), (582, 1124), (592, 1145), (595, 1154), (575, 1131), (557, 1157), (583, 1141)]
         : compromised: 0.4977, honest: 0.5030
Round 009: test acc mean=0.5018 ± 0.0160 | min=0.4711 max=0.5226
         : test loss mean=26874815.0019 ± 97377063.7644
         : individual accs = ['0.471053', '0.508636', '0.493345', '0.471503', '0.507055', '0.510044', '0.521397', '0.503993', '0.500880', '0.491135', '0.487762', '0.501333', '0.522569', '0.482759', '0.482206', '0.517031', '0.515598', '0.508400', '0.522040', '0.517967']
         : correct/total = [(537, 1140), (589, 1158), (556, 1127), (546, 1158), (575, 1134), (584, 1145), (597, 1145), (568, 1127), (569, 1136), (554, 1128), (558, 1144), (564, 1125), (602, 1152), (560, 1160), (542, 1124), (592, 1145), (595, 1154), (575, 1131), (604, 1157), (591, 1141)]
         : compromised: 0.5017, honest: 0.5020
Round 010: test acc mean=0.4916 ± 0.0213 | min=0.4375 max=0.5253
         : test loss mean=2171226.0278 ± 6582284.6641
         : individual accs = ['0.485088', '0.519862', '0.493345', '0.471503', '0.522046', '0.485590', '0.478603', '0.473824', '0.437500', '0.491135', '0.525350', '0.486222', '0.522569', '0.521552', '0.498221', '0.483843', '0.484402', '0.491600', '0.479689', '0.479404']
         : correct/total = [(553, 1140), (602, 1158), (556, 1127), (546, 1158), (592, 1134), (556, 1145), (548, 1145), (534, 1127), (497, 1136), (554, 1128), (601, 1144), (547, 1125), (602, 1152), (605, 1160), (560, 1124), (554, 1145), (559, 1154), (556, 1131), (555, 1157), (547, 1141)]
         : compromised: 0.4910, honest: 0.4925

=== FINAL RESULTS ===
Dataset: celeba, Nodes: 20, Graph: erdos, Aggregation: balance
Attack: gaussian, 60.0% compromised
Final accuracy - Compromised: 0.4910, Honest: 0.4925
Overall test accuracy: mean=0.4916 ± 0.0213

=== BALANCE SUMMARY ===
Node 0: acceptance=0.450
Node 1: acceptance=0.450
Node 2: acceptance=0.420
Node 3: acceptance=0.475
Node 4: acceptance=0.450
Node 5: acceptance=0.440
Node 6: acceptance=0.420
Node 7: acceptance=0.460
Node 8: acceptance=0.600
Node 9: acceptance=0.433
Node 10: acceptance=0.500
Node 11: acceptance=0.400
Node 12: acceptance=0.486
Node 13: acceptance=0.500
Node 14: acceptance=0.414
Node 15: acceptance=0.467
Node 16: acceptance=0.420
Node 17: acceptance=0.480
Node 18: acceptance=0.475
Node 19: acceptance=0.650

Performance Summary:
  - Distance computation time: 0.753s (39.9%)
  - Filtering time: 0.886s (46.9%)
  - Aggregation time: 0.251s (13.3%)
  - Total time: 1.890s
  - Mean acceptance rate: 0.470

BALANCE Algorithm Properties:
  - Model dimension: 30,758
  - No compression: Full parameter comparison
  - Theoretical complexity: O(deg(i)×d)
  - Approach: Full parameter filtering + averaging
